
mainframev1.4.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000310a  0000319e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000310a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  00800130  00800130  000031ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c61  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100f  00000000  00000000  00007069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000182a  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a1c  00000000  00000000  000098a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b0d  00000000  00000000  0000a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045f7  00000000  00000000  0000adcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a6 c0       	rjmp	.+332    	; 0x152 <__bad_interrupt>
       6:	00 00       	nop
       8:	a4 c0       	rjmp	.+328    	; 0x152 <__bad_interrupt>
       a:	00 00       	nop
       c:	a2 c0       	rjmp	.+324    	; 0x152 <__bad_interrupt>
       e:	00 00       	nop
      10:	a0 c0       	rjmp	.+320    	; 0x152 <__bad_interrupt>
      12:	00 00       	nop
      14:	9e c0       	rjmp	.+316    	; 0x152 <__bad_interrupt>
      16:	00 00       	nop
      18:	9c c0       	rjmp	.+312    	; 0x152 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9a c0       	rjmp	.+308    	; 0x152 <__bad_interrupt>
      1e:	00 00       	nop
      20:	98 c0       	rjmp	.+304    	; 0x152 <__bad_interrupt>
      22:	00 00       	nop
      24:	96 c0       	rjmp	.+300    	; 0x152 <__bad_interrupt>
      26:	00 00       	nop
      28:	94 c0       	rjmp	.+296    	; 0x152 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	92 c0       	rjmp	.+292    	; 0x152 <__bad_interrupt>
      2e:	00 00       	nop
      30:	90 c0       	rjmp	.+288    	; 0x152 <__bad_interrupt>
      32:	00 00       	nop
      34:	8e c0       	rjmp	.+284    	; 0x152 <__bad_interrupt>
      36:	00 00       	nop
      38:	8c c0       	rjmp	.+280    	; 0x152 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8a c0       	rjmp	.+276    	; 0x152 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f6 c1       	rjmp	.+1004   	; 0x42e <__vector_16>
      42:	00 00       	nop
      44:	86 c0       	rjmp	.+268    	; 0x152 <__bad_interrupt>
      46:	00 00       	nop
      48:	84 c0       	rjmp	.+264    	; 0x152 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	82 c0       	rjmp	.+260    	; 0x152 <__bad_interrupt>
      4e:	00 00       	nop
      50:	80 c0       	rjmp	.+256    	; 0x152 <__bad_interrupt>
      52:	00 00       	nop
      54:	7e c0       	rjmp	.+252    	; 0x152 <__bad_interrupt>
      56:	00 00       	nop
      58:	7c c0       	rjmp	.+248    	; 0x152 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7a c0       	rjmp	.+244    	; 0x152 <__bad_interrupt>
      5e:	00 00       	nop
      60:	78 c0       	rjmp	.+240    	; 0x152 <__bad_interrupt>
      62:	00 00       	nop
      64:	76 c0       	rjmp	.+236    	; 0x152 <__bad_interrupt>
      66:	00 00       	nop
      68:	74 c0       	rjmp	.+232    	; 0x152 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	72 c0       	rjmp	.+228    	; 0x152 <__bad_interrupt>
      6e:	00 00       	nop
      70:	70 c0       	rjmp	.+224    	; 0x152 <__bad_interrupt>
      72:	00 00       	nop
      74:	6e c0       	rjmp	.+220    	; 0x152 <__bad_interrupt>
      76:	00 00       	nop
      78:	6c c0       	rjmp	.+216    	; 0x152 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6a c0       	rjmp	.+212    	; 0x152 <__bad_interrupt>
      7e:	00 00       	nop
      80:	68 c0       	rjmp	.+208    	; 0x152 <__bad_interrupt>
      82:	00 00       	nop
      84:	66 c0       	rjmp	.+204    	; 0x152 <__bad_interrupt>
      86:	00 00       	nop
      88:	64 c0       	rjmp	.+200    	; 0x152 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	03 6e       	ori	r16, 0xE3	; 227
      8e:	db 36       	cpi	r29, 0x6B	; 107
      90:	3d 9a       	sbi	0x07, 5	; 7
      92:	99 99       	sbic	0x13, 1	; 19
      94:	99 3d       	cpi	r25, 0xD9	; 217
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	3e 00       	.word	0x003e	; ????
      9c:	00 00       	nop
      9e:	80 3f       	cpi	r24, 0xF0	; 240
      a0:	08 4a       	sbci	r16, 0xA8	; 168
      a2:	d7 3b       	cpi	r29, 0xB7	; 183
      a4:	3b ce       	rjmp	.-906    	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
      a6:	01 6e       	ori	r16, 0xE1	; 225
      a8:	84 bc       	out	0x24, r8	; 36
      aa:	bf fd       	.word	0xfdbf	; ????
      ac:	c1 2f       	mov	r28, r17
      ae:	3d 6c       	ori	r19, 0xCD	; 205
      b0:	74 31       	cpi	r23, 0x14	; 20
      b2:	9a bd       	out	0x2a, r25	; 42
      b4:	56 83       	std	Z+6, r21	; 0x06
      b6:	3d da       	rcall	.-2950   	; 0xfffff532 <__eeprom_end+0xff7ef532>
      b8:	3d 00       	.word	0x003d	; ????
      ba:	c7 7f       	andi	r28, 0xF7	; 247
      bc:	11 be       	out	0x31, r1	; 49
      be:	d9 e4       	ldi	r29, 0x49	; 73
      c0:	bb 4c       	sbci	r27, 0xCB	; 203
      c2:	3e 91       	ld	r19, -X
      c4:	6b aa       	std	Y+51, r6	; 0x33
      c6:	aa be       	out	0x3a, r10	; 58
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	3f 07       	cpc	r19, r31
      ce:	2c 7a       	andi	r18, 0xAC	; 172
      d0:	a5 ba       	out	0x15, r10	; 21
      d2:	6c c5       	rjmp	.+2776   	; 0xbac <__vector_16+0x77e>
      d4:	90 da       	rcall	.-2784   	; 0xfffff5f6 <__eeprom_end+0xff7ef5f6>
      d6:	3b 93       	.word	0x933b	; ????
      d8:	65 fc       	sbrc	r6, 5
      da:	8b bc       	out	0x2b, r8	; 43
      dc:	53 f8       	bld	r5, 3
      de:	10 fd       	sbrc	r17, 0
      e0:	3c 56       	subi	r19, 0x6C	; 108
      e2:	92 83       	std	Z+2, r25	; 0x02
      e4:	4d bd       	out	0x2d, r20	; 45
      e6:	87 9d       	mul	r24, r7
      e8:	3a b6       	in	r3, 0x3a	; 58
      ea:	3d cb       	rjmp	.-2438   	; 0xfffff766 <__eeprom_end+0xff7ef766>
      ec:	c9 bf       	out	0x39, r28	; 57
      ee:	5b be       	out	0x3b, r5	; 59
      f0:	73 da       	rcall	.-2842   	; 0xfffff5d8 <__eeprom_end+0xff7ef5d8>
      f2:	0f c9       	rjmp	.-3554   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      f4:	3f 05       	cpc	r19, r15
      f6:	a8 4c       	sbci	r26, 0xC8	; 200
      f8:	cd b2       	in	r12, 0x1d	; 29
      fa:	d4 4e       	sbci	r29, 0xE4	; 228
      fc:	b9 38       	cpi	r27, 0x89	; 137
      fe:	36 a9       	ldd	r19, Z+54	; 0x36
     100:	02 0c       	add	r0, r2
     102:	50 b9       	out	0x00, r21	; 0
     104:	91 86       	std	Z+9, r9	; 0x09
     106:	88 08       	sbc	r8, r8
     108:	3c a6       	std	Y+44, r3	; 0x2c
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	2a be       	out	0x3a, r2	; 58
     10e:	00 00       	nop
     110:	00 80       	ld	r0, Z
     112:	3f 00       	.word	0x003f	; ????

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d0 e1       	ldi	r29, 0x10	; 16
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	ea e0       	ldi	r30, 0x0A	; 10
     128:	f1 e3       	ldi	r31, 0x31	; 49
     12a:	00 e0       	ldi	r16, 0x00	; 0
     12c:	0b bf       	out	0x3b, r16	; 59
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x14>
     130:	07 90       	elpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	a0 33       	cpi	r26, 0x30	; 48
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0x10>

0000013a <__do_clear_bss>:
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	a0 e3       	ldi	r26, 0x30	; 48
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	a4 38       	cpi	r26, 0x84	; 132
     146:	b2 07       	cpc	r27, r18
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
     14a:	0e 94 b4 08 	call	0x1168	; 0x1168 <main>
     14e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <_exit>

00000152 <__bad_interrupt>:
     152:	56 cf       	rjmp	.-340    	; 0x0 <__vectors>

00000154 <i2c_init>:
//	input:
//		hz - data transfer rate in Hz
//============================================
void i2c_init(int32_t hz)
{
	TWSR = 0x00;
     154:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	//TWSR = 1<<TWPS0;		// 비트율 프리스케일러값을 1로 한다.

	// 비트율 설정
	TWBR = 0x0c;
     158:	8c e0       	ldi	r24, 0x0C	; 12
     15a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     15e:	08 95       	ret

00000160 <i2c_write_a_byte>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_write_a_byte(uint8_t i2c_addr, uint8_t data, int with_stop)
{
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	8a 01       	movw	r16, r20
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
     16a:	88 0f       	add	r24, r24
     16c:	2a e0       	ldi	r18, 0x0A	; 10
     16e:	30 e0       	ldi	r19, 0x00	; 0
{
	int time_out = TIME_OUT_CNT;
	 
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     170:	e4 e7       	ldi	r30, 0x74	; 116
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	54 ea       	ldi	r21, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     176:	a1 e7       	ldi	r26, 0x71	; 113
     178:	b0 e0       	ldi	r27, 0x00	; 0
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
     17a:	c3 e7       	ldi	r28, 0x73	; 115
     17c:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     17e:	44 e8       	ldi	r20, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     180:	74 e9       	ldi	r23, 0x94	; 148
{
	int time_out = TIME_OUT_CNT;
	 
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     182:	50 83       	st	Z, r21
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     184:	90 81       	ld	r25, Z
     186:	99 23       	and	r25, r25
     188:	ec f7       	brge	.-6      	; 0x184 <i2c_write_a_byte+0x24>
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     18a:	9c 91       	ld	r25, X
     18c:	98 7f       	andi	r25, 0xF8	; 248
     18e:	98 30       	cpi	r25, 0x08	; 8
     190:	89 f5       	brne	.+98     	; 0x1f4 <i2c_write_a_byte+0x94>
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
     192:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     194:	40 83       	st	Z, r20
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
     196:	90 81       	ld	r25, Z
     198:	99 23       	and	r25, r25
     19a:	ec f7       	brge	.-6      	; 0x196 <i2c_write_a_byte+0x36>
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
     19c:	9c 91       	ld	r25, X
     19e:	98 7f       	andi	r25, 0xF8	; 248
     1a0:	98 31       	cpi	r25, 0x18	; 24
     1a2:	61 f0       	breq	.+24     	; 0x1bc <i2c_write_a_byte+0x5c>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     1a4:	70 83       	st	Z, r23
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     1a6:	90 81       	ld	r25, Z
     1a8:	94 fd       	sbrc	r25, 4
     1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <i2c_write_a_byte+0x46>
     1ac:	21 50       	subi	r18, 0x01	; 1
     1ae:	31 09       	sbc	r19, r1

			time_out--;
			if(time_out <= 0) return -2;
     1b0:	21 f1       	breq	.+72     	; 0x1fa <i2c_write_a_byte+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b2:	95 e3       	ldi	r25, 0x35	; 53
     1b4:	9a 95       	dec	r25
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <i2c_write_a_byte+0x54>
     1b8:	00 00       	nop
     1ba:	e3 cf       	rjmp	.-58     	; 0x182 <i2c_write_a_byte+0x22>
	}

	//--------------------------------------------------------
	// write i-th data to slave
	//--------------------------------------------------------
	TWDR = data;
     1bc:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     1c0:	84 e8       	ldi	r24, 0x84	; 132
     1c2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));			// wait until data is sent.
     1c6:	e4 e7       	ldi	r30, 0x74	; 116
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	88 23       	and	r24, r24
     1ce:	ec f7       	brge	.-6      	; 0x1ca <i2c_write_a_byte+0x6a>

	// check if ACK is received from slave after sending data
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     1d0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     1d4:	88 7f       	andi	r24, 0xF8	; 248
     1d6:	88 32       	cpi	r24, 0x28	; 40
     1d8:	99 f4       	brne	.+38     	; 0x200 <i2c_write_a_byte+0xa0>
	
	//----------------------------------
	// send STOP condition
	//----------------------------------

	if(with_stop)
     1da:	01 2b       	or	r16, r17
     1dc:	a1 f0       	breq	.+40     	; 0x206 <i2c_write_a_byte+0xa6>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     1de:	84 e9       	ldi	r24, 0x94	; 148
     1e0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
		while((TWCR & (1<<TWSTO)));					// wait until STOP condition is sent and release bus
     1e4:	e4 e7       	ldi	r30, 0x74	; 116
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	84 fd       	sbrc	r24, 4
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <i2c_write_a_byte+0x88>
	}

	return 0;
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0b c0       	rjmp	.+22     	; 0x20a <i2c_write_a_byte+0xaa>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	9f ef       	ldi	r25, 0xFF	; 255
     1f8:	08 c0       	rjmp	.+16     	; 0x20a <i2c_write_a_byte+0xaa>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     1fa:	8e ef       	ldi	r24, 0xFE	; 254
     1fc:	9f ef       	ldi	r25, 0xFF	; 255
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <i2c_write_a_byte+0xaa>
	TWCR = (1<<TWINT) | (1<<TWEN);			// send data
	while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

	// check if ACK is received from slave after sending data
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
		return -3;
     200:	8d ef       	ldi	r24, 0xFD	; 253
     202:	9f ef       	ldi	r25, 0xFF	; 255
     204:	02 c0       	rjmp	.+4      	; 0x20a <i2c_write_a_byte+0xaa>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
		while((TWCR & (1<<TWSTO)));					// wait until STOP condition is sent and release bus
	}

	return 0;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	08 95       	ret

00000214 <i2c_write_n_bytes>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_write_n_bytes(uint8_t i2c_addr, uint8_t *buffer, int n, int with_stop)
{
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     226:	e8 2e       	mov	r14, r24
     228:	ee 0c       	add	r14, r14
     22a:	aa e0       	ldi	r26, 0x0A	; 10
     22c:	b0 e0       	ldi	r27, 0x00	; 0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     22e:	e4 e7       	ldi	r30, 0x74	; 116
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	84 ea       	ldi	r24, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     234:	0f 2e       	mov	r0, r31
     236:	f1 e7       	ldi	r31, 0x71	; 113
     238:	af 2e       	mov	r10, r31
     23a:	b1 2c       	mov	r11, r1
     23c:	f0 2d       	mov	r31, r0
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     23e:	03 e7       	ldi	r16, 0x73	; 115
     240:	10 e0       	ldi	r17, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     242:	0f 2e       	mov	r0, r31
     244:	f4 e8       	ldi	r31, 0x84	; 132
     246:	ff 2e       	mov	r15, r31
     248:	f0 2d       	mov	r31, r0
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     24a:	0f 2e       	mov	r0, r31
     24c:	f4 e9       	ldi	r31, 0x94	; 148
     24e:	df 2e       	mov	r13, r31
     250:	f0 2d       	mov	r31, r0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     252:	80 83       	st	Z, r24
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     254:	90 81       	ld	r25, Z
     256:	99 23       	and	r25, r25
     258:	ec f7       	brge	.-6      	; 0x254 <i2c_write_n_bytes+0x40>
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     25a:	e5 01       	movw	r28, r10
     25c:	98 81       	ld	r25, Y
     25e:	98 7f       	andi	r25, 0xF8	; 248
     260:	98 30       	cpi	r25, 0x08	; 8
     262:	09 f0       	breq	.+2      	; 0x266 <i2c_write_n_bytes+0x52>
     264:	40 c0       	rjmp	.+128    	; 0x2e6 <i2c_write_n_bytes+0xd2>
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     266:	e8 01       	movw	r28, r16
     268:	e8 82       	st	Y, r14
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     26a:	f0 82       	st	Z, r15
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
     26c:	90 81       	ld	r25, Z
     26e:	99 23       	and	r25, r25
     270:	ec f7       	brge	.-6      	; 0x26c <i2c_write_n_bytes+0x58>
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
     272:	e5 01       	movw	r28, r10
     274:	98 81       	ld	r25, Y
     276:	98 7f       	andi	r25, 0xF8	; 248
     278:	98 31       	cpi	r25, 0x18	; 24
     27a:	21 f4       	brne	.+8      	; 0x284 <i2c_write_n_bytes+0x70>
		{
			break;
		}
	}

	for(i=0; i<n; i++)
     27c:	14 16       	cp	r1, r20
     27e:	15 06       	cpc	r1, r21
     280:	64 f0       	brlt	.+24     	; 0x29a <i2c_write_n_bytes+0x86>
     282:	24 c0       	rjmp	.+72     	; 0x2cc <i2c_write_n_bytes+0xb8>
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     284:	d0 82       	st	Z, r13
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     286:	90 81       	ld	r25, Z
     288:	94 fd       	sbrc	r25, 4
     28a:	fd cf       	rjmp	.-6      	; 0x286 <i2c_write_n_bytes+0x72>
     28c:	11 97       	sbiw	r26, 0x01	; 1

			time_out--;
			if(time_out <= 0) return -2;
     28e:	71 f1       	breq	.+92     	; 0x2ec <i2c_write_n_bytes+0xd8>
     290:	d5 e3       	ldi	r29, 0x35	; 53
     292:	da 95       	dec	r29
     294:	f1 f7       	brne	.-4      	; 0x292 <i2c_write_n_bytes+0x7e>
     296:	00 00       	nop
     298:	dc cf       	rjmp	.-72     	; 0x252 <i2c_write_n_bytes+0x3e>
     29a:	db 01       	movw	r26, r22
     29c:	46 0f       	add	r20, r22
     29e:	57 1f       	adc	r21, r23
	for(i=0; i<n; i++)
	{
		//--------------------------------------------------------
		// write i-th data to slave
		//--------------------------------------------------------
		TWDR = buffer[i];
     2a0:	63 e7       	ldi	r22, 0x73	; 115
     2a2:	70 e0       	ldi	r23, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     2a4:	e4 e7       	ldi	r30, 0x74	; 116
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	94 e8       	ldi	r25, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     2aa:	01 e7       	ldi	r16, 0x71	; 113
     2ac:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<n; i++)
	{
		//--------------------------------------------------------
		// write i-th data to slave
		//--------------------------------------------------------
		TWDR = buffer[i];
     2ae:	8d 91       	ld	r24, X+
     2b0:	eb 01       	movw	r28, r22
     2b2:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     2b4:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.
     2b6:	80 81       	ld	r24, Z
     2b8:	88 23       	and	r24, r24
     2ba:	ec f7       	brge	.-6      	; 0x2b6 <i2c_write_n_bytes+0xa2>

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     2bc:	e8 01       	movw	r28, r16
     2be:	88 81       	ld	r24, Y
     2c0:	88 7f       	andi	r24, 0xF8	; 248
     2c2:	88 32       	cpi	r24, 0x28	; 40
     2c4:	b1 f4       	brne	.+44     	; 0x2f2 <i2c_write_n_bytes+0xde>
		{
			break;
		}
	}

	for(i=0; i<n; i++)
     2c6:	a4 17       	cp	r26, r20
     2c8:	b5 07       	cpc	r27, r21
     2ca:	89 f7       	brne	.-30     	; 0x2ae <i2c_write_n_bytes+0x9a>
	}
	
	//----------------------------------
	// send STOP condition
	//----------------------------------
	if(with_stop)
     2cc:	23 2b       	or	r18, r19
     2ce:	a1 f0       	breq	.+40     	; 0x2f8 <i2c_write_n_bytes+0xe4>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     2d0:	84 e9       	ldi	r24, 0x94	; 148
     2d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
		while((TWCR & (1<<TWSTO)));				// wait until STOP condition is sent.
     2d6:	e4 e7       	ldi	r30, 0x74	; 116
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	84 fd       	sbrc	r24, 4
     2de:	fd cf       	rjmp	.-6      	; 0x2da <i2c_write_n_bytes+0xc6>
	}

	return 0;
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0b c0       	rjmp	.+22     	; 0x2fc <i2c_write_n_bytes+0xe8>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	9f ef       	ldi	r25, 0xFF	; 255
     2ea:	08 c0       	rjmp	.+16     	; 0x2fc <i2c_write_n_bytes+0xe8>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     2ec:	8e ef       	ldi	r24, 0xFE	; 254
     2ee:	9f ef       	ldi	r25, 0xFF	; 255
     2f0:	05 c0       	rjmp	.+10     	; 0x2fc <i2c_write_n_bytes+0xe8>
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
			return -3;
     2f2:	8d ef       	ldi	r24, 0xFD	; 253
     2f4:	9f ef       	ldi	r25, 0xFF	; 255
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <i2c_write_n_bytes+0xe8>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
		while((TWCR & (1<<TWSTO)));				// wait until STOP condition is sent.
	}

	return 0;
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	bf 90       	pop	r11
     30c:	af 90       	pop	r10
     30e:	08 95       	ret

00000310 <i2c_read_n_bytes>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_read_n_bytes(uint8_t i2c_addr, uint8_t *data, int n)
{
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     31c:	88 0f       	add	r24, r24
     31e:	81 60       	ori	r24, 0x01	; 1
     320:	2a e0       	ldi	r18, 0x0A	; 10
     322:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
     324:	e4 e7       	ldi	r30, 0x74	; 116
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	14 ea       	ldi	r17, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     32a:	a1 e7       	ldi	r26, 0x71	; 113
     32c:	b0 e0       	ldi	r27, 0x00	; 0
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     32e:	c3 e7       	ldi	r28, 0x73	; 115
     330:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
     332:	04 e8       	ldi	r16, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     334:	0f 2e       	mov	r0, r31
     336:	f4 e9       	ldi	r31, 0x94	; 148
     338:	ff 2e       	mov	r15, r31
     33a:	f0 2d       	mov	r31, r0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
     33c:	10 83       	st	Z, r17
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     33e:	90 81       	ld	r25, Z
     340:	99 23       	and	r25, r25
     342:	ec f7       	brge	.-6      	; 0x33e <i2c_read_n_bytes+0x2e>
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     344:	9c 91       	ld	r25, X
     346:	98 7f       	andi	r25, 0xF8	; 248
     348:	98 30       	cpi	r25, 0x08	; 8
     34a:	29 f0       	breq	.+10     	; 0x356 <i2c_read_n_bytes+0x46>
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
     34c:	9c 91       	ld	r25, X
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     34e:	98 7f       	andi	r25, 0xF8	; 248
     350:	90 31       	cpi	r25, 0x10	; 16
     352:	09 f0       	breq	.+2      	; 0x356 <i2c_read_n_bytes+0x46>
     354:	5a c0       	rjmp	.+180    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     356:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
     358:	00 83       	st	Z, r16
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
     35a:	90 81       	ld	r25, Z
     35c:	99 23       	and	r25, r25
     35e:	ec f7       	brge	.-6      	; 0x35a <i2c_read_n_bytes+0x4a>
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
     360:	9c 91       	ld	r25, X
     362:	98 7f       	andi	r25, 0xF8	; 248
     364:	90 34       	cpi	r25, 0x40	; 64
     366:	41 f4       	brne	.+16     	; 0x378 <i2c_read_n_bytes+0x68>
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     368:	41 50       	subi	r20, 0x01	; 1
     36a:	51 09       	sbc	r21, r1
     36c:	14 16       	cp	r1, r20
     36e:	15 06       	cpc	r1, r21
     370:	84 f0       	brlt	.+32     	; 0x392 <i2c_read_n_bytes+0x82>
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	2b c0       	rjmp	.+86     	; 0x3ce <i2c_read_n_bytes+0xbe>
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     378:	f0 82       	st	Z, r15
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     37a:	90 81       	ld	r25, Z
     37c:	94 fd       	sbrc	r25, 4
     37e:	fd cf       	rjmp	.-6      	; 0x37a <i2c_read_n_bytes+0x6a>
     380:	21 50       	subi	r18, 0x01	; 1
     382:	31 09       	sbc	r19, r1

			time_out--;
			if(time_out <= 0) return -2;
     384:	09 f4       	brne	.+2      	; 0x388 <i2c_read_n_bytes+0x78>
     386:	44 c0       	rjmp	.+136    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     388:	95 e3       	ldi	r25, 0x35	; 53
     38a:	9a 95       	dec	r25
     38c:	f1 f7       	brne	.-4      	; 0x38a <i2c_read_n_bytes+0x7a>
     38e:	00 00       	nop
     390:	d5 cf       	rjmp	.-86     	; 0x33c <i2c_read_n_bytes+0x2c>
     392:	db 01       	movw	r26, r22
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
	{
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
     398:	e4 e7       	ldi	r30, 0x74	; 116
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
     39e:	0f 2e       	mov	r0, r31
     3a0:	f1 e7       	ldi	r31, 0x71	; 113
     3a2:	ef 2e       	mov	r14, r31
     3a4:	f1 2c       	mov	r15, r1
     3a6:	f0 2d       	mov	r31, r0
			return -6;
		
		data[i] = TWDR;								// read data.
     3a8:	03 e7       	ldi	r16, 0x73	; 115
     3aa:	10 e0       	ldi	r17, 0x00	; 0
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
	{
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
     3ac:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
     3ae:	80 81       	ld	r24, Z
     3b0:	88 23       	and	r24, r24
     3b2:	ec f7       	brge	.-6      	; 0x3ae <i2c_read_n_bytes+0x9e>
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
     3b4:	e7 01       	movw	r28, r14
     3b6:	88 81       	ld	r24, Y
     3b8:	88 7f       	andi	r24, 0xF8	; 248
     3ba:	80 35       	cpi	r24, 0x50	; 80
     3bc:	61 f5       	brne	.+88     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			return -6;
		
		data[i] = TWDR;								// read data.
     3be:	e8 01       	movw	r28, r16
     3c0:	88 81       	ld	r24, Y
     3c2:	8d 93       	st	X+, r24
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     3c4:	2f 5f       	subi	r18, 0xFF	; 255
     3c6:	3f 4f       	sbci	r19, 0xFF	; 255
     3c8:	24 17       	cp	r18, r20
     3ca:	35 07       	cpc	r19, r21
     3cc:	7c f3       	brlt	.-34     	; 0x3ac <i2c_read_n_bytes+0x9c>
		data[i] = TWDR;								// read data.
	}

	// if read the last byte, send NACK.

	TWCR = (1<<TWINT) | (1<<TWEN);					// after receiving data, do end NACK
     3ce:	84 e8       	ldi	r24, 0x84	; 132
     3d0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));					// wait until receiving data.
     3d4:	e4 e7       	ldi	r30, 0x74	; 116
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	88 23       	and	r24, r24
     3dc:	ec f7       	brge	.-6      	; 0x3d8 <i2c_read_n_bytes+0xc8>
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK)
     3de:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     3e2:	88 7f       	andi	r24, 0xF8	; 248
     3e4:	88 35       	cpi	r24, 0x58	; 88
     3e6:	d1 f4       	brne	.+52     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		return -7;
	
	data[i] = TWDR;									// read the last data
     3e8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     3ec:	fb 01       	movw	r30, r22
     3ee:	e2 0f       	add	r30, r18
     3f0:	f3 1f       	adc	r31, r19
     3f2:	80 83       	st	Z, r24

	//-----------------------------
	// send STOP condition.
	//-----------------------------

	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     3f4:	84 e9       	ldi	r24, 0x94	; 148
     3f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(TWCR & (1<<TWSTO));						// wait until STOP condition is sent
     3fa:	e4 e7       	ldi	r30, 0x74	; 116
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	84 fd       	sbrc	r24, 4
     402:	fd cf       	rjmp	.-6      	; 0x3fe <i2c_read_n_bytes+0xee>
	
	return 0;
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0b c0       	rjmp	.+22     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f ef       	ldi	r25, 0xFF	; 255
     40e:	08 c0       	rjmp	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     410:	8e ef       	ldi	r24, 0xFE	; 254
     412:	9f ef       	ldi	r25, 0xFF	; 255
     414:	05 c0       	rjmp	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
			return -6;
     416:	8a ef       	ldi	r24, 0xFA	; 250
     418:	9f ef       	ldi	r25, 0xFF	; 255
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

	TWCR = (1<<TWINT) | (1<<TWEN);					// after receiving data, do end NACK
	while(!(TWCR & (1<<TWINT)));					// wait until receiving data.
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK)
		return -7;
     41c:	89 ef       	ldi	r24, 0xF9	; 249
     41e:	9f ef       	ldi	r25, 0xFF	; 255

	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
	while(TWCR & (1<<TWSTO));						// wait until STOP condition is sent
	
	return 0;
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	08 95       	ret

0000042e <__vector_16>:
double orient_y[3];
double orient_z_init[3] = {0, 0, 1};
double orient_z[3];

ISR(TIMER0_OVF_vect) 				// 타이머0 오버플로 인터럽트 서비스루틴
{
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	4f 92       	push	r4
     43e:	5f 92       	push	r5
     440:	6f 92       	push	r6
     442:	7f 92       	push	r7
     444:	8f 92       	push	r8
     446:	9f 92       	push	r9
     448:	af 92       	push	r10
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2c 97       	sbiw	r28, 0x0c	; 12
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	cd bf       	out	0x3d, r28	; 61

	TCNT0 = 6;	//131				// 16msec 후에 인터럽트발생
     47e:	86 e0       	ldi	r24, 0x06	; 6
     480:	82 bf       	out	0x32, r24	; 50
	n_enter++;						// 인터럽트 횟수 증가
     482:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <n_enter>
     486:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <n_enter+0x1>
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <n_enter+0x1>
     490:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <n_enter>
	MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
     494:	62 e0       	ldi	r22, 0x02	; 2
     496:	72 e0       	ldi	r23, 0x02	; 2
     498:	8a e4       	ldi	r24, 0x4A	; 74
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	0e 94 48 0c 	call	0x1890	; 0x1890 <MPU9250I2CReadIMU_f>
	gyroxx=-(gyro2_f[0]-avgxx);		//orient change1
     4a0:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <avgxx>
     4a4:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <avgxx+0x1>
     4a8:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <avgxx+0x2>
     4ac:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <avgxx+0x3>
     4b0:	a2 e0       	ldi	r26, 0x02	; 2
     4b2:	b2 e0       	ldi	r27, 0x02	; 2
     4b4:	6d 91       	ld	r22, X+
     4b6:	7d 91       	ld	r23, X+
     4b8:	8d 91       	ld	r24, X+
     4ba:	9c 91       	ld	r25, X
     4bc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     4c0:	4b 01       	movw	r8, r22
     4c2:	5c 01       	movw	r10, r24
     4c4:	b7 fa       	bst	r11, 7
     4c6:	b0 94       	com	r11
     4c8:	b7 f8       	bld	r11, 7
     4ca:	b0 94       	com	r11
     4cc:	80 92 b8 01 	sts	0x01B8, r8	; 0x8001b8 <gyroxx>
     4d0:	90 92 b9 01 	sts	0x01B9, r9	; 0x8001b9 <gyroxx+0x1>
     4d4:	a0 92 ba 01 	sts	0x01BA, r10	; 0x8001ba <gyroxx+0x2>
     4d8:	b0 92 bb 01 	sts	0x01BB, r11	; 0x8001bb <gyroxx+0x3>
	gyroyy=-(gyro2_f[1]-avgyy);
     4dc:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <avgyy>
     4e0:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <avgyy+0x1>
     4e4:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <avgyy+0x2>
     4e8:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <avgyy+0x3>
     4ec:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <gyro2_f+0x4>
     4f0:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <gyro2_f+0x5>
     4f4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <gyro2_f+0x6>
     4f8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <gyro2_f+0x7>
     4fc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     500:	6b 01       	movw	r12, r22
     502:	7c 01       	movw	r14, r24
     504:	f7 fa       	bst	r15, 7
     506:	f0 94       	com	r15
     508:	f7 f8       	bld	r15, 7
     50a:	f0 94       	com	r15
     50c:	c0 92 b4 01 	sts	0x01B4, r12	; 0x8001b4 <gyroyy>
     510:	d0 92 b5 01 	sts	0x01B5, r13	; 0x8001b5 <gyroyy+0x1>
     514:	e0 92 b6 01 	sts	0x01B6, r14	; 0x8001b6 <gyroyy+0x2>
     518:	f0 92 b7 01 	sts	0x01B7, r15	; 0x8001b7 <gyroyy+0x3>
	gyrozz=-(gyro2_f[2]-avgzz);
     51c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <avgzz>
     520:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <avgzz+0x1>
     524:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <avgzz+0x2>
     528:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <avgzz+0x3>
     52c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <gyro2_f+0x8>
     530:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <gyro2_f+0x9>
     534:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <gyro2_f+0xa>
     538:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <gyro2_f+0xb>
     53c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     540:	2b 01       	movw	r4, r22
     542:	3c 01       	movw	r6, r24
     544:	77 fa       	bst	r7, 7
     546:	70 94       	com	r7
     548:	77 f8       	bld	r7, 7
     54a:	70 94       	com	r7
     54c:	40 92 b0 01 	sts	0x01B0, r4	; 0x8001b0 <gyrozz>
     550:	50 92 b1 01 	sts	0x01B1, r5	; 0x8001b1 <gyrozz+0x1>
     554:	60 92 b2 01 	sts	0x01B2, r6	; 0x8001b2 <gyrozz+0x2>
     558:	70 92 b3 01 	sts	0x01B3, r7	; 0x8001b3 <gyrozz+0x3>
	
	//filter
	f_gx_now=gyroxx-alpha*(gyroxx-f_gx_last);
     55c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     560:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     564:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     568:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	9a 83       	std	Y+2, r25	; 0x02
     570:	ab 83       	std	Y+3, r26	; 0x03
     572:	bc 83       	std	Y+4, r27	; 0x04
     574:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <f_gx_last>
     578:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <f_gx_last+0x1>
     57c:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <f_gx_last+0x2>
     580:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <f_gx_last+0x3>
     584:	c5 01       	movw	r24, r10
     586:	b4 01       	movw	r22, r8
     588:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     58c:	29 81       	ldd	r18, Y+1	; 0x01
     58e:	3a 81       	ldd	r19, Y+2	; 0x02
     590:	4b 81       	ldd	r20, Y+3	; 0x03
     592:	5c 81       	ldd	r21, Y+4	; 0x04
     594:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     598:	9b 01       	movw	r18, r22
     59a:	ac 01       	movw	r20, r24
     59c:	c5 01       	movw	r24, r10
     59e:	b4 01       	movw	r22, r8
     5a0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     5a4:	6d 83       	std	Y+5, r22	; 0x05
     5a6:	7e 83       	std	Y+6, r23	; 0x06
     5a8:	8f 83       	std	Y+7, r24	; 0x07
     5aa:	98 87       	std	Y+8, r25	; 0x08
     5ac:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <f_gx_now>
     5b0:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <f_gx_now+0x1>
     5b4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <f_gx_now+0x2>
     5b8:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <f_gx_now+0x3>
	f_gy_now=gyroyy-alpha*(gyroyy-f_gy_last);
     5bc:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <f_gy_last>
     5c0:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <f_gy_last+0x1>
     5c4:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <f_gy_last+0x2>
     5c8:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <f_gy_last+0x3>
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     5d4:	29 81       	ldd	r18, Y+1	; 0x01
     5d6:	3a 81       	ldd	r19, Y+2	; 0x02
     5d8:	4b 81       	ldd	r20, Y+3	; 0x03
     5da:	5c 81       	ldd	r21, Y+4	; 0x04
     5dc:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     5e0:	9b 01       	movw	r18, r22
     5e2:	ac 01       	movw	r20, r24
     5e4:	c7 01       	movw	r24, r14
     5e6:	b6 01       	movw	r22, r12
     5e8:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     5ec:	69 87       	std	Y+9, r22	; 0x09
     5ee:	7a 87       	std	Y+10, r23	; 0x0a
     5f0:	8b 87       	std	Y+11, r24	; 0x0b
     5f2:	9c 87       	std	Y+12, r25	; 0x0c
     5f4:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <f_gy_now>
     5f8:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <f_gy_now+0x1>
     5fc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <f_gy_now+0x2>
     600:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <f_gy_now+0x3>
	f_gz_now=gyrozz-alpha*(gyrozz-f_gz_last);
     604:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <f_gz_last>
     608:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <f_gz_last+0x1>
     60c:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <f_gz_last+0x2>
     610:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <f_gz_last+0x3>
     614:	c3 01       	movw	r24, r6
     616:	b2 01       	movw	r22, r4
     618:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     61c:	29 81       	ldd	r18, Y+1	; 0x01
     61e:	3a 81       	ldd	r19, Y+2	; 0x02
     620:	4b 81       	ldd	r20, Y+3	; 0x03
     622:	5c 81       	ldd	r21, Y+4	; 0x04
     624:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	c3 01       	movw	r24, r6
     62e:	b2 01       	movw	r22, r4
     630:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     634:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <f_gz_now>
     638:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <f_gz_now+0x1>
     63c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <f_gz_now+0x2>
     640:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <f_gz_now+0x3>
	Quaternion_set(0, -f_gx_now, -f_gy_now, -f_gz_now, &omega);
     644:	5b 01       	movw	r10, r22
     646:	6c 01       	movw	r12, r24
     648:	d7 fa       	bst	r13, 7
     64a:	d0 94       	com	r13
     64c:	d7 f8       	bld	r13, 7
     64e:	d0 94       	com	r13
     650:	e9 84       	ldd	r14, Y+9	; 0x09
     652:	fa 84       	ldd	r15, Y+10	; 0x0a
     654:	0b 85       	ldd	r16, Y+11	; 0x0b
     656:	1c 85       	ldd	r17, Y+12	; 0x0c
     658:	17 fb       	bst	r17, 7
     65a:	10 95       	com	r17
     65c:	17 f9       	bld	r17, 7
     65e:	10 95       	com	r17
     660:	2d 81       	ldd	r18, Y+5	; 0x05
     662:	3e 81       	ldd	r19, Y+6	; 0x06
     664:	4f 81       	ldd	r20, Y+7	; 0x07
     666:	58 85       	ldd	r21, Y+8	; 0x08
     668:	50 58       	subi	r21, 0x80	; 128
     66a:	0f 2e       	mov	r0, r31
     66c:	f6 e5       	ldi	r31, 0x56	; 86
     66e:	8f 2e       	mov	r8, r31
     670:	f2 e0       	ldi	r31, 0x02	; 2
     672:	9f 2e       	mov	r9, r31
     674:	f0 2d       	mov	r31, r0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	cb 01       	movw	r24, r22
     67c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Quaternion_set>
	Quaternion_multiply(&orientation, &omega, &delta);
     680:	4a e3       	ldi	r20, 0x3A	; 58
     682:	52 e0       	ldi	r21, 0x02	; 2
     684:	b4 01       	movw	r22, r8
     686:	8a ec       	ldi	r24, 0xCA	; 202
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <Quaternion_multiply>
	Quaternion_ratio(&delta, 0.5 * 16 / 1000, &delta);
     68e:	2a e3       	ldi	r18, 0x3A	; 58
     690:	32 e0       	ldi	r19, 0x02	; 2
     692:	4f e6       	ldi	r20, 0x6F	; 111
     694:	52 e1       	ldi	r21, 0x12	; 18
     696:	63 e0       	ldi	r22, 0x03	; 3
     698:	7c e3       	ldi	r23, 0x3C	; 60
     69a:	c9 01       	movw	r24, r18
     69c:	0e 94 ca 13 	call	0x2794	; 0x2794 <Quaternion_ratio>
	Quaternion_addition(&orientation, &delta, &orientation);
     6a0:	4a ec       	ldi	r20, 0xCA	; 202
     6a2:	51 e0       	ldi	r21, 0x01	; 1
     6a4:	6a e3       	ldi	r22, 0x3A	; 58
     6a6:	72 e0       	ldi	r23, 0x02	; 2
     6a8:	ca 01       	movw	r24, r20
     6aa:	0e 94 5d 13 	call	0x26ba	; 0x26ba <Quaternion_addition>
	Quaternion_normalize(&orientation, &orientation);
     6ae:	6a ec       	ldi	r22, 0xCA	; 202
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	cb 01       	movw	r24, r22
     6b4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Quaternion_normalize>
	Quaternion_toEulerZYX2(&orientation,eulang);
     6b8:	68 e7       	ldi	r22, 0x78	; 120
     6ba:	72 e0       	ldi	r23, 0x02	; 2
     6bc:	8a ec       	ldi	r24, 0xCA	; 202
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Quaternion_toEulerZYX2>
	f_gx_last=f_gx_now;
     6c4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <f_gx_now>
     6c8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <f_gx_now+0x1>
     6cc:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <f_gx_now+0x2>
     6d0:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <f_gx_now+0x3>
     6d4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <f_gx_last>
     6d8:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <f_gx_last+0x1>
     6dc:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <f_gx_last+0x2>
     6e0:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <f_gx_last+0x3>
	f_gy_last=f_gy_now;
     6e4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <f_gy_now>
     6e8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <f_gy_now+0x1>
     6ec:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <f_gy_now+0x2>
     6f0:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <f_gy_now+0x3>
     6f4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <f_gy_last>
     6f8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <f_gy_last+0x1>
     6fc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <f_gy_last+0x2>
     700:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <f_gy_last+0x3>
	f_gz_last=f_gz_now;
     704:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <f_gz_now>
     708:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <f_gz_now+0x1>
     70c:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <f_gz_now+0x2>
     710:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <f_gz_now+0x3>
     714:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <f_gz_last>
     718:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <f_gz_last+0x1>
     71c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <f_gz_last+0x2>
     720:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <f_gz_last+0x3>
	
	//orient notchange	
	accelxx = acc2_f[0]-avgax;
     724:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <avgax>
     728:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <avgax+0x1>
     72c:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <avgax+0x2>
     730:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <avgax+0x3>
     734:	aa e4       	ldi	r26, 0x4A	; 74
     736:	b2 e0       	ldi	r27, 0x02	; 2
     738:	6d 91       	ld	r22, X+
     73a:	7d 91       	ld	r23, X+
     73c:	8d 91       	ld	r24, X+
     73e:	9c 91       	ld	r25, X
     740:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     744:	2b 01       	movw	r4, r22
     746:	3c 01       	movw	r6, r24
     748:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <accelxx>
     74c:	70 93 8d 01 	sts	0x018D, r23	; 0x80018d <accelxx+0x1>
     750:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <accelxx+0x2>
     754:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <accelxx+0x3>
	accelyy = acc2_f[1]-avgay;
     758:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <avgay>
     75c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <avgay+0x1>
     760:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <avgay+0x2>
     764:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <avgay+0x3>
     768:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <acc2_f+0x4>
     76c:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <acc2_f+0x5>
     770:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <acc2_f+0x6>
     774:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <acc2_f+0x7>
     778:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     77c:	4b 01       	movw	r8, r22
     77e:	5c 01       	movw	r10, r24
     780:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <accelyy>
     784:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <accelyy+0x1>
     788:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <accelyy+0x2>
     78c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <accelyy+0x3>
	accelzz = acc2_f[2]-avgaz;	
     790:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <avgaz>
     794:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <avgaz+0x1>
     798:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <avgaz+0x2>
     79c:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <avgaz+0x3>
     7a0:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <acc2_f+0x8>
     7a4:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <acc2_f+0x9>
     7a8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <acc2_f+0xa>
     7ac:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <acc2_f+0xb>
     7b0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     7b4:	6b 01       	movw	r12, r22
     7b6:	7c 01       	movw	r14, r24
     7b8:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <accelzz>
     7bc:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <accelzz+0x1>
     7c0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <accelzz+0x2>
     7c4:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <accelzz+0x3>
	//filter	
	f_ax_now=accelxx-alpha*(accelxx-f_ax_last);
     7c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7d0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     7d4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	ab 83       	std	Y+3, r26	; 0x03
     7de:	bc 83       	std	Y+4, r27	; 0x04
     7e0:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <f_ax_last>
     7e4:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <f_ax_last+0x1>
     7e8:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <f_ax_last+0x2>
     7ec:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <f_ax_last+0x3>
     7f0:	c3 01       	movw	r24, r6
     7f2:	b2 01       	movw	r22, r4
     7f4:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     7f8:	29 81       	ldd	r18, Y+1	; 0x01
     7fa:	3a 81       	ldd	r19, Y+2	; 0x02
     7fc:	4b 81       	ldd	r20, Y+3	; 0x03
     7fe:	5c 81       	ldd	r21, Y+4	; 0x04
     800:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	c3 01       	movw	r24, r6
     80a:	b2 01       	movw	r22, r4
     80c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     810:	2b 01       	movw	r4, r22
     812:	3c 01       	movw	r6, r24
     814:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <f_ax_now>
     818:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <f_ax_now+0x1>
     81c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <f_ax_now+0x2>
     820:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <f_ax_now+0x3>
	f_ay_now=accelyy-alpha*(accelyy-f_ay_last);
     824:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <f_ay_last>
     828:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <f_ay_last+0x1>
     82c:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <f_ay_last+0x2>
     830:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <f_ay_last+0x3>
     834:	c5 01       	movw	r24, r10
     836:	b4 01       	movw	r22, r8
     838:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     83c:	29 81       	ldd	r18, Y+1	; 0x01
     83e:	3a 81       	ldd	r19, Y+2	; 0x02
     840:	4b 81       	ldd	r20, Y+3	; 0x03
     842:	5c 81       	ldd	r21, Y+4	; 0x04
     844:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
     84c:	c5 01       	movw	r24, r10
     84e:	b4 01       	movw	r22, r8
     850:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     854:	4b 01       	movw	r8, r22
     856:	5c 01       	movw	r10, r24
     858:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <f_ay_now>
     85c:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <f_ay_now+0x1>
     860:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <f_ay_now+0x2>
     864:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <f_ay_now+0x3>
	f_az_now=accelzz-alpha*(accelzz-f_az_last);
     868:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <f_az_last>
     86c:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <f_az_last+0x1>
     870:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <f_az_last+0x2>
     874:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <f_az_last+0x3>
     878:	c7 01       	movw	r24, r14
     87a:	b6 01       	movw	r22, r12
     87c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     880:	29 81       	ldd	r18, Y+1	; 0x01
     882:	3a 81       	ldd	r19, Y+2	; 0x02
     884:	4b 81       	ldd	r20, Y+3	; 0x03
     886:	5c 81       	ldd	r21, Y+4	; 0x04
     888:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	c7 01       	movw	r24, r14
     892:	b6 01       	movw	r22, r12
     894:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     898:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
     89c:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
     8a0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
     8a4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	f_ax_last=f_ax_now;
     8a8:	40 92 44 01 	sts	0x0144, r4	; 0x800144 <f_ax_last>
     8ac:	50 92 45 01 	sts	0x0145, r5	; 0x800145 <f_ax_last+0x1>
     8b0:	60 92 46 01 	sts	0x0146, r6	; 0x800146 <f_ax_last+0x2>
     8b4:	70 92 47 01 	sts	0x0147, r7	; 0x800147 <f_ax_last+0x3>
	f_ay_last=f_ay_now;
     8b8:	80 92 40 01 	sts	0x0140, r8	; 0x800140 <f_ay_last>
     8bc:	90 92 41 01 	sts	0x0141, r9	; 0x800141 <f_ay_last+0x1>
     8c0:	a0 92 42 01 	sts	0x0142, r10	; 0x800142 <f_ay_last+0x2>
     8c4:	b0 92 43 01 	sts	0x0143, r11	; 0x800143 <f_ay_last+0x3>
	f_az_last=f_az_now;
     8c8:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <f_az_last>
     8cc:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <f_az_last+0x1>
     8d0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <f_az_last+0x2>
     8d4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <f_az_last+0x3>
	
	AK8963I2CReadMAGNETO_2(mag);
     8d8:	82 e7       	ldi	r24, 0x72	; 114
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	0e 94 56 0d 	call	0x1aac	; 0x1aac <AK8963I2CReadMAGNETO_2>
	magyy = mag[0]-avgmx;			//orient change2
     8e0:	a2 e7       	ldi	r26, 0x72	; 114
     8e2:	b2 e0       	ldi	r27, 0x02	; 2
     8e4:	6d 91       	ld	r22, X+
     8e6:	7c 91       	ld	r23, X
     8e8:	07 2e       	mov	r0, r23
     8ea:	00 0c       	add	r0, r0
     8ec:	88 0b       	sbc	r24, r24
     8ee:	99 0b       	sbc	r25, r25
     8f0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
     8f4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <avgmx>
     8f8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <avgmx+0x1>
     8fc:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <avgmx+0x2>
     900:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <avgmx+0x3>
     904:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <magyy>
     910:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <magyy+0x1>
     914:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <magyy+0x2>
     918:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <magyy+0x3>
	magxx = mag[1]-avgmy;			//orient change2
     91c:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <mag+0x2>
     920:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <mag+0x3>
     924:	07 2e       	mov	r0, r23
     926:	00 0c       	add	r0, r0
     928:	88 0b       	sbc	r24, r24
     92a:	99 0b       	sbc	r25, r25
     92c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
     930:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <avgmy>
     934:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <avgmy+0x1>
     938:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <avgmy+0x2>
     93c:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <avgmy+0x3>
     940:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     944:	4b 01       	movw	r8, r22
     946:	5c 01       	movw	r10, r24
     948:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <magxx>
     94c:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <magxx+0x1>
     950:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <magxx+0x2>
     954:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <magxx+0x3>
	magzz =-(mag[2]-avgmz);
     958:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <mag+0x4>
     95c:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <mag+0x5>
     960:	07 2e       	mov	r0, r23
     962:	00 0c       	add	r0, r0
     964:	88 0b       	sbc	r24, r24
     966:	99 0b       	sbc	r25, r25
     968:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
     96c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <avgmz>
     970:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <avgmz+0x1>
     974:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <avgmz+0x2>
     978:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <avgmz+0x3>
     97c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	b0 58       	subi	r27, 0x80	; 128
     986:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <magzz>
     98a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <magzz+0x1>
     98e:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <magzz+0x2>
     992:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <magzz+0x3>
	orient_temp[0]=magxx;
     996:	ea ed       	ldi	r30, 0xDA	; 218
     998:	f1 e0       	ldi	r31, 0x01	; 1
     99a:	80 82       	st	Z, r8
     99c:	91 82       	std	Z+1, r9	; 0x01
     99e:	a2 82       	std	Z+2, r10	; 0x02
     9a0:	b3 82       	std	Z+3, r11	; 0x03
	orient_temp[1]=magyy;
     9a2:	c4 82       	std	Z+4, r12	; 0x04
     9a4:	d5 82       	std	Z+5, r13	; 0x05
     9a6:	e6 82       	std	Z+6, r14	; 0x06
     9a8:	f7 82       	std	Z+7, r15	; 0x07
	orient_temp[2]=magzz;
     9aa:	80 87       	std	Z+8, r24	; 0x08
     9ac:	91 87       	std	Z+9, r25	; 0x09
     9ae:	a2 87       	std	Z+10, r26	; 0x0a
     9b0:	b3 87       	std	Z+11, r27	; 0x0b
	yaw=atan2(-f_ax_now,+f_ay_now)*57.296 + eulang[2]*57.295;
     9b2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <f_ay_now>
     9b6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <f_ay_now+0x1>
     9ba:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <f_ay_now+0x2>
     9be:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <f_ay_now+0x3>
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	9a 83       	std	Y+2, r25	; 0x02
     9c6:	ab 83       	std	Y+3, r26	; 0x03
     9c8:	bc 83       	std	Y+4, r27	; 0x04
     9ca:	40 90 38 01 	lds	r4, 0x0138	; 0x800138 <f_ax_now>
     9ce:	50 90 39 01 	lds	r5, 0x0139	; 0x800139 <f_ax_now+0x1>
     9d2:	60 90 3a 01 	lds	r6, 0x013A	; 0x80013a <f_ax_now+0x2>
     9d6:	70 90 3b 01 	lds	r7, 0x013B	; 0x80013b <f_ax_now+0x3>
     9da:	c3 01       	movw	r24, r6
     9dc:	b2 01       	movw	r22, r4
     9de:	90 58       	subi	r25, 0x80	; 128
     9e0:	29 81       	ldd	r18, Y+1	; 0x01
     9e2:	3a 81       	ldd	r19, Y+2	; 0x02
     9e4:	4b 81       	ldd	r20, Y+3	; 0x03
     9e6:	5c 81       	ldd	r21, Y+4	; 0x04
     9e8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <atan2>
     9ec:	6d 83       	std	Y+5, r22	; 0x05
     9ee:	7e 83       	std	Y+6, r23	; 0x06
     9f0:	8f 83       	std	Y+7, r24	; 0x07
     9f2:	98 87       	std	Y+8, r25	; 0x08
     9f4:	24 e1       	ldi	r18, 0x14	; 20
     9f6:	3e e2       	ldi	r19, 0x2E	; 46
     9f8:	45 e6       	ldi	r20, 0x65	; 101
     9fa:	52 e4       	ldi	r21, 0x42	; 66
     9fc:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <eulang+0x8>
     a00:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <eulang+0x9>
     a04:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <eulang+0xa>
     a08:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <eulang+0xb>
     a0c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     a10:	69 87       	std	Y+9, r22	; 0x09
     a12:	7a 87       	std	Y+10, r23	; 0x0a
     a14:	8b 87       	std	Y+11, r24	; 0x0b
     a16:	9c 87       	std	Y+12, r25	; 0x0c
     a18:	2b e1       	ldi	r18, 0x1B	; 27
     a1a:	3f e2       	ldi	r19, 0x2F	; 47
     a1c:	45 e6       	ldi	r20, 0x65	; 101
     a1e:	52 e4       	ldi	r21, 0x42	; 66
     a20:	6d 81       	ldd	r22, Y+5	; 0x05
     a22:	7e 81       	ldd	r23, Y+6	; 0x06
     a24:	8f 81       	ldd	r24, Y+7	; 0x07
     a26:	98 85       	ldd	r25, Y+8	; 0x08
     a28:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	69 85       	ldd	r22, Y+9	; 0x09
     a32:	7a 85       	ldd	r23, Y+10	; 0x0a
     a34:	8b 85       	ldd	r24, Y+11	; 0x0b
     a36:	9c 85       	ldd	r25, Y+12	; 0x0c
     a38:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
     a3c:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <yaw>
     a40:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <yaw+0x1>
     a44:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <yaw+0x2>
     a48:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <yaw+0x3>
	pitch=asin(sqrt((f_ax_now*f_ax_now+f_ay_now*f_ay_now))/10)*57.295;
     a4c:	a3 01       	movw	r20, r6
     a4e:	92 01       	movw	r18, r4
     a50:	c3 01       	movw	r24, r6
     a52:	b2 01       	movw	r22, r4
     a54:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     a58:	69 87       	std	Y+9, r22	; 0x09
     a5a:	7a 87       	std	Y+10, r23	; 0x0a
     a5c:	8b 87       	std	Y+11, r24	; 0x0b
     a5e:	9c 87       	std	Y+12, r25	; 0x0c
     a60:	a3 01       	movw	r20, r6
     a62:	92 01       	movw	r18, r4
     a64:	c3 01       	movw	r24, r6
     a66:	b2 01       	movw	r22, r4
     a68:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     a6c:	2b 01       	movw	r4, r22
     a6e:	3c 01       	movw	r6, r24
     a70:	29 81       	ldd	r18, Y+1	; 0x01
     a72:	3a 81       	ldd	r19, Y+2	; 0x02
     a74:	4b 81       	ldd	r20, Y+3	; 0x03
     a76:	5c 81       	ldd	r21, Y+4	; 0x04
     a78:	ca 01       	movw	r24, r20
     a7a:	b9 01       	movw	r22, r18
     a7c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     a80:	9b 01       	movw	r18, r22
     a82:	ac 01       	movw	r20, r24
     a84:	c3 01       	movw	r24, r6
     a86:	b2 01       	movw	r22, r4
     a88:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
     a8c:	0e 94 02 18 	call	0x3004	; 0x3004 <sqrt>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
     a9c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <asin>
     aa0:	24 e1       	ldi	r18, 0x14	; 20
     aa2:	3e e2       	ldi	r19, 0x2E	; 46
     aa4:	45 e6       	ldi	r20, 0x65	; 101
     aa6:	52 e4       	ldi	r21, 0x42	; 66
     aa8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     aac:	2b 01       	movw	r4, r22
     aae:	3c 01       	movw	r6, r24
     ab0:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <pitch>
     ab4:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <pitch+0x1>
     ab8:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <pitch+0x2>
     abc:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <pitch+0x3>
	roll= roll0 - (atan2(magyy,magxx)* 57.295);
     ac0:	a5 01       	movw	r20, r10
     ac2:	94 01       	movw	r18, r8
     ac4:	c7 01       	movw	r24, r14
     ac6:	b6 01       	movw	r22, r12
     ac8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <atan2>
     acc:	24 e1       	ldi	r18, 0x14	; 20
     ace:	3e e2       	ldi	r19, 0x2E	; 46
     ad0:	45 e6       	ldi	r20, 0x65	; 101
     ad2:	52 e4       	ldi	r21, 0x42	; 66
     ad4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <roll0>
     ae0:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <roll0+0x1>
     ae4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <roll0+0x2>
     ae8:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <roll0+0x3>
     aec:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     af0:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <roll>
     af4:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <roll+0x1>
     af8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <roll+0x2>
     afc:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <roll+0x3>
	
	Quaternion_set(cos(pitch/2.0/57.295),sin(pitch/2.0/57.295)*cos(atan2(-f_ax_now,+f_ay_now)) , sin(pitch/2.0/57.295)*sin(atan2(-f_ax_now,+f_ay_now)), 0, &q1);
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	5f e3       	ldi	r21, 0x3F	; 63
     b08:	c3 01       	movw	r24, r6
     b0a:	b2 01       	movw	r22, r4
     b0c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     b10:	24 e1       	ldi	r18, 0x14	; 20
     b12:	3e e2       	ldi	r19, 0x2E	; 46
     b14:	45 e6       	ldi	r20, 0x65	; 101
     b16:	52 e4       	ldi	r21, 0x42	; 66
     b18:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
     b1c:	2b 01       	movw	r4, r22
     b1e:	3c 01       	movw	r6, r24
     b20:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <sin>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
     b28:	6d 81       	ldd	r22, Y+5	; 0x05
     b2a:	7e 81       	ldd	r23, Y+6	; 0x06
     b2c:	8f 81       	ldd	r24, Y+7	; 0x07
     b2e:	98 85       	ldd	r25, Y+8	; 0x08
     b30:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <sin>
     b34:	4b 01       	movw	r8, r22
     b36:	5c 01       	movw	r10, r24
     b38:	6d 81       	ldd	r22, Y+5	; 0x05
     b3a:	7e 81       	ldd	r23, Y+6	; 0x06
     b3c:	8f 81       	ldd	r24, Y+7	; 0x07
     b3e:	98 85       	ldd	r25, Y+8	; 0x08
     b40:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <cos>
     b44:	69 83       	std	Y+1, r22	; 0x01
     b46:	7a 83       	std	Y+2, r23	; 0x02
     b48:	8b 83       	std	Y+3, r24	; 0x03
     b4a:	9c 83       	std	Y+4, r25	; 0x04
     b4c:	c3 01       	movw	r24, r6
     b4e:	b2 01       	movw	r22, r4
     b50:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <cos>
     b54:	2b 01       	movw	r4, r22
     b56:	3c 01       	movw	r6, r24
     b58:	a5 01       	movw	r20, r10
     b5a:	94 01       	movw	r18, r8
     b5c:	c7 01       	movw	r24, r14
     b5e:	b6 01       	movw	r22, r12
     b60:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     b64:	6d 83       	std	Y+5, r22	; 0x05
     b66:	7e 83       	std	Y+6, r23	; 0x06
     b68:	8f 83       	std	Y+7, r24	; 0x07
     b6a:	98 87       	std	Y+8, r25	; 0x08
     b6c:	29 81       	ldd	r18, Y+1	; 0x01
     b6e:	3a 81       	ldd	r19, Y+2	; 0x02
     b70:	4b 81       	ldd	r20, Y+3	; 0x03
     b72:	5c 81       	ldd	r21, Y+4	; 0x04
     b74:	c7 01       	movw	r24, r14
     b76:	b6 01       	movw	r22, r12
     b78:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     b7c:	9b 01       	movw	r18, r22
     b7e:	ac 01       	movw	r20, r24
     b80:	0f 2e       	mov	r0, r31
     b82:	fe e1       	ldi	r31, 0x1E	; 30
     b84:	8f 2e       	mov	r8, r31
     b86:	f2 e0       	ldi	r31, 0x02	; 2
     b88:	9f 2e       	mov	r9, r31
     b8a:	f0 2d       	mov	r31, r0
     b8c:	a1 2c       	mov	r10, r1
     b8e:	b1 2c       	mov	r11, r1
     b90:	65 01       	movw	r12, r10
     b92:	ed 80       	ldd	r14, Y+5	; 0x05
     b94:	fe 80       	ldd	r15, Y+6	; 0x06
     b96:	0f 81       	ldd	r16, Y+7	; 0x07
     b98:	18 85       	ldd	r17, Y+8	; 0x08
     b9a:	c3 01       	movw	r24, r6
     b9c:	b2 01       	movw	r22, r4
     b9e:	bc d7       	rcall	.+3960   	; 0x1b18 <Quaternion_set>
	Quaternion_rotate(&q1, orient_temp, orient_temp2);
     ba0:	4e eb       	ldi	r20, 0xBE	; 190
     ba2:	51 e0       	ldi	r21, 0x01	; 1
     ba4:	6a ed       	ldi	r22, 0xDA	; 218
     ba6:	71 e0       	ldi	r23, 0x01	; 1
     ba8:	c4 01       	movw	r24, r8
     baa:	0e 94 01 11 	call	0x2202	; 0x2202 <Quaternion_rotate>
	roll1=roll0/57.295 - atan2(orient_temp2[1],orient_temp2[0]);
     bae:	ee eb       	ldi	r30, 0xBE	; 190
     bb0:	f1 e0       	ldi	r31, 0x01	; 1
     bb2:	20 81       	ld	r18, Z
     bb4:	31 81       	ldd	r19, Z+1	; 0x01
     bb6:	42 81       	ldd	r20, Z+2	; 0x02
     bb8:	53 81       	ldd	r21, Z+3	; 0x03
     bba:	64 81       	ldd	r22, Z+4	; 0x04
     bbc:	75 81       	ldd	r23, Z+5	; 0x05
     bbe:	86 81       	ldd	r24, Z+6	; 0x06
     bc0:	97 81       	ldd	r25, Z+7	; 0x07
     bc2:	0e 94 5f 15 	call	0x2abe	; 0x2abe <atan2>
     bc6:	6b 01       	movw	r12, r22
     bc8:	7c 01       	movw	r14, r24
     bca:	24 e1       	ldi	r18, 0x14	; 20
     bcc:	3e e2       	ldi	r19, 0x2E	; 46
     bce:	45 e6       	ldi	r20, 0x65	; 101
     bd0:	52 e4       	ldi	r21, 0x42	; 66
     bd2:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <roll0>
     bd6:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <roll0+0x1>
     bda:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <roll0+0x2>
     bde:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <roll0+0x3>
     be2:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
     be6:	a7 01       	movw	r20, r14
     be8:	96 01       	movw	r18, r12
     bea:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
     bee:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <roll1>
     bf2:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <roll1+0x1>
     bf6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <roll1+0x2>
     bfa:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <roll1+0x3>
	Quaternion_set(cos(roll1/2.0), 0, 0, sin(roll1/2.0), &q2);
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     c0a:	2b 01       	movw	r4, r22
     c0c:	3c 01       	movw	r6, r24
     c0e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <sin>
     c12:	5b 01       	movw	r10, r22
     c14:	6c 01       	movw	r12, r24
     c16:	c3 01       	movw	r24, r6
     c18:	b2 01       	movw	r22, r4
     c1a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <cos>
     c1e:	0f 2e       	mov	r0, r31
     c20:	f6 ee       	ldi	r31, 0xE6	; 230
     c22:	8f 2e       	mov	r8, r31
     c24:	f1 e0       	ldi	r31, 0x01	; 1
     c26:	9f 2e       	mov	r9, r31
     c28:	f0 2d       	mov	r31, r0
     c2a:	e1 2c       	mov	r14, r1
     c2c:	f1 2c       	mov	r15, r1
     c2e:	87 01       	movw	r16, r14
     c30:	a8 01       	movw	r20, r16
     c32:	97 01       	movw	r18, r14
     c34:	71 d7       	rcall	.+3810   	; 0x1b18 <Quaternion_set>
	Quaternion_multiply(&q2, &q1, &orientation2);
     c36:	4e e0       	ldi	r20, 0x0E	; 14
     c38:	52 e0       	ldi	r21, 0x02	; 2
     c3a:	6e e1       	ldi	r22, 0x1E	; 30
     c3c:	72 e0       	ldi	r23, 0x02	; 2
     c3e:	c4 01       	movw	r24, r8
     c40:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <Quaternion_multiply>
	
	if(n_enter>=25){
     c44:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <n_enter>
     c48:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <n_enter+0x1>
     c4c:	49 97       	sbiw	r24, 0x19	; 25
     c4e:	0c f4       	brge	.+2      	; 0xc52 <__vector_16+0x824>
     c50:	62 c2       	rjmp	.+1220   	; 0x1116 <__stack+0x17>
		UART1_print16b((uint16_t) (orientation.v[0] * 1000));
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4a e7       	ldi	r20, 0x7A	; 122
     c58:	54 e4       	ldi	r21, 0x44	; 68
     c5a:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <orientation+0x4>
     c5e:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <orientation+0x5>
     c62:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <orientation+0x6>
     c66:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <orientation+0x7>
     c6a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     c6e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     c72:	cb 01       	movw	r24, r22
     c74:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     c78:	89 e0       	ldi	r24, 0x09	; 9
     c7a:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orientation.v[1]  * 1000));
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4a e7       	ldi	r20, 0x7A	; 122
     c84:	54 e4       	ldi	r21, 0x44	; 68
     c86:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <orientation+0x8>
     c8a:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <orientation+0x9>
     c8e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <orientation+0xa>
     c92:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <orientation+0xb>
     c96:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     c9a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     c9e:	cb 01       	movw	r24, r22
     ca0:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     ca4:	89 e0       	ldi	r24, 0x09	; 9
     ca6:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orientation.v[2] * 1000));
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a e7       	ldi	r20, 0x7A	; 122
     cb0:	54 e4       	ldi	r21, 0x44	; 68
     cb2:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <orientation+0xc>
     cb6:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <orientation+0xd>
     cba:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <orientation+0xe>
     cbe:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <orientation+0xf>
     cc2:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     cc6:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     cca:	cb 01       	movw	r24, r22
     ccc:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');		
     cd0:	89 e0       	ldi	r24, 0x09	; 9
     cd2:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>

		UART1_transmit('\t');
     cd6:	89 e0       	ldi	r24, 0x09	; 9
     cd8:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_transmit('\t');
     cdc:	89 e0       	ldi	r24, 0x09	; 9
     cde:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (pitch));		
     ce2:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <pitch>
     ce6:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <pitch+0x1>
     cea:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <pitch+0x2>
     cee:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <pitch+0x3>
     cf2:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     cf6:	cb 01       	movw	r24, r22
     cf8:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     cfc:	89 e0       	ldi	r24, 0x09	; 9
     cfe:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (q1.w * 1000));		
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a e7       	ldi	r20, 0x7A	; 122
     d08:	54 e4       	ldi	r21, 0x44	; 68
     d0a:	ae e1       	ldi	r26, 0x1E	; 30
     d0c:	b2 e0       	ldi	r27, 0x02	; 2
     d0e:	6d 91       	ld	r22, X+
     d10:	7d 91       	ld	r23, X+
     d12:	8d 91       	ld	r24, X+
     d14:	9c 91       	ld	r25, X
     d16:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     d1a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     d1e:	cb 01       	movw	r24, r22
     d20:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     d24:	89 e0       	ldi	r24, 0x09	; 9
     d26:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (q1.v[0] * 1000));
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a e7       	ldi	r20, 0x7A	; 122
     d30:	54 e4       	ldi	r21, 0x44	; 68
     d32:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <q1+0x4>
     d36:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <q1+0x5>
     d3a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <q1+0x6>
     d3e:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <q1+0x7>
     d42:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     d46:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     d4a:	cb 01       	movw	r24, r22
     d4c:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     d50:	89 e0       	ldi	r24, 0x09	; 9
     d52:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (q1.v[1]  * 1000));
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	4a e7       	ldi	r20, 0x7A	; 122
     d5c:	54 e4       	ldi	r21, 0x44	; 68
     d5e:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <q1+0x8>
     d62:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <q1+0x9>
     d66:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <q1+0xa>
     d6a:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <q1+0xb>
     d6e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     d72:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     d76:	cb 01       	movw	r24, r22
     d78:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     d7c:	89 e0       	ldi	r24, 0x09	; 9
     d7e:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (q1.v[2] * 1000));
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	4a e7       	ldi	r20, 0x7A	; 122
     d88:	54 e4       	ldi	r21, 0x44	; 68
     d8a:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <q1+0xc>
     d8e:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <q1+0xd>
     d92:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <q1+0xe>
     d96:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <q1+0xf>
     d9a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     d9e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     da2:	cb 01       	movw	r24, r22
     da4:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     da8:	89 e0       	ldi	r24, 0x09	; 9
     daa:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_transmit('\t');		
     dae:	89 e0       	ldi	r24, 0x09	; 9
     db0:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orient_temp[0]));
     db4:	ea ed       	ldi	r30, 0xDA	; 218
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     dc4:	cb 01       	movw	r24, r22
     dc6:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     dca:	89 e0       	ldi	r24, 0x09	; 9
     dcc:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orient_temp[1]));
     dd0:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <orient_temp+0x4>
     dd4:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <orient_temp+0x5>
     dd8:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <orient_temp+0x6>
     ddc:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <orient_temp+0x7>
     de0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     de4:	cb 01       	movw	r24, r22
     de6:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     dea:	89 e0       	ldi	r24, 0x09	; 9
     dec:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orient_temp[2]));
     df0:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <orient_temp+0x8>
     df4:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <orient_temp+0x9>
     df8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <orient_temp+0xa>
     dfc:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <orient_temp+0xb>
     e00:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     e04:	cb 01       	movw	r24, r22
     e06:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');		
     e0a:	89 e0       	ldi	r24, 0x09	; 9
     e0c:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orient_temp2[0]));
     e10:	ae eb       	ldi	r26, 0xBE	; 190
     e12:	b1 e0       	ldi	r27, 0x01	; 1
     e14:	6d 91       	ld	r22, X+
     e16:	7d 91       	ld	r23, X+
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     e20:	cb 01       	movw	r24, r22
     e22:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     e26:	89 e0       	ldi	r24, 0x09	; 9
     e28:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orient_temp2[1]));
     e2c:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <orient_temp2+0x4>
     e30:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <orient_temp2+0x5>
     e34:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <orient_temp2+0x6>
     e38:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <orient_temp2+0x7>
     e3c:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     e40:	cb 01       	movw	r24, r22
     e42:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     e46:	89 e0       	ldi	r24, 0x09	; 9
     e48:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orient_temp2[2]));
     e4c:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <orient_temp2+0x8>
     e50:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <orient_temp2+0x9>
     e54:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <orient_temp2+0xa>
     e58:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <orient_temp2+0xb>
     e5c:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     e60:	cb 01       	movw	r24, r22
     e62:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     e66:	89 e0       	ldi	r24, 0x09	; 9
     e68:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_transmit('\t');
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (roll1*57.29));
     e72:	26 ef       	ldi	r18, 0xF6	; 246
     e74:	38 e2       	ldi	r19, 0x28	; 40
     e76:	45 e6       	ldi	r20, 0x65	; 101
     e78:	52 e4       	ldi	r21, 0x42	; 66
     e7a:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <roll1>
     e7e:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <roll1+0x1>
     e82:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <roll1+0x2>
     e86:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <roll1+0x3>
     e8a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     e8e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     e92:	cb 01       	movw	r24, r22
     e94:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     e98:	89 e0       	ldi	r24, 0x09	; 9
     e9a:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (q2.w * 1000));
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4a e7       	ldi	r20, 0x7A	; 122
     ea4:	54 e4       	ldi	r21, 0x44	; 68
     ea6:	f4 01       	movw	r30, r8
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	93 81       	ldd	r25, Z+3	; 0x03
     eb0:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     eb4:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     eb8:	cb 01       	movw	r24, r22
     eba:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     ebe:	89 e0       	ldi	r24, 0x09	; 9
     ec0:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (q2.v[0] * 1000));
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a e7       	ldi	r20, 0x7A	; 122
     eca:	54 e4       	ldi	r21, 0x44	; 68
     ecc:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <q2+0x4>
     ed0:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <q2+0x5>
     ed4:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <q2+0x6>
     ed8:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <q2+0x7>
     edc:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     ee0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     ee4:	cb 01       	movw	r24, r22
     ee6:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     eea:	89 e0       	ldi	r24, 0x09	; 9
     eec:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (q2.v[1]  * 1000));
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	54 e4       	ldi	r21, 0x44	; 68
     ef8:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <q2+0x8>
     efc:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <q2+0x9>
     f00:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <q2+0xa>
     f04:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <q2+0xb>
     f08:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     f0c:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     f10:	cb 01       	movw	r24, r22
     f12:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     f16:	89 e0       	ldi	r24, 0x09	; 9
     f18:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (q2.v[2] * 1000));
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a e7       	ldi	r20, 0x7A	; 122
     f22:	54 e4       	ldi	r21, 0x44	; 68
     f24:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <q2+0xc>
     f28:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <q2+0xd>
     f2c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <q2+0xe>
     f30:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <q2+0xf>
     f34:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     f38:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     f3c:	cb 01       	movw	r24, r22
     f3e:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     f42:	89 e0       	ldi	r24, 0x09	; 9
     f44:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>

				
		UART1_transmit('\t');
     f48:	89 e0       	ldi	r24, 0x09	; 9
     f4a:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orientation2.v[0] * 1000));
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a e7       	ldi	r20, 0x7A	; 122
     f54:	54 e4       	ldi	r21, 0x44	; 68
     f56:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <orientation2+0x4>
     f5a:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <orientation2+0x5>
     f5e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <orientation2+0x6>
     f62:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <orientation2+0x7>
     f66:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     f6a:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     f6e:	cb 01       	movw	r24, r22
     f70:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     f74:	89 e0       	ldi	r24, 0x09	; 9
     f76:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orientation2.v[1]  * 1000));
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	4a e7       	ldi	r20, 0x7A	; 122
     f80:	54 e4       	ldi	r21, 0x44	; 68
     f82:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <orientation2+0x8>
     f86:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <orientation2+0x9>
     f8a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <orientation2+0xa>
     f8e:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <orientation2+0xb>
     f92:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     f96:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     f9a:	cb 01       	movw	r24, r22
     f9c:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     fa0:	89 e0       	ldi	r24, 0x09	; 9
     fa2:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (orientation2.v[2] * 1000));
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	4a e7       	ldi	r20, 0x7A	; 122
     fac:	54 e4       	ldi	r21, 0x44	; 68
     fae:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <orientation2+0xc>
     fb2:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <orientation2+0xd>
     fb6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <orientation2+0xe>
     fba:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <orientation2+0xf>
     fbe:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
     fc2:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
     fc6:	cb 01       	movw	r24, r22
     fc8:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
     fcc:	89 e0       	ldi	r24, 0x09	; 9
     fce:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		Quaternion_toEulerZYX2(&orientation2,eulang);
     fd2:	68 e7       	ldi	r22, 0x78	; 120
     fd4:	72 e0       	ldi	r23, 0x02	; 2
     fd6:	8e e0       	ldi	r24, 0x0E	; 14
     fd8:	92 e0       	ldi	r25, 0x02	; 2
     fda:	e8 d5       	rcall	.+3024   	; 0x1bac <Quaternion_toEulerZYX2>
		if(eulang[1]<0.1) UART1_print16b(0);
     fdc:	2d ec       	ldi	r18, 0xCD	; 205
     fde:	3c ec       	ldi	r19, 0xCC	; 204
     fe0:	4c ec       	ldi	r20, 0xCC	; 204
     fe2:	5d e3       	ldi	r21, 0x3D	; 61
     fe4:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <eulang+0x4>
     fe8:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <eulang+0x5>
     fec:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <eulang+0x6>
     ff0:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <eulang+0x7>
     ff4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__cmpsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
    1004:	19 c0       	rjmp	.+50     	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
		else UART1_print16b((uint16_t) (eulang[0] * 180/3.141592));
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	44 e3       	ldi	r20, 0x34	; 52
    100c:	53 e4       	ldi	r21, 0x43	; 67
    100e:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <eulang>
    1012:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <eulang+0x1>
    1016:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <eulang+0x2>
    101a:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <eulang+0x3>
    101e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1022:	28 ed       	ldi	r18, 0xD8	; 216
    1024:	3f e0       	ldi	r19, 0x0F	; 15
    1026:	49 e4       	ldi	r20, 0x49	; 73
    1028:	50 e4       	ldi	r21, 0x40	; 64
    102a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    102e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
    1032:	cb 01       	movw	r24, r22
    1034:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
    1038:	89 e0       	ldi	r24, 0x09	; 9
    103a:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (eulang[1] * 180/3.141592));
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	44 e3       	ldi	r20, 0x34	; 52
    1044:	53 e4       	ldi	r21, 0x43	; 67
    1046:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <eulang+0x4>
    104a:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <eulang+0x5>
    104e:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <eulang+0x6>
    1052:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <eulang+0x7>
    1056:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    105a:	28 ed       	ldi	r18, 0xD8	; 216
    105c:	3f e0       	ldi	r19, 0x0F	; 15
    105e:	49 e4       	ldi	r20, 0x49	; 73
    1060:	50 e4       	ldi	r21, 0x40	; 64
    1062:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    1066:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
    106a:	cb 01       	movw	r24, r22
    106c:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
    1070:	89 e0       	ldi	r24, 0x09	; 9
    1072:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (eulang[2] * 180/3.141592));
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	44 e3       	ldi	r20, 0x34	; 52
    107c:	53 e4       	ldi	r21, 0x43	; 67
    107e:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <eulang+0x8>
    1082:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <eulang+0x9>
    1086:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <eulang+0xa>
    108a:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <eulang+0xb>
    108e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1092:	28 ed       	ldi	r18, 0xD8	; 216
    1094:	3f e0       	ldi	r19, 0x0F	; 15
    1096:	49 e4       	ldi	r20, 0x49	; 73
    1098:	50 e4       	ldi	r21, 0x40	; 64
    109a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    109e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
    10a2:	cb 01       	movw	r24, r22
    10a4:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');		
    10a8:	89 e0       	ldi	r24, 0x09	; 9
    10aa:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (yaw));
    10ae:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <yaw>
    10b2:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <yaw+0x1>
    10b6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <yaw+0x2>
    10ba:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <yaw+0x3>
    10be:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
    10c2:	cb 01       	movw	r24, r22
    10c4:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
    10c8:	89 e0       	ldi	r24, 0x09	; 9
    10ca:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (pitch));	
    10ce:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <pitch>
    10d2:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <pitch+0x1>
    10d6:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <pitch+0x2>
    10da:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <pitch+0x3>
    10de:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
    10e2:	cb 01       	movw	r24, r22
    10e4:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\t');
    10e8:	89 e0       	ldi	r24, 0x09	; 9
    10ea:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		UART1_print16b((uint16_t) (roll));					
    10ee:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <roll>
    10f2:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <roll+0x1>
    10f6:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <roll+0x2>
    10fa:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <roll+0x3>
    10fe:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixunssfsi>
    1102:	cb 01       	movw	r24, r22
    1104:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
		UART1_transmit('\n');
    1108:	8a e0       	ldi	r24, 0x0A	; 10
    110a:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
		n_enter=0;
    110e:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <n_enter+0x1>
    1112:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <n_enter>

	}

	
	 
}
    1116:	2c 96       	adiw	r28, 0x0c	; 12
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	bf 90       	pop	r11
    114c:	af 90       	pop	r10
    114e:	9f 90       	pop	r9
    1150:	8f 90       	pop	r8
    1152:	7f 90       	pop	r7
    1154:	6f 90       	pop	r6
    1156:	5f 90       	pop	r5
    1158:	4f 90       	pop	r4
    115a:	0f 90       	pop	r0
    115c:	0b be       	out	0x3b, r0	; 59
    115e:	0f 90       	pop	r0
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	0f 90       	pop	r0
    1164:	1f 90       	pop	r1
    1166:	18 95       	reti

00001168 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1168:	2f ef       	ldi	r18, 0xFF	; 255
    116a:	83 ed       	ldi	r24, 0xD3	; 211
    116c:	90 e3       	ldi	r25, 0x30	; 48
    116e:	21 50       	subi	r18, 0x01	; 1
    1170:	80 40       	sbci	r24, 0x00	; 0
    1172:	90 40       	sbci	r25, 0x00	; 0
    1174:	e1 f7       	brne	.-8      	; 0x116e <main+0x6>
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <main+0x10>
    1178:	00 00       	nop

int main(void)
{

	_delay_ms(1000);
	UART1_init();
    117a:	0e 94 3f 14 	call	0x287e	; 0x287e <UART1_init>
	MPU9250I2CInit(400000);		
    117e:	60 e8       	ldi	r22, 0x80	; 128
    1180:	7a e1       	ldi	r23, 0x1A	; 26
    1182:	86 e0       	ldi	r24, 0x06	; 6
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	9b d2       	rcall	.+1334   	; 0x16be <MPU9250I2CInit>
    1188:	2f ef       	ldi	r18, 0xFF	; 255
    118a:	83 ed       	ldi	r24, 0xD3	; 211
    118c:	90 e3       	ldi	r25, 0x30	; 48
    118e:	21 50       	subi	r18, 0x01	; 1
    1190:	80 40       	sbci	r24, 0x00	; 0
    1192:	90 40       	sbci	r25, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <main+0x26>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <main+0x30>
    1198:	00 00       	nop
	_delay_ms(1000);		
	
	TCCR0 = 0x00;
    119a:	13 be       	out	0x33, r1	; 51
	//TCCR2 = 0x00;						// 함수 소요시간 계산
	TCNT0 = 6;//131
    119c:	86 e0       	ldi	r24, 0x06	; 6
    119e:	82 bf       	out	0x32, r24	; 50
	//TCNT2 = 6;					        // 타이머 초기 값 설정
	
	//TCCR2 = 0x68;				        // 표준모드, 타이머 정지
	//OCR2 = 250;
	//DDRB |= (1<<DDB7);// 인터럽트 설정
	TIMSK = (1<<TOIE0); 	// 타이머0 오버플로 인터럽트 허용
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x07;
    11a4:	83 b7       	in	r24, 0x33	; 51
    11a6:	87 60       	ori	r24, 0x07	; 7
    11a8:	83 bf       	out	0x33, r24	; 51
	//TCCR2 |= 0x03;						//1ms(16000tic) , duty 64

    int i = 0;
	MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
    11aa:	62 e0       	ldi	r22, 0x02	; 2
    11ac:	72 e0       	ldi	r23, 0x02	; 2
    11ae:	8a e4       	ldi	r24, 0x4A	; 74
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	6e d3       	rcall	.+1756   	; 0x1890 <MPU9250I2CReadIMU_f>
	AK8963I2CReadMAGNETO(mag);
    11b4:	82 e7       	ldi	r24, 0x72	; 114
    11b6:	92 e0       	ldi	r25, 0x02	; 2
    11b8:	31 d4       	rcall	.+2146   	; 0x1a1c <AK8963I2CReadMAGNETO>
	UART1_print16b(mag[0]);
    11ba:	c2 e7       	ldi	r28, 0x72	; 114
    11bc:	d2 e0       	ldi	r29, 0x02	; 2
    11be:	88 81       	ld	r24, Y
    11c0:	99 81       	ldd	r25, Y+1	; 0x01
    11c2:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
	UART1_transmit('\t');
    11c6:	89 e0       	ldi	r24, 0x09	; 9
    11c8:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
	UART1_print16b(mag[1]);
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
	UART1_transmit('\t');
    11d4:	89 e0       	ldi	r24, 0x09	; 9
    11d6:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
	UART1_print16b(mag[2]);
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
	UART1_transmit('\n');
    11e2:	8a e0       	ldi	r24, 0x0A	; 10
    11e4:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
    11e8:	8f e3       	ldi	r24, 0x3F	; 63
    11ea:	9c e9       	ldi	r25, 0x9C	; 156
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <main+0x84>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <main+0x8a>
    11f2:	00 00       	nop
    11f4:	00 ed       	ldi	r16, 0xD0	; 208
    11f6:	17 e0       	ldi	r17, 0x07	; 7
	_delay_ms(10);

	for( i = 0 ; i<2000 ; i++ )
	{
		
		MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
    11f8:	62 e0       	ldi	r22, 0x02	; 2
    11fa:	72 e0       	ldi	r23, 0x02	; 2
    11fc:	8a e4       	ldi	r24, 0x4A	; 74
    11fe:	92 e0       	ldi	r25, 0x02	; 2
    1200:	47 d3       	rcall	.+1678   	; 0x1890 <MPU9250I2CReadIMU_f>
		gyrosumxx += gyro2_f[0];
    1202:	c2 e0       	ldi	r28, 0x02	; 2
    1204:	d2 e0       	ldi	r29, 0x02	; 2
    1206:	28 81       	ld	r18, Y
    1208:	39 81       	ldd	r19, Y+1	; 0x01
    120a:	4a 81       	ldd	r20, Y+2	; 0x02
    120c:	5b 81       	ldd	r21, Y+3	; 0x03
    120e:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <gyrosumxx>
    1212:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <gyrosumxx+0x1>
    1216:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gyrosumxx+0x2>
    121a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <gyrosumxx+0x3>
    121e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    1222:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <gyrosumxx>
    1226:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <gyrosumxx+0x1>
    122a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gyrosumxx+0x2>
    122e:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gyrosumxx+0x3>
		gyrosumyy += gyro2_f[1];
    1232:	2c 81       	ldd	r18, Y+4	; 0x04
    1234:	3d 81       	ldd	r19, Y+5	; 0x05
    1236:	4e 81       	ldd	r20, Y+6	; 0x06
    1238:	5f 81       	ldd	r21, Y+7	; 0x07
    123a:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <gyrosumyy>
    123e:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <gyrosumyy+0x1>
    1242:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <gyrosumyy+0x2>
    1246:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <gyrosumyy+0x3>
    124a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    124e:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <gyrosumyy>
    1252:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <gyrosumyy+0x1>
    1256:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <gyrosumyy+0x2>
    125a:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <gyrosumyy+0x3>
		gyrosumzz += gyro2_f[2];
    125e:	28 85       	ldd	r18, Y+8	; 0x08
    1260:	39 85       	ldd	r19, Y+9	; 0x09
    1262:	4a 85       	ldd	r20, Y+10	; 0x0a
    1264:	5b 85       	ldd	r21, Y+11	; 0x0b
    1266:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <gyrosumzz>
    126a:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <gyrosumzz+0x1>
    126e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <gyrosumzz+0x2>
    1272:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <gyrosumzz+0x3>
    1276:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    127a:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <gyrosumzz>
    127e:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <gyrosumzz+0x1>
    1282:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <gyrosumzz+0x2>
    1286:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <gyrosumzz+0x3>
		AK8963I2CReadMAGNETO_2(mag);
    128a:	82 e7       	ldi	r24, 0x72	; 114
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	0e d4       	rcall	.+2076   	; 0x1aac <AK8963I2CReadMAGNETO_2>
		magsumx	+= mag[0]-avgmx;
    1290:	c2 e7       	ldi	r28, 0x72	; 114
    1292:	d2 e0       	ldi	r29, 0x02	; 2
    1294:	68 81       	ld	r22, Y
    1296:	79 81       	ldd	r23, Y+1	; 0x01
    1298:	07 2e       	mov	r0, r23
    129a:	00 0c       	add	r0, r0
    129c:	88 0b       	sbc	r24, r24
    129e:	99 0b       	sbc	r25, r25
    12a0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    12a4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <avgmx>
    12a8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <avgmx+0x1>
    12ac:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <avgmx+0x2>
    12b0:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <avgmx+0x3>
    12b4:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
    12b8:	9b 01       	movw	r18, r22
    12ba:	ac 01       	movw	r20, r24
    12bc:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <magsumx>
    12c0:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <magsumx+0x1>
    12c4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <magsumx+0x2>
    12c8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <magsumx+0x3>
    12cc:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    12d0:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <magsumx>
    12d4:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <magsumx+0x1>
    12d8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <magsumx+0x2>
    12dc:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <magsumx+0x3>
		magsumy	+= mag[1]-avgmy;
    12e0:	6a 81       	ldd	r22, Y+2	; 0x02
    12e2:	7b 81       	ldd	r23, Y+3	; 0x03
    12e4:	07 2e       	mov	r0, r23
    12e6:	00 0c       	add	r0, r0
    12e8:	88 0b       	sbc	r24, r24
    12ea:	99 0b       	sbc	r25, r25
    12ec:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    12f0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <avgmy>
    12f4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <avgmy+0x1>
    12f8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <avgmy+0x2>
    12fc:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <avgmy+0x3>
    1300:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <magsumy>
    130c:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <magsumy+0x1>
    1310:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <magsumy+0x2>
    1314:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <magsumy+0x3>
    1318:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    131c:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <magsumy>
    1320:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <magsumy+0x1>
    1324:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <magsumy+0x2>
    1328:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <magsumy+0x3>
		magsumz	+= mag[2]-avgmz;
    132c:	6c 81       	ldd	r22, Y+4	; 0x04
    132e:	7d 81       	ldd	r23, Y+5	; 0x05
    1330:	07 2e       	mov	r0, r23
    1332:	00 0c       	add	r0, r0
    1334:	88 0b       	sbc	r24, r24
    1336:	99 0b       	sbc	r25, r25
    1338:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    133c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <avgmz>
    1340:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <avgmz+0x1>
    1344:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <avgmz+0x2>
    1348:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <avgmz+0x3>
    134c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__subsf3>
    1350:	9b 01       	movw	r18, r22
    1352:	ac 01       	movw	r20, r24
    1354:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <magsumz>
    1358:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <magsumz+0x1>
    135c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <magsumz+0x2>
    1360:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <magsumz+0x3>
    1364:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    1368:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <magsumz>
    136c:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <magsumz+0x1>
    1370:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <magsumz+0x2>
    1374:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <magsumz+0x3>
    1378:	8f e3       	ldi	r24, 0x3F	; 63
    137a:	9c e9       	ldi	r25, 0x9C	; 156
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <main+0x214>
    1380:	00 c0       	rjmp	.+0      	; 0x1382 <main+0x21a>
    1382:	00 00       	nop
    1384:	01 50       	subi	r16, 0x01	; 1
    1386:	11 09       	sbc	r17, r1
	UART1_transmit('\t');
	UART1_print16b(mag[2]);
	UART1_transmit('\n');
	_delay_ms(10);

	for( i = 0 ; i<2000 ; i++ )
    1388:	09 f0       	breq	.+2      	; 0x138c <main+0x224>
    138a:	36 cf       	rjmp	.-404    	; 0x11f8 <main+0x90>
		magsumy	+= mag[1]-avgmy;
		magsumz	+= mag[2]-avgmz;
		_delay_ms(10);
		
	}
    avgxx = avgxx* 0.9 + 0.1* gyrosumxx / 2000.0;
    138c:	2d ec       	ldi	r18, 0xCD	; 205
    138e:	3c ec       	ldi	r19, 0xCC	; 204
    1390:	4c ec       	ldi	r20, 0xCC	; 204
    1392:	5d e3       	ldi	r21, 0x3D	; 61
    1394:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <gyrosumxx>
    1398:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <gyrosumxx+0x1>
    139c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gyrosumxx+0x2>
    13a0:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <gyrosumxx+0x3>
    13a4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4a ef       	ldi	r20, 0xFA	; 250
    13ae:	54 e4       	ldi	r21, 0x44	; 68
    13b0:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    13b4:	6b 01       	movw	r12, r22
    13b6:	7c 01       	movw	r14, r24
    13b8:	26 e6       	ldi	r18, 0x66	; 102
    13ba:	36 e6       	ldi	r19, 0x66	; 102
    13bc:	46 e6       	ldi	r20, 0x66	; 102
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <avgxx>
    13c4:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <avgxx+0x1>
    13c8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <avgxx+0x2>
    13cc:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <avgxx+0x3>
    13d0:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    13e0:	6b 01       	movw	r12, r22
    13e2:	7c 01       	movw	r14, r24
    13e4:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <avgxx>
    13e8:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <avgxx+0x1>
    13ec:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <avgxx+0x2>
    13f0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <avgxx+0x3>
    avgyy = avgyy* 0.9 + 0.1* gyrosumyy / 2000.0;
    13f4:	2d ec       	ldi	r18, 0xCD	; 205
    13f6:	3c ec       	ldi	r19, 0xCC	; 204
    13f8:	4c ec       	ldi	r20, 0xCC	; 204
    13fa:	5d e3       	ldi	r21, 0x3D	; 61
    13fc:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <gyrosumyy>
    1400:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <gyrosumyy+0x1>
    1404:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <gyrosumyy+0x2>
    1408:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <gyrosumyy+0x3>
    140c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    141c:	4b 01       	movw	r8, r22
    141e:	5c 01       	movw	r10, r24
    1420:	26 e6       	ldi	r18, 0x66	; 102
    1422:	36 e6       	ldi	r19, 0x66	; 102
    1424:	46 e6       	ldi	r20, 0x66	; 102
    1426:	5f e3       	ldi	r21, 0x3F	; 63
    1428:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <avgyy>
    142c:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <avgyy+0x1>
    1430:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <avgyy+0x2>
    1434:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <avgyy+0x3>
    1438:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    143c:	9b 01       	movw	r18, r22
    143e:	ac 01       	movw	r20, r24
    1440:	c5 01       	movw	r24, r10
    1442:	b4 01       	movw	r22, r8
    1444:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    1448:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <avgyy>
    144c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <avgyy+0x1>
    1450:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <avgyy+0x2>
    1454:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <avgyy+0x3>
    avgzz = avgzz* 0.7 + 0.3* gyrosumzz / 2000.0 ;
    1458:	2a e9       	ldi	r18, 0x9A	; 154
    145a:	39 e9       	ldi	r19, 0x99	; 153
    145c:	49 e9       	ldi	r20, 0x99	; 153
    145e:	5e e3       	ldi	r21, 0x3E	; 62
    1460:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <gyrosumzz>
    1464:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <gyrosumzz+0x1>
    1468:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <gyrosumzz+0x2>
    146c:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <gyrosumzz+0x3>
    1470:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	4a ef       	ldi	r20, 0xFA	; 250
    147a:	54 e4       	ldi	r21, 0x44	; 68
    147c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    1480:	4b 01       	movw	r8, r22
    1482:	5c 01       	movw	r10, r24
    1484:	23 e3       	ldi	r18, 0x33	; 51
    1486:	33 e3       	ldi	r19, 0x33	; 51
    1488:	43 e3       	ldi	r20, 0x33	; 51
    148a:	5f e3       	ldi	r21, 0x3F	; 63
    148c:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <avgzz>
    1490:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <avgzz+0x1>
    1494:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <avgzz+0x2>
    1498:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <avgzz+0x3>
    149c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    14a0:	9b 01       	movw	r18, r22
    14a2:	ac 01       	movw	r20, r24
    14a4:	c5 01       	movw	r24, r10
    14a6:	b4 01       	movw	r22, r8
    14a8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__addsf3>
    14ac:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <avgzz>
    14b0:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <avgzz+0x1>
    14b4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <avgzz+0x2>
    14b8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <avgzz+0x3>
	magmeanx = magsumx/2000.0; // x and y have to be inversed 
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a ef       	ldi	r20, 0xFA	; 250
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <magsumx>
    14c8:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <magsumx+0x1>
    14cc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <magsumx+0x2>
    14d0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <magsumx+0x3>
    14d4:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    14d8:	4b 01       	movw	r8, r22
    14da:	5c 01       	movw	r10, r24
    14dc:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <magmeanx>
    14e0:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <magmeanx+0x1>
    14e4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <magmeanx+0x2>
    14e8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <magmeanx+0x3>
	magmeany = magsumy/2000.0; //
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a ef       	ldi	r20, 0xFA	; 250
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <magsumy>
    14f8:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <magsumy+0x1>
    14fc:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <magsumy+0x2>
    1500:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <magsumy+0x3>
    1504:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    1508:	2b 01       	movw	r4, r22
    150a:	3c 01       	movw	r6, r24
    150c:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <magmeany>
    1510:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <magmeany+0x1>
    1514:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <magmeany+0x2>
    1518:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <magmeany+0x3>
	magmeanz = magsumz/2000.0;
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	4a ef       	ldi	r20, 0xFA	; 250
    1522:	54 e4       	ldi	r21, 0x44	; 68
    1524:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <magsumz>
    1528:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <magsumz+0x1>
    152c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <magsumz+0x2>
    1530:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <magsumz+0x3>
    1534:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    1538:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <magmeanz>
    153c:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <magmeanz+0x1>
    1540:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <magmeanz+0x2>
    1544:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <magmeanz+0x3>
	roll0 = atan2(magmeanx,magmeany)*57.295; //so inverse
    1548:	a3 01       	movw	r20, r6
    154a:	92 01       	movw	r18, r4
    154c:	c5 01       	movw	r24, r10
    154e:	b4 01       	movw	r22, r8
    1550:	0e 94 5f 15 	call	0x2abe	; 0x2abe <atan2>
    1554:	24 e1       	ldi	r18, 0x14	; 20
    1556:	3e e2       	ldi	r19, 0x2E	; 46
    1558:	45 e6       	ldi	r20, 0x65	; 101
    155a:	52 e4       	ldi	r21, 0x42	; 66
    155c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1560:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <roll0>
    1564:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <roll0+0x1>
    1568:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <roll0+0x2>
    156c:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <roll0+0x3>
	UART1_print16b((int16_t)(avgxx*100000));	
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e5       	ldi	r19, 0x50	; 80
    1574:	43 ec       	ldi	r20, 0xC3	; 195
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	c7 01       	movw	r24, r14
    157a:	b6 01       	movw	r22, r12
    157c:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1580:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fixsfsi>
    1584:	cb 01       	movw	r24, r22
    1586:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
	UART1_transmit('\t');
    158a:	89 e0       	ldi	r24, 0x09	; 9
    158c:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
	UART1_print16b((int16_t)(avgyy*100000));
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e5       	ldi	r19, 0x50	; 80
    1594:	43 ec       	ldi	r20, 0xC3	; 195
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <avgyy>
    159c:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <avgyy+0x1>
    15a0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <avgyy+0x2>
    15a4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <avgyy+0x3>
    15a8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    15ac:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fixsfsi>
    15b0:	cb 01       	movw	r24, r22
    15b2:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
	UART1_transmit('\t');
    15b6:	89 e0       	ldi	r24, 0x09	; 9
    15b8:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
	UART1_print16b((int16_t)(avgzz*100000));
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e5       	ldi	r19, 0x50	; 80
    15c0:	43 ec       	ldi	r20, 0xC3	; 195
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <avgzz>
    15c8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <avgzz+0x1>
    15cc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <avgzz+0x2>
    15d0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <avgzz+0x3>
    15d4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    15d8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fixsfsi>
    15dc:	cb 01       	movw	r24, r22
    15de:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
	UART1_transmit('\t');
    15e2:	89 e0       	ldi	r24, 0x09	; 9
    15e4:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
	UART1_transmit('\t');	
    15e8:	89 e0       	ldi	r24, 0x09	; 9
    15ea:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
	UART1_print16b((int16_t)roll0);
    15ee:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <roll0>
    15f2:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <roll0+0x1>
    15f6:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <roll0+0x2>
    15fa:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <roll0+0x3>
    15fe:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fixsfsi>
    1602:	cb 01       	movw	r24, r22
    1604:	0e 94 5f 14 	call	0x28be	; 0x28be <UART1_print16b>
	UART1_transmit('\t');
    1608:	89 e0       	ldi	r24, 0x09	; 9
    160a:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
	UART1_transmit('\n');
    160e:	8a e0       	ldi	r24, 0x0A	; 10
    1610:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
    1614:	9f ef       	ldi	r25, 0xFF	; 255
    1616:	23 e2       	ldi	r18, 0x23	; 35
    1618:	84 ef       	ldi	r24, 0xF4	; 244
    161a:	91 50       	subi	r25, 0x01	; 1
    161c:	20 40       	sbci	r18, 0x00	; 0
    161e:	80 40       	sbci	r24, 0x00	; 0
    1620:	e1 f7       	brne	.-8      	; 0x161a <main+0x4b2>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <main+0x4bc>
	
	_delay_ms(5000);
	Quaternion_setIdentity(&orientation); 
    1624:	00 00       	nop
    1626:	8a ec       	ldi	r24, 0xCA	; 202
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	a6 d2       	rcall	.+1356   	; 0x1b78 <Quaternion_setIdentity>
	sei();							    // 전역 인터럽트 허용
    162c:	78 94       	sei

	UART1_transmit('\n');
    162e:	8a e0       	ldi	r24, 0x0A	; 10
    1630:	0e 94 57 14 	call	0x28ae	; 0x28ae <UART1_transmit>
    1634:	9f ef       	ldi	r25, 0xFF	; 255
    1636:	27 e8       	ldi	r18, 0x87	; 135
    1638:	83 e1       	ldi	r24, 0x13	; 19
    163a:	91 50       	subi	r25, 0x01	; 1
    163c:	20 40       	sbci	r18, 0x00	; 0
    163e:	80 40       	sbci	r24, 0x00	; 0
    1640:	e1 f7       	brne	.-8      	; 0x163a <main+0x4d2>
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <main+0x4dc>
    1644:	00 00       	nop
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	21 ee       	ldi	r18, 0xE1	; 225
    164a:	84 e0       	ldi	r24, 0x04	; 4
    164c:	91 50       	subi	r25, 0x01	; 1
    164e:	20 40       	sbci	r18, 0x00	; 0
    1650:	80 40       	sbci	r24, 0x00	; 0
    1652:	e1 f7       	brne	.-8      	; 0x164c <main+0x4e4>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <main+0x4ee>
    1656:	00 00       	nop
    1658:	f6 cf       	rjmp	.-20     	; 0x1646 <main+0x4de>

0000165a <write_a_byte>:
	
	if(read_n_bytes(EXT_SENS_DATA_00, (uint8_t *) &me, 1) < 0)
		return -1;
	
	return me;
}
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	00 d0       	rcall	.+0      	; 0x1660 <write_a_byte+0x6>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6a 83       	std	Y+2, r22	; 0x02
    1668:	21 e0       	ldi	r18, 0x01	; 1
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	42 e0       	ldi	r20, 0x02	; 2
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	be 01       	movw	r22, r28
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	88 e6       	ldi	r24, 0x68	; 104
    1678:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_write_n_bytes>
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	08 95       	ret

00001686 <read_n_bytes>:
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	eb 01       	movw	r28, r22
    1690:	8a 01       	movw	r16, r20
    1692:	68 2f       	mov	r22, r24
    1694:	60 68       	ori	r22, 0x80	; 128
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	88 e6       	ldi	r24, 0x68	; 104
    169c:	0e 94 b0 00 	call	0x160	; 0x160 <i2c_write_a_byte>
    16a0:	99 23       	and	r25, r25
    16a2:	34 f0       	brlt	.+12     	; 0x16b0 <read_n_bytes+0x2a>
    16a4:	a8 01       	movw	r20, r16
    16a6:	be 01       	movw	r22, r28
    16a8:	88 e6       	ldi	r24, 0x68	; 104
    16aa:	0e 94 88 01 	call	0x310	; 0x310 <i2c_read_n_bytes>
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <read_n_bytes+0x2e>
    16b0:	8f ef       	ldi	r24, 0xFF	; 255
    16b2:	9f ef       	ldi	r25, 0xFF	; 255
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <MPU9250I2CInit>:
    16be:	0e 94 aa 00 	call	0x154	; 0x154 <i2c_init>
    16c2:	60 e8       	ldi	r22, 0x80	; 128
    16c4:	8b e6       	ldi	r24, 0x6B	; 107
    16c6:	c9 df       	rcall	.-110    	; 0x165a <write_a_byte>
    16c8:	8f e3       	ldi	r24, 0x3F	; 63
    16ca:	9c e9       	ldi	r25, 0x9C	; 156
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <MPU9250I2CInit+0xe>
    16d0:	00 c0       	rjmp	.+0      	; 0x16d2 <MPU9250I2CInit+0x14>
    16d2:	00 00       	nop
    16d4:	8f e3       	ldi	r24, 0x3F	; 63
    16d6:	9c e9       	ldi	r25, 0x9C	; 156
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <MPU9250I2CInit+0x1a>
    16dc:	00 c0       	rjmp	.+0      	; 0x16de <MPU9250I2CInit+0x20>
    16de:	00 00       	nop
    16e0:	8f e3       	ldi	r24, 0x3F	; 63
    16e2:	9c e9       	ldi	r25, 0x9C	; 156
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <MPU9250I2CInit+0x26>
    16e8:	00 c0       	rjmp	.+0      	; 0x16ea <MPU9250I2CInit+0x2c>
    16ea:	00 00       	nop
    16ec:	8f e3       	ldi	r24, 0x3F	; 63
    16ee:	9c e9       	ldi	r25, 0x9C	; 156
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <MPU9250I2CInit+0x32>
    16f4:	00 c0       	rjmp	.+0      	; 0x16f6 <MPU9250I2CInit+0x38>
    16f6:	00 00       	nop
    16f8:	8f e3       	ldi	r24, 0x3F	; 63
    16fa:	9c e9       	ldi	r25, 0x9C	; 156
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <MPU9250I2CInit+0x3e>
    1700:	00 c0       	rjmp	.+0      	; 0x1702 <MPU9250I2CInit+0x44>
    1702:	00 00       	nop
    1704:	8f e3       	ldi	r24, 0x3F	; 63
    1706:	9c e9       	ldi	r25, 0x9C	; 156
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <MPU9250I2CInit+0x4a>
    170c:	00 c0       	rjmp	.+0      	; 0x170e <MPU9250I2CInit+0x50>
    170e:	00 00       	nop
    1710:	8f e3       	ldi	r24, 0x3F	; 63
    1712:	9c e9       	ldi	r25, 0x9C	; 156
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <MPU9250I2CInit+0x56>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <MPU9250I2CInit+0x5c>
    171a:	00 00       	nop
    171c:	8f e3       	ldi	r24, 0x3F	; 63
    171e:	9c e9       	ldi	r25, 0x9C	; 156
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <MPU9250I2CInit+0x62>
    1724:	00 c0       	rjmp	.+0      	; 0x1726 <MPU9250I2CInit+0x68>
    1726:	00 00       	nop
    1728:	8f e3       	ldi	r24, 0x3F	; 63
    172a:	9c e9       	ldi	r25, 0x9C	; 156
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <MPU9250I2CInit+0x6e>
    1730:	00 c0       	rjmp	.+0      	; 0x1732 <MPU9250I2CInit+0x74>
    1732:	00 00       	nop
    1734:	8f e3       	ldi	r24, 0x3F	; 63
    1736:	9c e9       	ldi	r25, 0x9C	; 156
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <MPU9250I2CInit+0x7a>
    173c:	00 c0       	rjmp	.+0      	; 0x173e <MPU9250I2CInit+0x80>
    173e:	00 00       	nop
    1740:	67 e0       	ldi	r22, 0x07	; 7
    1742:	88 e6       	ldi	r24, 0x68	; 104
    1744:	8a df       	rcall	.-236    	; 0x165a <write_a_byte>
    1746:	8f e3       	ldi	r24, 0x3F	; 63
    1748:	9c e9       	ldi	r25, 0x9C	; 156
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <MPU9250I2CInit+0x8c>
    174e:	00 c0       	rjmp	.+0      	; 0x1750 <MPU9250I2CInit+0x92>
    1750:	00 00       	nop
    1752:	8f e3       	ldi	r24, 0x3F	; 63
    1754:	9c e9       	ldi	r25, 0x9C	; 156
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <MPU9250I2CInit+0x98>
    175a:	00 c0       	rjmp	.+0      	; 0x175c <MPU9250I2CInit+0x9e>
    175c:	00 00       	nop
    175e:	8f e3       	ldi	r24, 0x3F	; 63
    1760:	9c e9       	ldi	r25, 0x9C	; 156
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <MPU9250I2CInit+0xa4>
    1766:	00 c0       	rjmp	.+0      	; 0x1768 <MPU9250I2CInit+0xaa>
    1768:	00 00       	nop
    176a:	8f e3       	ldi	r24, 0x3F	; 63
    176c:	9c e9       	ldi	r25, 0x9C	; 156
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <MPU9250I2CInit+0xb0>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <MPU9250I2CInit+0xb6>
    1774:	00 00       	nop
    1776:	8f e3       	ldi	r24, 0x3F	; 63
    1778:	9c e9       	ldi	r25, 0x9C	; 156
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <MPU9250I2CInit+0xbc>
    177e:	00 c0       	rjmp	.+0      	; 0x1780 <MPU9250I2CInit+0xc2>
    1780:	00 00       	nop
    1782:	8f e3       	ldi	r24, 0x3F	; 63
    1784:	9c e9       	ldi	r25, 0x9C	; 156
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <MPU9250I2CInit+0xc8>
    178a:	00 c0       	rjmp	.+0      	; 0x178c <MPU9250I2CInit+0xce>
    178c:	00 00       	nop
    178e:	8f e3       	ldi	r24, 0x3F	; 63
    1790:	9c e9       	ldi	r25, 0x9C	; 156
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <MPU9250I2CInit+0xd4>
    1796:	00 c0       	rjmp	.+0      	; 0x1798 <MPU9250I2CInit+0xda>
    1798:	00 00       	nop
    179a:	8f e3       	ldi	r24, 0x3F	; 63
    179c:	9c e9       	ldi	r25, 0x9C	; 156
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <MPU9250I2CInit+0xe0>
    17a2:	00 c0       	rjmp	.+0      	; 0x17a4 <MPU9250I2CInit+0xe6>
    17a4:	00 00       	nop
    17a6:	8f e3       	ldi	r24, 0x3F	; 63
    17a8:	9c e9       	ldi	r25, 0x9C	; 156
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <MPU9250I2CInit+0xec>
    17ae:	00 c0       	rjmp	.+0      	; 0x17b0 <MPU9250I2CInit+0xf2>
    17b0:	00 00       	nop
    17b2:	8f e3       	ldi	r24, 0x3F	; 63
    17b4:	9c e9       	ldi	r25, 0x9C	; 156
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <MPU9250I2CInit+0xf8>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <MPU9250I2CInit+0xfe>
    17bc:	00 00       	nop
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	88 e6       	ldi	r24, 0x68	; 104
    17c2:	4b df       	rcall	.-362    	; 0x165a <write_a_byte>
    17c4:	8f e3       	ldi	r24, 0x3F	; 63
    17c6:	9c e9       	ldi	r25, 0x9C	; 156
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <MPU9250I2CInit+0x10a>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <MPU9250I2CInit+0x110>
    17ce:	00 00       	nop
    17d0:	60 e2       	ldi	r22, 0x20	; 32
    17d2:	8a e6       	ldi	r24, 0x6A	; 106
    17d4:	42 df       	rcall	.-380    	; 0x165a <write_a_byte>
    17d6:	6d e0       	ldi	r22, 0x0D	; 13
    17d8:	84 e2       	ldi	r24, 0x24	; 36
    17da:	3f df       	rcall	.-386    	; 0x165a <write_a_byte>
    17dc:	8f e3       	ldi	r24, 0x3F	; 63
    17de:	9c e9       	ldi	r25, 0x9C	; 156
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <MPU9250I2CInit+0x122>
    17e4:	00 c0       	rjmp	.+0      	; 0x17e6 <MPU9250I2CInit+0x128>
    17e6:	00 00       	nop
    17e8:	6c e0       	ldi	r22, 0x0C	; 12
    17ea:	85 e2       	ldi	r24, 0x25	; 37
    17ec:	36 df       	rcall	.-404    	; 0x165a <write_a_byte>
    17ee:	6b e0       	ldi	r22, 0x0B	; 11
    17f0:	86 e2       	ldi	r24, 0x26	; 38
    17f2:	33 df       	rcall	.-410    	; 0x165a <write_a_byte>
    17f4:	61 e0       	ldi	r22, 0x01	; 1
    17f6:	83 e6       	ldi	r24, 0x63	; 99
    17f8:	30 df       	rcall	.-416    	; 0x165a <write_a_byte>
    17fa:	61 e8       	ldi	r22, 0x81	; 129
    17fc:	87 e2       	ldi	r24, 0x27	; 39
    17fe:	2d df       	rcall	.-422    	; 0x165a <write_a_byte>
    1800:	9f ef       	ldi	r25, 0xFF	; 255
    1802:	20 e7       	ldi	r18, 0x70	; 112
    1804:	82 e0       	ldi	r24, 0x02	; 2
    1806:	91 50       	subi	r25, 0x01	; 1
    1808:	20 40       	sbci	r18, 0x00	; 0
    180a:	80 40       	sbci	r24, 0x00	; 0
    180c:	e1 f7       	brne	.-8      	; 0x1806 <MPU9250I2CInit+0x148>
    180e:	00 c0       	rjmp	.+0      	; 0x1810 <MPU9250I2CInit+0x152>
    1810:	00 00       	nop
    1812:	6c e0       	ldi	r22, 0x0C	; 12
    1814:	85 e2       	ldi	r24, 0x25	; 37
    1816:	21 df       	rcall	.-446    	; 0x165a <write_a_byte>
    1818:	6a e0       	ldi	r22, 0x0A	; 10
    181a:	86 e2       	ldi	r24, 0x26	; 38
    181c:	1e df       	rcall	.-452    	; 0x165a <write_a_byte>
    181e:	60 e1       	ldi	r22, 0x10	; 16
    1820:	83 e6       	ldi	r24, 0x63	; 99
    1822:	1b df       	rcall	.-458    	; 0x165a <write_a_byte>
    1824:	61 e8       	ldi	r22, 0x81	; 129
    1826:	87 e2       	ldi	r24, 0x27	; 39
    1828:	18 df       	rcall	.-464    	; 0x165a <write_a_byte>
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	20 e7       	ldi	r18, 0x70	; 112
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	91 50       	subi	r25, 0x01	; 1
    1832:	20 40       	sbci	r18, 0x00	; 0
    1834:	80 40       	sbci	r24, 0x00	; 0
    1836:	e1 f7       	brne	.-8      	; 0x1830 <MPU9250I2CInit+0x172>
    1838:	00 c0       	rjmp	.+0      	; 0x183a <MPU9250I2CInit+0x17c>
    183a:	00 00       	nop
    183c:	6c e0       	ldi	r22, 0x0C	; 12
    183e:	85 e2       	ldi	r24, 0x25	; 37
    1840:	0c df       	rcall	.-488    	; 0x165a <write_a_byte>
    1842:	6a e0       	ldi	r22, 0x0A	; 10
    1844:	86 e2       	ldi	r24, 0x26	; 38
    1846:	09 df       	rcall	.-494    	; 0x165a <write_a_byte>
    1848:	66 e1       	ldi	r22, 0x16	; 22
    184a:	83 e6       	ldi	r24, 0x63	; 99
    184c:	06 df       	rcall	.-500    	; 0x165a <write_a_byte>
    184e:	61 e8       	ldi	r22, 0x81	; 129
    1850:	87 e2       	ldi	r24, 0x27	; 39
    1852:	03 df       	rcall	.-506    	; 0x165a <write_a_byte>
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	20 e7       	ldi	r18, 0x70	; 112
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	91 50       	subi	r25, 0x01	; 1
    185c:	20 40       	sbci	r18, 0x00	; 0
    185e:	80 40       	sbci	r24, 0x00	; 0
    1860:	e1 f7       	brne	.-8      	; 0x185a <MPU9250I2CInit+0x19c>
    1862:	00 c0       	rjmp	.+0      	; 0x1864 <MPU9250I2CInit+0x1a6>
    1864:	00 00       	nop
    1866:	6c e8       	ldi	r22, 0x8C	; 140
    1868:	85 e2       	ldi	r24, 0x25	; 37
    186a:	f7 de       	rcall	.-530    	; 0x165a <write_a_byte>
    186c:	63 e0       	ldi	r22, 0x03	; 3
    186e:	86 e2       	ldi	r24, 0x26	; 38
    1870:	f4 de       	rcall	.-536    	; 0x165a <write_a_byte>
    1872:	67 e8       	ldi	r22, 0x87	; 135
    1874:	87 e2       	ldi	r24, 0x27	; 39
    1876:	f1 de       	rcall	.-542    	; 0x165a <write_a_byte>
    1878:	9f ef       	ldi	r25, 0xFF	; 255
    187a:	20 e7       	ldi	r18, 0x70	; 112
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	91 50       	subi	r25, 0x01	; 1
    1880:	20 40       	sbci	r18, 0x00	; 0
    1882:	80 40       	sbci	r24, 0x00	; 0
    1884:	e1 f7       	brne	.-8      	; 0x187e <MPU9250I2CInit+0x1c0>
    1886:	00 c0       	rjmp	.+0      	; 0x1888 <MPU9250I2CInit+0x1ca>
    1888:	00 00       	nop
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	08 95       	ret

00001890 <MPU9250I2CReadIMU_f>:
    1890:	8f 92       	push	r8
    1892:	9f 92       	push	r9
    1894:	af 92       	push	r10
    1896:	bf 92       	push	r11
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	6a 97       	sbiw	r28, 0x1a	; 26
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	7c 01       	movw	r14, r24
    18ba:	8b 01       	movw	r16, r22
    18bc:	4e e0       	ldi	r20, 0x0E	; 14
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	be 01       	movw	r22, r28
    18c2:	6f 5f       	subi	r22, 0xFF	; 255
    18c4:	7f 4f       	sbci	r23, 0xFF	; 255
    18c6:	8b e3       	ldi	r24, 0x3B	; 59
    18c8:	de de       	rcall	.-580    	; 0x1686 <read_n_bytes>
    18ca:	99 23       	and	r25, r25
    18cc:	0c f4       	brge	.+2      	; 0x18d0 <MPU9250I2CReadIMU_f+0x40>
    18ce:	91 c0       	rjmp	.+290    	; 0x19f2 <MPU9250I2CReadIMU_f+0x162>
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	8f 87       	std	Y+15, r24	; 0x0f
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	88 8b       	std	Y+16, r24	; 0x10
    18d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18da:	8d 8b       	std	Y+21, r24	; 0x15
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	8e 8b       	std	Y+22, r24	; 0x16
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	89 8b       	std	Y+17, r24	; 0x11
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	8a 8b       	std	Y+18, r24	; 0x12
    18e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    18ea:	8f 8b       	std	Y+23, r24	; 0x17
    18ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    18ee:	88 8f       	std	Y+24, r24	; 0x18
    18f0:	8e 81       	ldd	r24, Y+6	; 0x06
    18f2:	8b 8b       	std	Y+19, r24	; 0x13
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	8c 8b       	std	Y+20, r24	; 0x14
    18f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18fa:	89 8f       	std	Y+25, r24	; 0x19
    18fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fe:	8a 8f       	std	Y+26, r24	; 0x1a
    1900:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <acc_scale>
    1904:	90 90 2d 01 	lds	r9, 0x012D	; 0x80012d <acc_scale+0x1>
    1908:	a0 90 2e 01 	lds	r10, 0x012E	; 0x80012e <acc_scale+0x2>
    190c:	b0 90 2f 01 	lds	r11, 0x012F	; 0x80012f <acc_scale+0x3>
    1910:	6f 85       	ldd	r22, Y+15	; 0x0f
    1912:	78 89       	ldd	r23, Y+16	; 0x10
    1914:	07 2e       	mov	r0, r23
    1916:	00 0c       	add	r0, r0
    1918:	88 0b       	sbc	r24, r24
    191a:	99 0b       	sbc	r25, r25
    191c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    1920:	a5 01       	movw	r20, r10
    1922:	94 01       	movw	r18, r8
    1924:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1928:	f7 01       	movw	r30, r14
    192a:	60 83       	st	Z, r22
    192c:	71 83       	std	Z+1, r23	; 0x01
    192e:	82 83       	std	Z+2, r24	; 0x02
    1930:	93 83       	std	Z+3, r25	; 0x03
    1932:	69 89       	ldd	r22, Y+17	; 0x11
    1934:	7a 89       	ldd	r23, Y+18	; 0x12
    1936:	07 2e       	mov	r0, r23
    1938:	00 0c       	add	r0, r0
    193a:	88 0b       	sbc	r24, r24
    193c:	99 0b       	sbc	r25, r25
    193e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    1942:	a5 01       	movw	r20, r10
    1944:	94 01       	movw	r18, r8
    1946:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    194a:	f7 01       	movw	r30, r14
    194c:	64 83       	std	Z+4, r22	; 0x04
    194e:	75 83       	std	Z+5, r23	; 0x05
    1950:	86 83       	std	Z+6, r24	; 0x06
    1952:	97 83       	std	Z+7, r25	; 0x07
    1954:	6b 89       	ldd	r22, Y+19	; 0x13
    1956:	7c 89       	ldd	r23, Y+20	; 0x14
    1958:	07 2e       	mov	r0, r23
    195a:	00 0c       	add	r0, r0
    195c:	88 0b       	sbc	r24, r24
    195e:	99 0b       	sbc	r25, r25
    1960:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    1964:	a5 01       	movw	r20, r10
    1966:	94 01       	movw	r18, r8
    1968:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    196c:	f7 01       	movw	r30, r14
    196e:	60 87       	std	Z+8, r22	; 0x08
    1970:	71 87       	std	Z+9, r23	; 0x09
    1972:	82 87       	std	Z+10, r24	; 0x0a
    1974:	93 87       	std	Z+11, r25	; 0x0b
    1976:	c0 90 28 01 	lds	r12, 0x0128	; 0x800128 <gyro_scale>
    197a:	d0 90 29 01 	lds	r13, 0x0129	; 0x800129 <gyro_scale+0x1>
    197e:	e0 90 2a 01 	lds	r14, 0x012A	; 0x80012a <gyro_scale+0x2>
    1982:	f0 90 2b 01 	lds	r15, 0x012B	; 0x80012b <gyro_scale+0x3>
    1986:	6d 89       	ldd	r22, Y+21	; 0x15
    1988:	7e 89       	ldd	r23, Y+22	; 0x16
    198a:	07 2e       	mov	r0, r23
    198c:	00 0c       	add	r0, r0
    198e:	88 0b       	sbc	r24, r24
    1990:	99 0b       	sbc	r25, r25
    1992:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    1996:	a7 01       	movw	r20, r14
    1998:	96 01       	movw	r18, r12
    199a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    199e:	f8 01       	movw	r30, r16
    19a0:	60 83       	st	Z, r22
    19a2:	71 83       	std	Z+1, r23	; 0x01
    19a4:	82 83       	std	Z+2, r24	; 0x02
    19a6:	93 83       	std	Z+3, r25	; 0x03
    19a8:	6f 89       	ldd	r22, Y+23	; 0x17
    19aa:	78 8d       	ldd	r23, Y+24	; 0x18
    19ac:	07 2e       	mov	r0, r23
    19ae:	00 0c       	add	r0, r0
    19b0:	88 0b       	sbc	r24, r24
    19b2:	99 0b       	sbc	r25, r25
    19b4:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    19b8:	a7 01       	movw	r20, r14
    19ba:	96 01       	movw	r18, r12
    19bc:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    19c0:	f8 01       	movw	r30, r16
    19c2:	64 83       	std	Z+4, r22	; 0x04
    19c4:	75 83       	std	Z+5, r23	; 0x05
    19c6:	86 83       	std	Z+6, r24	; 0x06
    19c8:	97 83       	std	Z+7, r25	; 0x07
    19ca:	69 8d       	ldd	r22, Y+25	; 0x19
    19cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ce:	07 2e       	mov	r0, r23
    19d0:	00 0c       	add	r0, r0
    19d2:	88 0b       	sbc	r24, r24
    19d4:	99 0b       	sbc	r25, r25
    19d6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__floatsisf>
    19da:	a7 01       	movw	r20, r14
    19dc:	96 01       	movw	r18, r12
    19de:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    19e2:	f8 01       	movw	r30, r16
    19e4:	60 87       	std	Z+8, r22	; 0x08
    19e6:	71 87       	std	Z+9, r23	; 0x09
    19e8:	82 87       	std	Z+10, r24	; 0x0a
    19ea:	93 87       	std	Z+11, r25	; 0x0b
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <MPU9250I2CReadIMU_f+0x166>
    19f2:	8f ef       	ldi	r24, 0xFF	; 255
    19f4:	9f ef       	ldi	r25, 0xFF	; 255
    19f6:	6a 96       	adiw	r28, 0x1a	; 26
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	9f 90       	pop	r9
    1a18:	8f 90       	pop	r8
    1a1a:	08 95       	ret

00001a1c <AK8963I2CReadMAGNETO>:


int AK8963I2CReadMAGNETO(int16_t mag[]){
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <AK8963I2CReadMAGNETO+0xa>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <AK8963I2CReadMAGNETO+0xc>
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <AK8963I2CReadMAGNETO+0xe>
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	08 2f       	mov	r16, r24
    1a30:	19 2f       	mov	r17, r25
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;
	write_a_byte(I2C_SLV0_ADDR, 0x8c); //set the i2c slave address of ak8963(0x0c) read mode
    1a32:	6c e8       	ldi	r22, 0x8C	; 140
    1a34:	85 e2       	ldi	r24, 0x25	; 37
    1a36:	11 de       	rcall	.-990    	; 0x165a <write_a_byte>
	write_a_byte(I2C_SLV0_REG, 0x03); //i2c slave 0 register address from where to begin data transfer
    1a38:	63 e0       	ldi	r22, 0x03	; 3
    1a3a:	86 e2       	ldi	r24, 0x26	; 38
    1a3c:	0e de       	rcall	.-996    	; 0x165a <write_a_byte>
	write_a_byte(I2C_SLV0_CTRL, 0x87); //enable i2c and read 6 byte
    1a3e:	67 e8       	ldi	r22, 0x87	; 135
    1a40:	87 e2       	ldi	r24, 0x27	; 39
    1a42:	0b de       	rcall	.-1002   	; 0x165a <write_a_byte>
    1a44:	2f ef       	ldi	r18, 0xFF	; 255
    1a46:	80 e7       	ldi	r24, 0x70	; 112
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	21 50       	subi	r18, 0x01	; 1
    1a4c:	80 40       	sbci	r24, 0x00	; 0
    1a4e:	90 40       	sbci	r25, 0x00	; 0
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <AK8963I2CReadMAGNETO+0x2e>
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <AK8963I2CReadMAGNETO+0x38>
    1a54:	00 00       	nop
	_delay_ms(50);	

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
    1a56:	46 e0       	ldi	r20, 0x06	; 6
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	be 01       	movw	r22, r28
    1a5c:	6f 5f       	subi	r22, 0xFF	; 255
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	89 e4       	ldi	r24, 0x49	; 73
    1a62:	11 de       	rcall	.-990    	; 0x1686 <read_n_bytes>
    1a64:	99 23       	and	r25, r25
    1a66:	ac f0       	brlt	.+42     	; 0x1a92 <AK8963I2CReadMAGNETO+0x76>
    1a68:	fe 01       	movw	r30, r28
    1a6a:	31 96       	adiw	r30, 0x01	; 1
    1a6c:	a0 2f       	mov	r26, r16
    1a6e:	b1 2f       	mov	r27, r17
    1a70:	9e 01       	movw	r18, r28
    1a72:	29 5f       	subi	r18, 0xF9	; 249
    1a74:	3f 4f       	sbci	r19, 0xFF	; 255
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
	{
		ptr_mag[i]   = buf[i];
    1a76:	80 81       	ld	r24, Z
    1a78:	8c 93       	st	X, r24
		ptr_mag[i+1] = buf[i+1];
    1a7a:	81 81       	ldd	r24, Z+1	; 0x01
    1a7c:	11 96       	adiw	r26, 0x01	; 1
    1a7e:	8c 93       	st	X, r24
    1a80:	11 97       	sbiw	r26, 0x01	; 1
    1a82:	32 96       	adiw	r30, 0x02	; 2
    1a84:	12 96       	adiw	r26, 0x02	; 2
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
		return -1;
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
    1a86:	e2 17       	cp	r30, r18
    1a88:	f3 07       	cpc	r31, r19
    1a8a:	a9 f7       	brne	.-22     	; 0x1a76 <AK8963I2CReadMAGNETO+0x5a>
	{
		ptr_mag[i]   = buf[i];
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <AK8963I2CReadMAGNETO+0x7a>
	write_a_byte(I2C_SLV0_REG, 0x03); //i2c slave 0 register address from where to begin data transfer
	write_a_byte(I2C_SLV0_CTRL, 0x87); //enable i2c and read 6 byte
	_delay_ms(50);	

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
		return -1;
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;

}
    1a96:	26 96       	adiw	r28, 0x06	; 6
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	08 95       	ret

00001aac <AK8963I2CReadMAGNETO_2>:
int AK8963I2CReadMAGNETO_2(int16_t mag[]){
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <AK8963I2CReadMAGNETO_2+0xa>
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <AK8963I2CReadMAGNETO_2+0xc>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <AK8963I2CReadMAGNETO_2+0xe>
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	08 2f       	mov	r16, r24
    1ac0:	19 2f       	mov	r17, r25
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
    1ac2:	46 e0       	ldi	r20, 0x06	; 6
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	be 01       	movw	r22, r28
    1ac8:	6f 5f       	subi	r22, 0xFF	; 255
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	89 e4       	ldi	r24, 0x49	; 73
    1ace:	db dd       	rcall	.-1098   	; 0x1686 <read_n_bytes>
    1ad0:	99 23       	and	r25, r25
    1ad2:	ac f0       	brlt	.+42     	; 0x1afe <AK8963I2CReadMAGNETO_2+0x52>
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	31 96       	adiw	r30, 0x01	; 1
    1ad8:	a0 2f       	mov	r26, r16
    1ada:	b1 2f       	mov	r27, r17
    1adc:	9e 01       	movw	r18, r28
    1ade:	29 5f       	subi	r18, 0xF9	; 249
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
	{
		ptr_mag[i]   = buf[i];
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8c 93       	st	X, r24
		ptr_mag[i+1] = buf[i+1];
    1ae6:	81 81       	ldd	r24, Z+1	; 0x01
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	8c 93       	st	X, r24
    1aec:	11 97       	sbiw	r26, 0x01	; 1
    1aee:	32 96       	adiw	r30, 0x02	; 2
    1af0:	12 96       	adiw	r26, 0x02	; 2
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
	return -1;
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
    1af2:	e2 17       	cp	r30, r18
    1af4:	f3 07       	cpc	r31, r19
    1af6:	a9 f7       	brne	.-22     	; 0x1ae2 <AK8963I2CReadMAGNETO_2+0x36>
	{
		ptr_mag[i]   = buf[i];
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <AK8963I2CReadMAGNETO_2+0x56>
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
	return -1;
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    1b00:	9f ef       	ldi	r25, 0xFF	; 255
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;

}
    1b02:	26 96       	adiw	r28, 0x06	; 6
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	08 95       	ret

00001b18 <Quaternion_set>:
        result.v[0] = (q1->v[0] * ratioA + q2->v[0] * ratioB);
        result.v[1] = (q1->v[1] * ratioA + q2->v[1] * ratioB);
        result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);
    }
    *output = result;
}
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	f4 01       	movw	r30, r8
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <Quaternion_set+0x26>
    1b3a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <abort>
    1b3e:	60 83       	st	Z, r22
    1b40:	71 83       	std	Z+1, r23	; 0x01
    1b42:	82 83       	std	Z+2, r24	; 0x02
    1b44:	93 83       	std	Z+3, r25	; 0x03
    1b46:	24 83       	std	Z+4, r18	; 0x04
    1b48:	35 83       	std	Z+5, r19	; 0x05
    1b4a:	46 83       	std	Z+6, r20	; 0x06
    1b4c:	57 83       	std	Z+7, r21	; 0x07
    1b4e:	e0 86       	std	Z+8, r14	; 0x08
    1b50:	f1 86       	std	Z+9, r15	; 0x09
    1b52:	02 87       	std	Z+10, r16	; 0x0a
    1b54:	13 87       	std	Z+11, r17	; 0x0b
    1b56:	a4 86       	std	Z+12, r10	; 0x0c
    1b58:	b5 86       	std	Z+13, r11	; 0x0d
    1b5a:	c6 86       	std	Z+14, r12	; 0x0e
    1b5c:	d7 86       	std	Z+15, r13	; 0x0f
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
    1b6e:	bf 90       	pop	r11
    1b70:	af 90       	pop	r10
    1b72:	9f 90       	pop	r9
    1b74:	8f 90       	pop	r8
    1b76:	08 95       	ret

00001b78 <Quaternion_setIdentity>:
    1b78:	fc 01       	movw	r30, r24
    1b7a:	89 2b       	or	r24, r25
    1b7c:	11 f4       	brne	.+4      	; 0x1b82 <Quaternion_setIdentity+0xa>
    1b7e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <abort>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a0 e8       	ldi	r26, 0x80	; 128
    1b88:	bf e3       	ldi	r27, 0x3F	; 63
    1b8a:	80 83       	st	Z, r24
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	a2 83       	std	Z+2, r26	; 0x02
    1b90:	b3 83       	std	Z+3, r27	; 0x03
    1b92:	14 82       	std	Z+4, r1	; 0x04
    1b94:	15 82       	std	Z+5, r1	; 0x05
    1b96:	16 82       	std	Z+6, r1	; 0x06
    1b98:	17 82       	std	Z+7, r1	; 0x07
    1b9a:	10 86       	std	Z+8, r1	; 0x08
    1b9c:	11 86       	std	Z+9, r1	; 0x09
    1b9e:	12 86       	std	Z+10, r1	; 0x0a
    1ba0:	13 86       	std	Z+11, r1	; 0x0b
    1ba2:	14 86       	std	Z+12, r1	; 0x0c
    1ba4:	15 86       	std	Z+13, r1	; 0x0d
    1ba6:	16 86       	std	Z+14, r1	; 0x0e
    1ba8:	17 86       	std	Z+15, r1	; 0x0f
    1baa:	08 95       	ret

00001bac <Quaternion_toEulerZYX2>:
    1bac:	4f 92       	push	r4
    1bae:	5f 92       	push	r5
    1bb0:	6f 92       	push	r6
    1bb2:	7f 92       	push	r7
    1bb4:	8f 92       	push	r8
    1bb6:	9f 92       	push	r9
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <Quaternion_toEulerZYX2+0x22>
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <Quaternion_toEulerZYX2+0x24>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <Quaternion_toEulerZYX2+0x26>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
    1bda:	8b 01       	movw	r16, r22
    1bdc:	67 2b       	or	r22, r23
    1bde:	11 f4       	brne	.+4      	; 0x1be4 <Quaternion_toEulerZYX2+0x38>
    1be0:	0e 94 7f 18 	call	0x30fe	; 0x30fe <abort>
    1be4:	ed 81       	ldd	r30, Y+5	; 0x05
    1be6:	fe 81       	ldd	r31, Y+6	; 0x06
    1be8:	20 81       	ld	r18, Z
    1bea:	31 81       	ldd	r19, Z+1	; 0x01
    1bec:	42 81       	ldd	r20, Z+2	; 0x02
    1bee:	53 81       	ldd	r21, Z+3	; 0x03
    1bf0:	64 85       	ldd	r22, Z+12	; 0x0c
    1bf2:	75 85       	ldd	r23, Z+13	; 0x0d
    1bf4:	86 85       	ldd	r24, Z+14	; 0x0e
    1bf6:	97 85       	ldd	r25, Z+15	; 0x0f
    1bf8:	62 d7       	rcall	.+3780   	; 0x2abe <atan2>
    1bfa:	9b 01       	movw	r18, r22
    1bfc:	ac 01       	movw	r20, r24
    1bfe:	d5 d6       	rcall	.+3498   	; 0x29aa <__addsf3>
    1c00:	6b 01       	movw	r12, r22
    1c02:	7c 01       	movw	r14, r24
    1c04:	f8 01       	movw	r30, r16
    1c06:	60 87       	std	Z+8, r22	; 0x08
    1c08:	71 87       	std	Z+9, r23	; 0x09
    1c0a:	82 87       	std	Z+10, r24	; 0x0a
    1c0c:	93 87       	std	Z+11, r25	; 0x0b
    1c0e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c10:	fe 81       	ldd	r31, Y+6	; 0x06
    1c12:	24 81       	ldd	r18, Z+4	; 0x04
    1c14:	35 81       	ldd	r19, Z+5	; 0x05
    1c16:	46 81       	ldd	r20, Z+6	; 0x06
    1c18:	57 81       	ldd	r21, Z+7	; 0x07
    1c1a:	60 85       	ldd	r22, Z+8	; 0x08
    1c1c:	71 85       	ldd	r23, Z+9	; 0x09
    1c1e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c20:	93 85       	ldd	r25, Z+11	; 0x0b
    1c22:	4d d7       	rcall	.+3738   	; 0x2abe <atan2>
    1c24:	4b 01       	movw	r8, r22
    1c26:	5c 01       	movw	r10, r24
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	c7 01       	movw	r24, r14
    1c32:	b6 01       	movw	r22, r12
    1c34:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1c38:	a5 01       	movw	r20, r10
    1c3a:	94 01       	movw	r18, r8
    1c3c:	b6 d6       	rcall	.+3436   	; 0x29aa <__addsf3>
    1c3e:	f8 01       	movw	r30, r16
    1c40:	60 83       	st	Z, r22
    1c42:	71 83       	std	Z+1, r23	; 0x01
    1c44:	82 83       	std	Z+2, r24	; 0x02
    1c46:	93 83       	std	Z+3, r25	; 0x03
    1c48:	ed 81       	ldd	r30, Y+5	; 0x05
    1c4a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c4c:	80 80       	ld	r8, Z
    1c4e:	91 80       	ldd	r9, Z+1	; 0x01
    1c50:	a2 80       	ldd	r10, Z+2	; 0x02
    1c52:	b3 80       	ldd	r11, Z+3	; 0x03
    1c54:	c4 84       	ldd	r12, Z+12	; 0x0c
    1c56:	d5 84       	ldd	r13, Z+13	; 0x0d
    1c58:	e6 84       	ldd	r14, Z+14	; 0x0e
    1c5a:	f7 84       	ldd	r15, Z+15	; 0x0f
    1c5c:	a5 01       	movw	r20, r10
    1c5e:	94 01       	movw	r18, r8
    1c60:	c5 01       	movw	r24, r10
    1c62:	b4 01       	movw	r22, r8
    1c64:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1c68:	4b 01       	movw	r8, r22
    1c6a:	5c 01       	movw	r10, r24
    1c6c:	a7 01       	movw	r20, r14
    1c6e:	96 01       	movw	r18, r12
    1c70:	c7 01       	movw	r24, r14
    1c72:	b6 01       	movw	r22, r12
    1c74:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1c78:	9b 01       	movw	r18, r22
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	c5 01       	movw	r24, r10
    1c7e:	b4 01       	movw	r22, r8
    1c80:	94 d6       	rcall	.+3368   	; 0x29aa <__addsf3>
    1c82:	0e 94 02 18 	call	0x3004	; 0x3004 <sqrt>
    1c86:	69 83       	std	Y+1, r22	; 0x01
    1c88:	7a 83       	std	Y+2, r23	; 0x02
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c90:	fe 81       	ldd	r31, Y+6	; 0x06
    1c92:	80 84       	ldd	r8, Z+8	; 0x08
    1c94:	91 84       	ldd	r9, Z+9	; 0x09
    1c96:	a2 84       	ldd	r10, Z+10	; 0x0a
    1c98:	b3 84       	ldd	r11, Z+11	; 0x0b
    1c9a:	c4 80       	ldd	r12, Z+4	; 0x04
    1c9c:	d5 80       	ldd	r13, Z+5	; 0x05
    1c9e:	e6 80       	ldd	r14, Z+6	; 0x06
    1ca0:	f7 80       	ldd	r15, Z+7	; 0x07
    1ca2:	a5 01       	movw	r20, r10
    1ca4:	94 01       	movw	r18, r8
    1ca6:	c5 01       	movw	r24, r10
    1ca8:	b4 01       	movw	r22, r8
    1caa:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1cae:	4b 01       	movw	r8, r22
    1cb0:	5c 01       	movw	r10, r24
    1cb2:	a7 01       	movw	r20, r14
    1cb4:	96 01       	movw	r18, r12
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	b6 01       	movw	r22, r12
    1cba:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1cbe:	9b 01       	movw	r18, r22
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	c5 01       	movw	r24, r10
    1cc4:	b4 01       	movw	r22, r8
    1cc6:	71 d6       	rcall	.+3298   	; 0x29aa <__addsf3>
    1cc8:	0e 94 02 18 	call	0x3004	; 0x3004 <sqrt>
    1ccc:	29 81       	ldd	r18, Y+1	; 0x01
    1cce:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd0:	4b 81       	ldd	r20, Y+3	; 0x03
    1cd2:	5c 81       	ldd	r21, Y+4	; 0x04
    1cd4:	f4 d6       	rcall	.+3560   	; 0x2abe <atan2>
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	67 d6       	rcall	.+3278   	; 0x29aa <__addsf3>
    1cdc:	f8 01       	movw	r30, r16
    1cde:	64 83       	std	Z+4, r22	; 0x04
    1ce0:	75 83       	std	Z+5, r23	; 0x05
    1ce2:	86 83       	std	Z+6, r24	; 0x06
    1ce4:	97 83       	std	Z+7, r25	; 0x07
    1ce6:	26 96       	adiw	r28, 0x06	; 6
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	df 90       	pop	r13
    1d00:	cf 90       	pop	r12
    1d02:	bf 90       	pop	r11
    1d04:	af 90       	pop	r10
    1d06:	9f 90       	pop	r9
    1d08:	8f 90       	pop	r8
    1d0a:	7f 90       	pop	r7
    1d0c:	6f 90       	pop	r6
    1d0e:	5f 90       	pop	r5
    1d10:	4f 90       	pop	r4
    1d12:	08 95       	ret

00001d14 <Quaternion_norm>:
    1d14:	4f 92       	push	r4
    1d16:	5f 92       	push	r5
    1d18:	6f 92       	push	r6
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	28 97       	sbiw	r28, 0x08	; 8
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	fc 01       	movw	r30, r24
    1d42:	89 2b       	or	r24, r25
    1d44:	11 f4       	brne	.+4      	; 0x1d4a <Quaternion_norm+0x36>
    1d46:	0e 94 7f 18 	call	0x30fe	; 0x30fe <abort>
    1d4a:	80 80       	ld	r8, Z
    1d4c:	91 80       	ldd	r9, Z+1	; 0x01
    1d4e:	a2 80       	ldd	r10, Z+2	; 0x02
    1d50:	b3 80       	ldd	r11, Z+3	; 0x03
    1d52:	c4 80       	ldd	r12, Z+4	; 0x04
    1d54:	d5 80       	ldd	r13, Z+5	; 0x05
    1d56:	e6 80       	ldd	r14, Z+6	; 0x06
    1d58:	f7 80       	ldd	r15, Z+7	; 0x07
    1d5a:	80 85       	ldd	r24, Z+8	; 0x08
    1d5c:	91 85       	ldd	r25, Z+9	; 0x09
    1d5e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d60:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	af 83       	std	Y+7, r26	; 0x07
    1d68:	b8 87       	std	Y+8, r27	; 0x08
    1d6a:	44 84       	ldd	r4, Z+12	; 0x0c
    1d6c:	55 84       	ldd	r5, Z+13	; 0x0d
    1d6e:	66 84       	ldd	r6, Z+14	; 0x0e
    1d70:	77 84       	ldd	r7, Z+15	; 0x0f
    1d72:	a5 01       	movw	r20, r10
    1d74:	94 01       	movw	r18, r8
    1d76:	c5 01       	movw	r24, r10
    1d78:	b4 01       	movw	r22, r8
    1d7a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1d7e:	69 83       	std	Y+1, r22	; 0x01
    1d80:	7a 83       	std	Y+2, r23	; 0x02
    1d82:	8b 83       	std	Y+3, r24	; 0x03
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	a7 01       	movw	r20, r14
    1d88:	96 01       	movw	r18, r12
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	b6 01       	movw	r22, r12
    1d8e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1d92:	9b 01       	movw	r18, r22
    1d94:	ac 01       	movw	r20, r24
    1d96:	69 81       	ldd	r22, Y+1	; 0x01
    1d98:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	05 d6       	rcall	.+3082   	; 0x29aa <__addsf3>
    1da0:	69 83       	std	Y+1, r22	; 0x01
    1da2:	7a 83       	std	Y+2, r23	; 0x02
    1da4:	8b 83       	std	Y+3, r24	; 0x03
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	2d 81       	ldd	r18, Y+5	; 0x05
    1daa:	3e 81       	ldd	r19, Y+6	; 0x06
    1dac:	4f 81       	ldd	r20, Y+7	; 0x07
    1dae:	58 85       	ldd	r21, Y+8	; 0x08
    1db0:	ca 01       	movw	r24, r20
    1db2:	b9 01       	movw	r22, r18
    1db4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1db8:	9b 01       	movw	r18, r22
    1dba:	ac 01       	movw	r20, r24
    1dbc:	69 81       	ldd	r22, Y+1	; 0x01
    1dbe:	7a 81       	ldd	r23, Y+2	; 0x02
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	f2 d5       	rcall	.+3044   	; 0x29aa <__addsf3>
    1dc6:	69 83       	std	Y+1, r22	; 0x01
    1dc8:	7a 83       	std	Y+2, r23	; 0x02
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	a5 01       	movw	r20, r10
    1dd0:	94 01       	movw	r18, r8
    1dd2:	c5 01       	movw	r24, r10
    1dd4:	b4 01       	movw	r22, r8
    1dd6:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1dda:	4b 01       	movw	r8, r22
    1ddc:	5c 01       	movw	r10, r24
    1dde:	a7 01       	movw	r20, r14
    1de0:	96 01       	movw	r18, r12
    1de2:	c7 01       	movw	r24, r14
    1de4:	b6 01       	movw	r22, r12
    1de6:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1dea:	9b 01       	movw	r18, r22
    1dec:	ac 01       	movw	r20, r24
    1dee:	c5 01       	movw	r24, r10
    1df0:	b4 01       	movw	r22, r8
    1df2:	db d5       	rcall	.+2998   	; 0x29aa <__addsf3>
    1df4:	6b 01       	movw	r12, r22
    1df6:	7c 01       	movw	r14, r24
    1df8:	2d 81       	ldd	r18, Y+5	; 0x05
    1dfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1dfc:	4f 81       	ldd	r20, Y+7	; 0x07
    1dfe:	58 85       	ldd	r21, Y+8	; 0x08
    1e00:	ca 01       	movw	r24, r20
    1e02:	b9 01       	movw	r22, r18
    1e04:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1e08:	9b 01       	movw	r18, r22
    1e0a:	ac 01       	movw	r20, r24
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	b6 01       	movw	r22, r12
    1e10:	cc d5       	rcall	.+2968   	; 0x29aa <__addsf3>
    1e12:	6b 01       	movw	r12, r22
    1e14:	7c 01       	movw	r14, r24
    1e16:	a3 01       	movw	r20, r6
    1e18:	92 01       	movw	r18, r4
    1e1a:	c3 01       	movw	r24, r6
    1e1c:	b2 01       	movw	r22, r4
    1e1e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <__mulsf3>
    1e22:	9b 01       	movw	r18, r22
    1e24:	ac 01       	movw	r20, r24
    1e26:	c7 01       	movw	r24, r14
    1e28:	b6 01       	movw	r22, r12
    1e2a:	bf d5       	rcall	.+2942   	; 0x29aa <__addsf3>
    1e2c:	0e 94 02 18 	call	0x3004	; 0x3004 <sqrt>
    1e30:	28 96       	adiw	r28, 0x08	; 8
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	df 90       	pop	r13
    1e46:	cf 90       	pop	r12
    1e48:	bf 90       	pop	r11
    1e4a:	af 90       	pop	r10
    1e4c:	9f 90       	pop	r9
    1e4e:	8f 90       	pop	r8
    1e50:	7f 90       	pop	r7
    1e52:	6f 90       	pop	r6
    1e54:	5f 90       	pop	r5
    1e56:	4f 90       	pop	r4
    1e58:	08 95       	ret

00001e5a <Quaternion_normalize>:
    1e5a:	4f 92       	push	r4
    1e5c:	5f 92       	push	r5
    1e5e:	6f 92       	push	r6
    1e60:	7f 92       	push	r7
    1e62:	8f 92       	push	r8
    1e64:	9f 92       	push	r9
    1e66:	af 92       	push	r10
    1e68:	bf 92       	push	r11
    1e6a:	cf 92       	push	r12
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <Quaternion_normalize+0x22>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <Quaternion_normalize+0x24>
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <Quaternion_normalize+0x26>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	8c 01       	movw	r16, r24
    1e86:	7e 83       	std	Y+6, r23	; 0x06
    1e88:	6d 83       	std	Y+5, r22	; 0x05
    1e8a:	67 2b       	or	r22, r23
    1e8c:	11 f4       	brne	.+4      	; 0x1e92 <Quaternion_normalize+0x38>
    1e8e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <abort>
    1e92:	40 df       	rcall	.-384    	; 0x1d14 <Quaternion_norm>
    1e94:	69 83       	std	Y+1, r22	; 0x01
    1e96:	7a 83       	std	Y+2, r23	; 0x02
    1e98:	8b 83       	std	Y+3, r24	; 0x03
    1e9a:	9c 83       	std	Y+4, r25	; 0x04
    1e9c:	9b 01       	movw	r18, r22
    1e9e:	ac 01       	movw	r20, r24
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	64 85       	ldd	r22, Z+12	; 0x0c
    1ea4:	75 85       	ldd	r23, Z+13	; 0x0d
    1ea6:	86 85       	ldd	r24, Z+14	; 0x0e
    1ea8:	97 85       	ldd	r25, Z+15	; 0x0f
    1eaa:	63 d6       	rcall	.+3270   	; 0x2b72 <__divsf3>
    1eac:	6b 01       	movw	r12, r22
    1eae:	7c 01       	movw	r14, r24
    1eb0:	29 81       	ldd	r18, Y+1	; 0x01
    1eb2:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb4:	4b 81       	ldd	r20, Y+3	; 0x03
    1eb6:	5c 81       	ldd	r21, Y+4	; 0x04
    1eb8:	f8 01       	movw	r30, r16
    1eba:	60 85       	ldd	r22, Z+8	; 0x08
    1ebc:	71 85       	ldd	r23, Z+9	; 0x09
    1ebe:	82 85       	ldd	r24, Z+10	; 0x0a
    1ec0:	93 85       	ldd	r25, Z+11	; 0x0b
    1ec2:	57 d6       	rcall	.+3246   	; 0x2b72 <__divsf3>
    1ec4:	4b 01       	movw	r8, r22
    1ec6:	5c 01       	movw	r10, r24
    1ec8:	29 81       	ldd	r18, Y+1	; 0x01
    1eca:	3a 81       	ldd	r19, Y+2	; 0x02
    1ecc:	4b 81       	ldd	r20, Y+3	; 0x03
    1ece:	5c 81       	ldd	r21, Y+4	; 0x04
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	64 81       	ldd	r22, Z+4	; 0x04
    1ed4:	75 81       	ldd	r23, Z+5	; 0x05
    1ed6:	86 81       	ldd	r24, Z+6	; 0x06
    1ed8:	97 81       	ldd	r25, Z+7	; 0x07
    1eda:	4b d6       	rcall	.+3222   	; 0x2b72 <__divsf3>
    1edc:	2b 01       	movw	r4, r22
    1ede:	3c 01       	movw	r6, r24
    1ee0:	29 81       	ldd	r18, Y+1	; 0x01
    1ee2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ee6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ee8:	f8 01       	movw	r30, r16
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	3f d6       	rcall	.+3198   	; 0x2b72 <__divsf3>
    1ef4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ef6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ef8:	60 83       	st	Z, r22
    1efa:	71 83       	std	Z+1, r23	; 0x01
    1efc:	82 83       	std	Z+2, r24	; 0x02
    1efe:	93 83       	std	Z+3, r25	; 0x03
    1f00:	44 82       	std	Z+4, r4	; 0x04
    1f02:	55 82       	std	Z+5, r5	; 0x05
    1f04:	66 82       	std	Z+6, r6	; 0x06
    1f06:	77 82       	std	Z+7, r7	; 0x07
    1f08:	80 86       	std	Z+8, r8	; 0x08
    1f0a:	91 86       	std	Z+9, r9	; 0x09
    1f0c:	a2 86       	std	Z+10, r10	; 0x0a
    1f0e:	b3 86       	std	Z+11, r11	; 0x0b
    1f10:	c4 86       	std	Z+12, r12	; 0x0c
    1f12:	d5 86       	std	Z+13, r13	; 0x0d
    1f14:	e6 86       	std	Z+14, r14	; 0x0e
    1f16:	f7 86       	std	Z+15, r15	; 0x0f
    1f18:	26 96       	adiw	r28, 0x06	; 6
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	9f 90       	pop	r9
    1f3a:	8f 90       	pop	r8
    1f3c:	7f 90       	pop	r7
    1f3e:	6f 90       	pop	r6
    1f40:	5f 90       	pop	r5
    1f42:	4f 90       	pop	r4
    1f44:	08 95       	ret

00001f46 <Quaternion_multiply>:
    1f46:	4f 92       	push	r4
    1f48:	5f 92       	push	r5
    1f4a:	6f 92       	push	r6
    1f4c:	7f 92       	push	r7
    1f4e:	8f 92       	push	r8
    1f50:	9f 92       	push	r9
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	6a 97       	sbiw	r28, 0x1a	; 26
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	dc 01       	movw	r26, r24
    1f74:	fb 01       	movw	r30, r22
    1f76:	5a 8f       	std	Y+26, r21	; 0x1a
    1f78:	49 8f       	std	Y+25, r20	; 0x19
    1f7a:	45 2b       	or	r20, r21
    1f7c:	11 f4       	brne	.+4      	; 0x1f82 <Quaternion_multiply+0x3c>
    1f7e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <abort>
    1f82:	cd 90       	ld	r12, X+
    1f84:	dd 90       	ld	r13, X+
    1f86:	ed 90       	ld	r14, X+
    1f88:	fc 90       	ld	r15, X
    1f8a:	13 97       	sbiw	r26, 0x03	; 3
    1f8c:	20 81       	ld	r18, Z
    1f8e:	31 81       	ldd	r19, Z+1	; 0x01
    1f90:	42 81       	ldd	r20, Z+2	; 0x02
    1f92:	53 81       	ldd	r21, Z+3	; 0x03
    1f94:	29 83       	std	Y+1, r18	; 0x01
    1f96:	3a 83       	std	Y+2, r19	; 0x02
    1f98:	4b 83       	std	Y+3, r20	; 0x03
    1f9a:	5c 83       	std	Y+4, r21	; 0x04
    1f9c:	14 96       	adiw	r26, 0x04	; 4
    1f9e:	2d 91       	ld	r18, X+
    1fa0:	3d 91       	ld	r19, X+
    1fa2:	4d 91       	ld	r20, X+
    1fa4:	5c 91       	ld	r21, X
    1fa6:	17 97       	sbiw	r26, 0x07	; 7
    1fa8:	2d 83       	std	Y+5, r18	; 0x05
    1faa:	3e 83       	std	Y+6, r19	; 0x06
    1fac:	4f 83       	std	Y+7, r20	; 0x07
    1fae:	58 87       	std	Y+8, r21	; 0x08
    1fb0:	24 81       	ldd	r18, Z+4	; 0x04
    1fb2:	35 81       	ldd	r19, Z+5	; 0x05
    1fb4:	46 81       	ldd	r20, Z+6	; 0x06
    1fb6:	57 81       	ldd	r21, Z+7	; 0x07
    1fb8:	29 87       	std	Y+9, r18	; 0x09
    1fba:	3a 87       	std	Y+10, r19	; 0x0a
    1fbc:	4b 87       	std	Y+11, r20	; 0x0b
    1fbe:	5c 87       	std	Y+12, r21	; 0x0c
    1fc0:	18 96       	adiw	r26, 0x08	; 8
    1fc2:	2d 91       	ld	r18, X+
    1fc4:	3d 91       	ld	r19, X+
    1fc6:	4d 91       	ld	r20, X+
    1fc8:	5c 91       	ld	r21, X
    1fca:	1b 97       	sbiw	r26, 0x0b	; 11
    1fcc:	2d 87       	std	Y+13, r18	; 0x0d
    1fce:	3e 87       	std	Y+14, r19	; 0x0e
    1fd0:	4f 87       	std	Y+15, r20	; 0x0f
    1fd2:	58 8b       	std	Y+16, r21	; 0x10
    1fd4:	20 85       	ldd	r18, Z+8	; 0x08
    1fd6:	31 85       	ldd	r19, Z+9	; 0x09
    1fd8:	42 85       	ldd	r20, Z+10	; 0x0a
    1fda:	53 85       	ldd	r21, Z+11	; 0x0b
    1fdc:	29 8b       	std	Y+17, r18	; 0x11
    1fde:	3a 8b       	std	Y+18, r19	; 0x12
    1fe0:	4b 8b       	std	Y+19, r20	; 0x13
    1fe2:	5c 8b       	std	Y+20, r21	; 0x14
    1fe4:	1c 96       	adiw	r26, 0x0c	; 12
    1fe6:	2d 91       	ld	r18, X+
    1fe8:	3d 91       	ld	r19, X+
    1fea:	4d 91       	ld	r20, X+
    1fec:	5c 91       	ld	r21, X
    1fee:	1f 97       	sbiw	r26, 0x0f	; 15
    1ff0:	2d 8b       	std	Y+21, r18	; 0x15
    1ff2:	3e 8b       	std	Y+22, r19	; 0x16
    1ff4:	4f 8b       	std	Y+23, r20	; 0x17
    1ff6:	58 8f       	std	Y+24, r21	; 0x18
    1ff8:	84 84       	ldd	r8, Z+12	; 0x0c
    1ffa:	95 84       	ldd	r9, Z+13	; 0x0d
    1ffc:	a6 84       	ldd	r10, Z+14	; 0x0e
    1ffe:	b7 84       	ldd	r11, Z+15	; 0x0f
    2000:	29 81       	ldd	r18, Y+1	; 0x01
    2002:	3a 81       	ldd	r19, Y+2	; 0x02
    2004:	4b 81       	ldd	r20, Y+3	; 0x03
    2006:	5c 81       	ldd	r21, Y+4	; 0x04
    2008:	c7 01       	movw	r24, r14
    200a:	b6 01       	movw	r22, r12
    200c:	8e d7       	rcall	.+3868   	; 0x2f2a <__mulsf3>
    200e:	2b 01       	movw	r4, r22
    2010:	3c 01       	movw	r6, r24
    2012:	29 85       	ldd	r18, Y+9	; 0x09
    2014:	3a 85       	ldd	r19, Y+10	; 0x0a
    2016:	4b 85       	ldd	r20, Y+11	; 0x0b
    2018:	5c 85       	ldd	r21, Y+12	; 0x0c
    201a:	6d 81       	ldd	r22, Y+5	; 0x05
    201c:	7e 81       	ldd	r23, Y+6	; 0x06
    201e:	8f 81       	ldd	r24, Y+7	; 0x07
    2020:	98 85       	ldd	r25, Y+8	; 0x08
    2022:	83 d7       	rcall	.+3846   	; 0x2f2a <__mulsf3>
    2024:	9b 01       	movw	r18, r22
    2026:	ac 01       	movw	r20, r24
    2028:	c3 01       	movw	r24, r6
    202a:	b2 01       	movw	r22, r4
    202c:	bd d4       	rcall	.+2426   	; 0x29a8 <__subsf3>
    202e:	2b 01       	movw	r4, r22
    2030:	3c 01       	movw	r6, r24
    2032:	29 89       	ldd	r18, Y+17	; 0x11
    2034:	3a 89       	ldd	r19, Y+18	; 0x12
    2036:	4b 89       	ldd	r20, Y+19	; 0x13
    2038:	5c 89       	ldd	r21, Y+20	; 0x14
    203a:	6d 85       	ldd	r22, Y+13	; 0x0d
    203c:	7e 85       	ldd	r23, Y+14	; 0x0e
    203e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2040:	98 89       	ldd	r25, Y+16	; 0x10
    2042:	73 d7       	rcall	.+3814   	; 0x2f2a <__mulsf3>
    2044:	9b 01       	movw	r18, r22
    2046:	ac 01       	movw	r20, r24
    2048:	c3 01       	movw	r24, r6
    204a:	b2 01       	movw	r22, r4
    204c:	ad d4       	rcall	.+2394   	; 0x29a8 <__subsf3>
    204e:	2b 01       	movw	r4, r22
    2050:	3c 01       	movw	r6, r24
    2052:	a5 01       	movw	r20, r10
    2054:	94 01       	movw	r18, r8
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	65 d7       	rcall	.+3786   	; 0x2f2a <__mulsf3>
    2060:	9b 01       	movw	r18, r22
    2062:	ac 01       	movw	r20, r24
    2064:	c3 01       	movw	r24, r6
    2066:	b2 01       	movw	r22, r4
    2068:	9f d4       	rcall	.+2366   	; 0x29a8 <__subsf3>
    206a:	e9 8d       	ldd	r30, Y+25	; 0x19
    206c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    206e:	60 83       	st	Z, r22
    2070:	71 83       	std	Z+1, r23	; 0x01
    2072:	82 83       	std	Z+2, r24	; 0x02
    2074:	93 83       	std	Z+3, r25	; 0x03
    2076:	2d 81       	ldd	r18, Y+5	; 0x05
    2078:	3e 81       	ldd	r19, Y+6	; 0x06
    207a:	4f 81       	ldd	r20, Y+7	; 0x07
    207c:	58 85       	ldd	r21, Y+8	; 0x08
    207e:	69 81       	ldd	r22, Y+1	; 0x01
    2080:	7a 81       	ldd	r23, Y+2	; 0x02
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	51 d7       	rcall	.+3746   	; 0x2f2a <__mulsf3>
    2088:	2b 01       	movw	r4, r22
    208a:	3c 01       	movw	r6, r24
    208c:	29 85       	ldd	r18, Y+9	; 0x09
    208e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2090:	4b 85       	ldd	r20, Y+11	; 0x0b
    2092:	5c 85       	ldd	r21, Y+12	; 0x0c
    2094:	c7 01       	movw	r24, r14
    2096:	b6 01       	movw	r22, r12
    2098:	48 d7       	rcall	.+3728   	; 0x2f2a <__mulsf3>
    209a:	9b 01       	movw	r18, r22
    209c:	ac 01       	movw	r20, r24
    209e:	c3 01       	movw	r24, r6
    20a0:	b2 01       	movw	r22, r4
    20a2:	83 d4       	rcall	.+2310   	; 0x29aa <__addsf3>
    20a4:	2b 01       	movw	r4, r22
    20a6:	3c 01       	movw	r6, r24
    20a8:	a5 01       	movw	r20, r10
    20aa:	94 01       	movw	r18, r8
    20ac:	6d 85       	ldd	r22, Y+13	; 0x0d
    20ae:	7e 85       	ldd	r23, Y+14	; 0x0e
    20b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b2:	98 89       	ldd	r25, Y+16	; 0x10
    20b4:	3a d7       	rcall	.+3700   	; 0x2f2a <__mulsf3>
    20b6:	9b 01       	movw	r18, r22
    20b8:	ac 01       	movw	r20, r24
    20ba:	c3 01       	movw	r24, r6
    20bc:	b2 01       	movw	r22, r4
    20be:	75 d4       	rcall	.+2282   	; 0x29aa <__addsf3>
    20c0:	2b 01       	movw	r4, r22
    20c2:	3c 01       	movw	r6, r24
    20c4:	2d 89       	ldd	r18, Y+21	; 0x15
    20c6:	3e 89       	ldd	r19, Y+22	; 0x16
    20c8:	4f 89       	ldd	r20, Y+23	; 0x17
    20ca:	58 8d       	ldd	r21, Y+24	; 0x18
    20cc:	69 89       	ldd	r22, Y+17	; 0x11
    20ce:	7a 89       	ldd	r23, Y+18	; 0x12
    20d0:	8b 89       	ldd	r24, Y+19	; 0x13
    20d2:	9c 89       	ldd	r25, Y+20	; 0x14
    20d4:	2a d7       	rcall	.+3668   	; 0x2f2a <__mulsf3>
    20d6:	9b 01       	movw	r18, r22
    20d8:	ac 01       	movw	r20, r24
    20da:	c3 01       	movw	r24, r6
    20dc:	b2 01       	movw	r22, r4
    20de:	64 d4       	rcall	.+2248   	; 0x29a8 <__subsf3>
    20e0:	e9 8d       	ldd	r30, Y+25	; 0x19
    20e2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    20e4:	64 83       	std	Z+4, r22	; 0x04
    20e6:	75 83       	std	Z+5, r23	; 0x05
    20e8:	86 83       	std	Z+6, r24	; 0x06
    20ea:	97 83       	std	Z+7, r25	; 0x07
    20ec:	29 89       	ldd	r18, Y+17	; 0x11
    20ee:	3a 89       	ldd	r19, Y+18	; 0x12
    20f0:	4b 89       	ldd	r20, Y+19	; 0x13
    20f2:	5c 89       	ldd	r21, Y+20	; 0x14
    20f4:	c7 01       	movw	r24, r14
    20f6:	b6 01       	movw	r22, r12
    20f8:	18 d7       	rcall	.+3632   	; 0x2f2a <__mulsf3>
    20fa:	2b 01       	movw	r4, r22
    20fc:	3c 01       	movw	r6, r24
    20fe:	a5 01       	movw	r20, r10
    2100:	94 01       	movw	r18, r8
    2102:	6d 81       	ldd	r22, Y+5	; 0x05
    2104:	7e 81       	ldd	r23, Y+6	; 0x06
    2106:	8f 81       	ldd	r24, Y+7	; 0x07
    2108:	98 85       	ldd	r25, Y+8	; 0x08
    210a:	0f d7       	rcall	.+3614   	; 0x2f2a <__mulsf3>
    210c:	9b 01       	movw	r18, r22
    210e:	ac 01       	movw	r20, r24
    2110:	c3 01       	movw	r24, r6
    2112:	b2 01       	movw	r22, r4
    2114:	49 d4       	rcall	.+2194   	; 0x29a8 <__subsf3>
    2116:	2b 01       	movw	r4, r22
    2118:	3c 01       	movw	r6, r24
    211a:	2d 85       	ldd	r18, Y+13	; 0x0d
    211c:	3e 85       	ldd	r19, Y+14	; 0x0e
    211e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2120:	58 89       	ldd	r21, Y+16	; 0x10
    2122:	69 81       	ldd	r22, Y+1	; 0x01
    2124:	7a 81       	ldd	r23, Y+2	; 0x02
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	ff d6       	rcall	.+3582   	; 0x2f2a <__mulsf3>
    212c:	9b 01       	movw	r18, r22
    212e:	ac 01       	movw	r20, r24
    2130:	c3 01       	movw	r24, r6
    2132:	b2 01       	movw	r22, r4
    2134:	3a d4       	rcall	.+2164   	; 0x29aa <__addsf3>
    2136:	2b 01       	movw	r4, r22
    2138:	3c 01       	movw	r6, r24
    213a:	2d 89       	ldd	r18, Y+21	; 0x15
    213c:	3e 89       	ldd	r19, Y+22	; 0x16
    213e:	4f 89       	ldd	r20, Y+23	; 0x17
    2140:	58 8d       	ldd	r21, Y+24	; 0x18
    2142:	69 85       	ldd	r22, Y+9	; 0x09
    2144:	7a 85       	ldd	r23, Y+10	; 0x0a
    2146:	8b 85       	ldd	r24, Y+11	; 0x0b
    2148:	9c 85       	ldd	r25, Y+12	; 0x0c
    214a:	ef d6       	rcall	.+3550   	; 0x2f2a <__mulsf3>
    214c:	9b 01       	movw	r18, r22
    214e:	ac 01       	movw	r20, r24
    2150:	c3 01       	movw	r24, r6
    2152:	b2 01       	movw	r22, r4
    2154:	2a d4       	rcall	.+2132   	; 0x29aa <__addsf3>
    2156:	e9 8d       	ldd	r30, Y+25	; 0x19
    2158:	fa 8d       	ldd	r31, Y+26	; 0x1a
    215a:	60 87       	std	Z+8, r22	; 0x08
    215c:	71 87       	std	Z+9, r23	; 0x09
    215e:	82 87       	std	Z+10, r24	; 0x0a
    2160:	93 87       	std	Z+11, r25	; 0x0b
    2162:	a5 01       	movw	r20, r10
    2164:	94 01       	movw	r18, r8
    2166:	c7 01       	movw	r24, r14
    2168:	b6 01       	movw	r22, r12
    216a:	df d6       	rcall	.+3518   	; 0x2f2a <__mulsf3>
    216c:	6b 01       	movw	r12, r22
    216e:	7c 01       	movw	r14, r24
    2170:	29 89       	ldd	r18, Y+17	; 0x11
    2172:	3a 89       	ldd	r19, Y+18	; 0x12
    2174:	4b 89       	ldd	r20, Y+19	; 0x13
    2176:	5c 89       	ldd	r21, Y+20	; 0x14
    2178:	6d 81       	ldd	r22, Y+5	; 0x05
    217a:	7e 81       	ldd	r23, Y+6	; 0x06
    217c:	8f 81       	ldd	r24, Y+7	; 0x07
    217e:	98 85       	ldd	r25, Y+8	; 0x08
    2180:	d4 d6       	rcall	.+3496   	; 0x2f2a <__mulsf3>
    2182:	9b 01       	movw	r18, r22
    2184:	ac 01       	movw	r20, r24
    2186:	c7 01       	movw	r24, r14
    2188:	b6 01       	movw	r22, r12
    218a:	0f d4       	rcall	.+2078   	; 0x29aa <__addsf3>
    218c:	6b 01       	movw	r12, r22
    218e:	7c 01       	movw	r14, r24
    2190:	2d 85       	ldd	r18, Y+13	; 0x0d
    2192:	3e 85       	ldd	r19, Y+14	; 0x0e
    2194:	4f 85       	ldd	r20, Y+15	; 0x0f
    2196:	58 89       	ldd	r21, Y+16	; 0x10
    2198:	69 85       	ldd	r22, Y+9	; 0x09
    219a:	7a 85       	ldd	r23, Y+10	; 0x0a
    219c:	8b 85       	ldd	r24, Y+11	; 0x0b
    219e:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a0:	c4 d6       	rcall	.+3464   	; 0x2f2a <__mulsf3>
    21a2:	9b 01       	movw	r18, r22
    21a4:	ac 01       	movw	r20, r24
    21a6:	c7 01       	movw	r24, r14
    21a8:	b6 01       	movw	r22, r12
    21aa:	fe d3       	rcall	.+2044   	; 0x29a8 <__subsf3>
    21ac:	6b 01       	movw	r12, r22
    21ae:	7c 01       	movw	r14, r24
    21b0:	2d 89       	ldd	r18, Y+21	; 0x15
    21b2:	3e 89       	ldd	r19, Y+22	; 0x16
    21b4:	4f 89       	ldd	r20, Y+23	; 0x17
    21b6:	58 8d       	ldd	r21, Y+24	; 0x18
    21b8:	69 81       	ldd	r22, Y+1	; 0x01
    21ba:	7a 81       	ldd	r23, Y+2	; 0x02
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	b4 d6       	rcall	.+3432   	; 0x2f2a <__mulsf3>
    21c2:	9b 01       	movw	r18, r22
    21c4:	ac 01       	movw	r20, r24
    21c6:	c7 01       	movw	r24, r14
    21c8:	b6 01       	movw	r22, r12
    21ca:	ef d3       	rcall	.+2014   	; 0x29aa <__addsf3>
    21cc:	e9 8d       	ldd	r30, Y+25	; 0x19
    21ce:	fa 8d       	ldd	r31, Y+26	; 0x1a
    21d0:	64 87       	std	Z+12, r22	; 0x0c
    21d2:	75 87       	std	Z+13, r23	; 0x0d
    21d4:	86 87       	std	Z+14, r24	; 0x0e
    21d6:	97 87       	std	Z+15, r25	; 0x0f
    21d8:	6a 96       	adiw	r28, 0x1a	; 26
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	df 90       	pop	r13
    21ee:	cf 90       	pop	r12
    21f0:	bf 90       	pop	r11
    21f2:	af 90       	pop	r10
    21f4:	9f 90       	pop	r9
    21f6:	8f 90       	pop	r8
    21f8:	7f 90       	pop	r7
    21fa:	6f 90       	pop	r6
    21fc:	5f 90       	pop	r5
    21fe:	4f 90       	pop	r4
    2200:	08 95       	ret

00002202 <Quaternion_rotate>:
    2202:	2f 92       	push	r2
    2204:	3f 92       	push	r3
    2206:	4f 92       	push	r4
    2208:	5f 92       	push	r5
    220a:	6f 92       	push	r6
    220c:	7f 92       	push	r7
    220e:	8f 92       	push	r8
    2210:	9f 92       	push	r9
    2212:	af 92       	push	r10
    2214:	bf 92       	push	r11
    2216:	cf 92       	push	r12
    2218:	df 92       	push	r13
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	e0 97       	sbiw	r28, 0x30	; 48
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	8b 01       	movw	r16, r22
    223c:	1a 01       	movw	r2, r20
    223e:	45 2b       	or	r20, r21
    2240:	09 f4       	brne	.+2      	; 0x2244 <Quaternion_rotate+0x42>
    2242:	5d d7       	rcall	.+3770   	; 0x30fe <abort>
    2244:	a9 81       	ldd	r26, Y+1	; 0x01
    2246:	ba 81       	ldd	r27, Y+2	; 0x02
    2248:	cd 90       	ld	r12, X+
    224a:	dd 90       	ld	r13, X+
    224c:	ed 90       	ld	r14, X+
    224e:	fc 90       	ld	r15, X
    2250:	a7 01       	movw	r20, r14
    2252:	96 01       	movw	r18, r12
    2254:	c7 01       	movw	r24, r14
    2256:	b6 01       	movw	r22, r12
    2258:	68 d6       	rcall	.+3280   	; 0x2f2a <__mulsf3>
    225a:	69 8b       	std	Y+17, r22	; 0x11
    225c:	7a 8b       	std	Y+18, r23	; 0x12
    225e:	8b 8b       	std	Y+19, r24	; 0x13
    2260:	9c 8b       	std	Y+20, r25	; 0x14
    2262:	a9 81       	ldd	r26, Y+1	; 0x01
    2264:	ba 81       	ldd	r27, Y+2	; 0x02
    2266:	14 96       	adiw	r26, 0x04	; 4
    2268:	8d 91       	ld	r24, X+
    226a:	9d 91       	ld	r25, X+
    226c:	0d 90       	ld	r0, X+
    226e:	bc 91       	ld	r27, X
    2270:	a0 2d       	mov	r26, r0
    2272:	8d 87       	std	Y+13, r24	; 0x0d
    2274:	9e 87       	std	Y+14, r25	; 0x0e
    2276:	af 87       	std	Y+15, r26	; 0x0f
    2278:	b8 8b       	std	Y+16, r27	; 0x10
    227a:	9c 01       	movw	r18, r24
    227c:	ad 01       	movw	r20, r26
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	53 d6       	rcall	.+3238   	; 0x2f2a <__mulsf3>
    2284:	6d 8b       	std	Y+21, r22	; 0x15
    2286:	7e 8b       	std	Y+22, r23	; 0x16
    2288:	8f 8b       	std	Y+23, r24	; 0x17
    228a:	98 8f       	std	Y+24, r25	; 0x18
    228c:	e9 81       	ldd	r30, Y+1	; 0x01
    228e:	fa 81       	ldd	r31, Y+2	; 0x02
    2290:	80 84       	ldd	r8, Z+8	; 0x08
    2292:	91 84       	ldd	r9, Z+9	; 0x09
    2294:	a2 84       	ldd	r10, Z+10	; 0x0a
    2296:	b3 84       	ldd	r11, Z+11	; 0x0b
    2298:	a5 01       	movw	r20, r10
    229a:	94 01       	movw	r18, r8
    229c:	c5 01       	movw	r24, r10
    229e:	b4 01       	movw	r22, r8
    22a0:	44 d6       	rcall	.+3208   	; 0x2f2a <__mulsf3>
    22a2:	69 8f       	std	Y+25, r22	; 0x19
    22a4:	7a 8f       	std	Y+26, r23	; 0x1a
    22a6:	8b 8f       	std	Y+27, r24	; 0x1b
    22a8:	9c 8f       	std	Y+28, r25	; 0x1c
    22aa:	a9 81       	ldd	r26, Y+1	; 0x01
    22ac:	ba 81       	ldd	r27, Y+2	; 0x02
    22ae:	1c 96       	adiw	r26, 0x0c	; 12
    22b0:	4d 90       	ld	r4, X+
    22b2:	5d 90       	ld	r5, X+
    22b4:	6d 90       	ld	r6, X+
    22b6:	7c 90       	ld	r7, X
    22b8:	1f 97       	sbiw	r26, 0x0f	; 15
    22ba:	a3 01       	movw	r20, r6
    22bc:	92 01       	movw	r18, r4
    22be:	c3 01       	movw	r24, r6
    22c0:	b2 01       	movw	r22, r4
    22c2:	33 d6       	rcall	.+3174   	; 0x2f2a <__mulsf3>
    22c4:	6d 8f       	std	Y+29, r22	; 0x1d
    22c6:	7e 8f       	std	Y+30, r23	; 0x1e
    22c8:	8f 8f       	std	Y+31, r24	; 0x1f
    22ca:	98 a3       	std	Y+32, r25	; 0x20
    22cc:	d8 01       	movw	r26, r16
    22ce:	8d 91       	ld	r24, X+
    22d0:	9d 91       	ld	r25, X+
    22d2:	0d 90       	ld	r0, X+
    22d4:	bc 91       	ld	r27, X
    22d6:	a0 2d       	mov	r26, r0
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	ab 83       	std	Y+3, r26	; 0x03
    22de:	bc 83       	std	Y+4, r27	; 0x04
    22e0:	a5 01       	movw	r20, r10
    22e2:	94 01       	movw	r18, r8
    22e4:	c7 01       	movw	r24, r14
    22e6:	b6 01       	movw	r22, r12
    22e8:	20 d6       	rcall	.+3136   	; 0x2f2a <__mulsf3>
    22ea:	9b 01       	movw	r18, r22
    22ec:	ac 01       	movw	r20, r24
    22ee:	5d d3       	rcall	.+1722   	; 0x29aa <__addsf3>
    22f0:	69 a3       	std	Y+33, r22	; 0x21
    22f2:	7a a3       	std	Y+34, r23	; 0x22
    22f4:	8b a3       	std	Y+35, r24	; 0x23
    22f6:	9c a3       	std	Y+36, r25	; 0x24
    22f8:	d8 01       	movw	r26, r16
    22fa:	18 96       	adiw	r26, 0x08	; 8
    22fc:	8d 91       	ld	r24, X+
    22fe:	9d 91       	ld	r25, X+
    2300:	0d 90       	ld	r0, X+
    2302:	bc 91       	ld	r27, X
    2304:	a0 2d       	mov	r26, r0
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	af 83       	std	Y+7, r26	; 0x07
    230c:	b8 87       	std	Y+8, r27	; 0x08
    230e:	a3 01       	movw	r20, r6
    2310:	92 01       	movw	r18, r4
    2312:	c7 01       	movw	r24, r14
    2314:	b6 01       	movw	r22, r12
    2316:	09 d6       	rcall	.+3090   	; 0x2f2a <__mulsf3>
    2318:	9b 01       	movw	r18, r22
    231a:	ac 01       	movw	r20, r24
    231c:	46 d3       	rcall	.+1676   	; 0x29aa <__addsf3>
    231e:	6d a3       	std	Y+37, r22	; 0x25
    2320:	7e a3       	std	Y+38, r23	; 0x26
    2322:	8f a3       	std	Y+39, r24	; 0x27
    2324:	98 a7       	std	Y+40, r25	; 0x28
    2326:	d8 01       	movw	r26, r16
    2328:	14 96       	adiw	r26, 0x04	; 4
    232a:	8d 91       	ld	r24, X+
    232c:	9d 91       	ld	r25, X+
    232e:	0d 90       	ld	r0, X+
    2330:	bc 91       	ld	r27, X
    2332:	a0 2d       	mov	r26, r0
    2334:	89 87       	std	Y+9, r24	; 0x09
    2336:	9a 87       	std	Y+10, r25	; 0x0a
    2338:	ab 87       	std	Y+11, r26	; 0x0b
    233a:	bc 87       	std	Y+12, r27	; 0x0c
    233c:	a5 01       	movw	r20, r10
    233e:	94 01       	movw	r18, r8
    2340:	6d 85       	ldd	r22, Y+13	; 0x0d
    2342:	7e 85       	ldd	r23, Y+14	; 0x0e
    2344:	8f 85       	ldd	r24, Y+15	; 0x0f
    2346:	98 89       	ldd	r25, Y+16	; 0x10
    2348:	f0 d5       	rcall	.+3040   	; 0x2f2a <__mulsf3>
    234a:	9b 01       	movw	r18, r22
    234c:	ac 01       	movw	r20, r24
    234e:	2d d3       	rcall	.+1626   	; 0x29aa <__addsf3>
    2350:	69 a7       	std	Y+41, r22	; 0x29
    2352:	7a a7       	std	Y+42, r23	; 0x2a
    2354:	8b a7       	std	Y+43, r24	; 0x2b
    2356:	9c a7       	std	Y+44, r25	; 0x2c
    2358:	a3 01       	movw	r20, r6
    235a:	92 01       	movw	r18, r4
    235c:	6d 85       	ldd	r22, Y+13	; 0x0d
    235e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2360:	8f 85       	ldd	r24, Y+15	; 0x0f
    2362:	98 89       	ldd	r25, Y+16	; 0x10
    2364:	e2 d5       	rcall	.+3012   	; 0x2f2a <__mulsf3>
    2366:	9b 01       	movw	r18, r22
    2368:	ac 01       	movw	r20, r24
    236a:	1f d3       	rcall	.+1598   	; 0x29aa <__addsf3>
    236c:	6d a7       	std	Y+45, r22	; 0x2d
    236e:	7e a7       	std	Y+46, r23	; 0x2e
    2370:	8f a7       	std	Y+47, r24	; 0x2f
    2372:	98 ab       	std	Y+48, r25	; 0x30
    2374:	a3 01       	movw	r20, r6
    2376:	92 01       	movw	r18, r4
    2378:	c5 01       	movw	r24, r10
    237a:	b4 01       	movw	r22, r8
    237c:	d6 d5       	rcall	.+2988   	; 0x2f2a <__mulsf3>
    237e:	9b 01       	movw	r18, r22
    2380:	ac 01       	movw	r20, r24
    2382:	13 d3       	rcall	.+1574   	; 0x29aa <__addsf3>
    2384:	4b 01       	movw	r8, r22
    2386:	5c 01       	movw	r10, r24
    2388:	2d 85       	ldd	r18, Y+13	; 0x0d
    238a:	3e 85       	ldd	r19, Y+14	; 0x0e
    238c:	4f 85       	ldd	r20, Y+15	; 0x0f
    238e:	58 89       	ldd	r21, Y+16	; 0x10
    2390:	c7 01       	movw	r24, r14
    2392:	b6 01       	movw	r22, r12
    2394:	ca d5       	rcall	.+2964   	; 0x2f2a <__mulsf3>
    2396:	9b 01       	movw	r18, r22
    2398:	ac 01       	movw	r20, r24
    239a:	07 d3       	rcall	.+1550   	; 0x29aa <__addsf3>
    239c:	2b 01       	movw	r4, r22
    239e:	3c 01       	movw	r6, r24
    23a0:	29 81       	ldd	r18, Y+1	; 0x01
    23a2:	3a 81       	ldd	r19, Y+2	; 0x02
    23a4:	4b 81       	ldd	r20, Y+3	; 0x03
    23a6:	5c 81       	ldd	r21, Y+4	; 0x04
    23a8:	69 89       	ldd	r22, Y+17	; 0x11
    23aa:	7a 89       	ldd	r23, Y+18	; 0x12
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	bc d5       	rcall	.+2936   	; 0x2f2a <__mulsf3>
    23b2:	6b 01       	movw	r12, r22
    23b4:	7c 01       	movw	r14, r24
    23b6:	2d 81       	ldd	r18, Y+5	; 0x05
    23b8:	3e 81       	ldd	r19, Y+6	; 0x06
    23ba:	4f 81       	ldd	r20, Y+7	; 0x07
    23bc:	58 85       	ldd	r21, Y+8	; 0x08
    23be:	69 a1       	ldd	r22, Y+33	; 0x21
    23c0:	7a a1       	ldd	r23, Y+34	; 0x22
    23c2:	8b a1       	ldd	r24, Y+35	; 0x23
    23c4:	9c a1       	ldd	r25, Y+36	; 0x24
    23c6:	b1 d5       	rcall	.+2914   	; 0x2f2a <__mulsf3>
    23c8:	9b 01       	movw	r18, r22
    23ca:	ac 01       	movw	r20, r24
    23cc:	c7 01       	movw	r24, r14
    23ce:	b6 01       	movw	r22, r12
    23d0:	ec d2       	rcall	.+1496   	; 0x29aa <__addsf3>
    23d2:	6b 01       	movw	r12, r22
    23d4:	7c 01       	movw	r14, r24
    23d6:	29 85       	ldd	r18, Y+9	; 0x09
    23d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    23da:	4b 85       	ldd	r20, Y+11	; 0x0b
    23dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    23de:	6d a1       	ldd	r22, Y+37	; 0x25
    23e0:	7e a1       	ldd	r23, Y+38	; 0x26
    23e2:	8f a1       	ldd	r24, Y+39	; 0x27
    23e4:	98 a5       	ldd	r25, Y+40	; 0x28
    23e6:	a1 d5       	rcall	.+2882   	; 0x2f2a <__mulsf3>
    23e8:	9b 01       	movw	r18, r22
    23ea:	ac 01       	movw	r20, r24
    23ec:	c7 01       	movw	r24, r14
    23ee:	b6 01       	movw	r22, r12
    23f0:	db d2       	rcall	.+1462   	; 0x29a8 <__subsf3>
    23f2:	6b 01       	movw	r12, r22
    23f4:	7c 01       	movw	r14, r24
    23f6:	29 81       	ldd	r18, Y+1	; 0x01
    23f8:	3a 81       	ldd	r19, Y+2	; 0x02
    23fa:	4b 81       	ldd	r20, Y+3	; 0x03
    23fc:	5c 81       	ldd	r21, Y+4	; 0x04
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	91 d5       	rcall	.+2850   	; 0x2f2a <__mulsf3>
    2408:	9b 01       	movw	r18, r22
    240a:	ac 01       	movw	r20, r24
    240c:	c7 01       	movw	r24, r14
    240e:	b6 01       	movw	r22, r12
    2410:	cc d2       	rcall	.+1432   	; 0x29aa <__addsf3>
    2412:	6b 01       	movw	r12, r22
    2414:	7c 01       	movw	r14, r24
    2416:	29 a5       	ldd	r18, Y+41	; 0x29
    2418:	3a a5       	ldd	r19, Y+42	; 0x2a
    241a:	4b a5       	ldd	r20, Y+43	; 0x2b
    241c:	5c a5       	ldd	r21, Y+44	; 0x2c
    241e:	69 85       	ldd	r22, Y+9	; 0x09
    2420:	7a 85       	ldd	r23, Y+10	; 0x0a
    2422:	8b 85       	ldd	r24, Y+11	; 0x0b
    2424:	9c 85       	ldd	r25, Y+12	; 0x0c
    2426:	81 d5       	rcall	.+2818   	; 0x2f2a <__mulsf3>
    2428:	9b 01       	movw	r18, r22
    242a:	ac 01       	movw	r20, r24
    242c:	c7 01       	movw	r24, r14
    242e:	b6 01       	movw	r22, r12
    2430:	bc d2       	rcall	.+1400   	; 0x29aa <__addsf3>
    2432:	6b 01       	movw	r12, r22
    2434:	7c 01       	movw	r14, r24
    2436:	2d a5       	ldd	r18, Y+45	; 0x2d
    2438:	3e a5       	ldd	r19, Y+46	; 0x2e
    243a:	4f a5       	ldd	r20, Y+47	; 0x2f
    243c:	58 a9       	ldd	r21, Y+48	; 0x30
    243e:	6d 81       	ldd	r22, Y+5	; 0x05
    2440:	7e 81       	ldd	r23, Y+6	; 0x06
    2442:	8f 81       	ldd	r24, Y+7	; 0x07
    2444:	98 85       	ldd	r25, Y+8	; 0x08
    2446:	71 d5       	rcall	.+2786   	; 0x2f2a <__mulsf3>
    2448:	9b 01       	movw	r18, r22
    244a:	ac 01       	movw	r20, r24
    244c:	c7 01       	movw	r24, r14
    244e:	b6 01       	movw	r22, r12
    2450:	ac d2       	rcall	.+1368   	; 0x29aa <__addsf3>
    2452:	6b 01       	movw	r12, r22
    2454:	7c 01       	movw	r14, r24
    2456:	29 81       	ldd	r18, Y+1	; 0x01
    2458:	3a 81       	ldd	r19, Y+2	; 0x02
    245a:	4b 81       	ldd	r20, Y+3	; 0x03
    245c:	5c 81       	ldd	r21, Y+4	; 0x04
    245e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2460:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2462:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2464:	98 a1       	ldd	r25, Y+32	; 0x20
    2466:	61 d5       	rcall	.+2754   	; 0x2f2a <__mulsf3>
    2468:	9b 01       	movw	r18, r22
    246a:	ac 01       	movw	r20, r24
    246c:	c7 01       	movw	r24, r14
    246e:	b6 01       	movw	r22, r12
    2470:	9b d2       	rcall	.+1334   	; 0x29a8 <__subsf3>
    2472:	6b 01       	movw	r12, r22
    2474:	7c 01       	movw	r14, r24
    2476:	29 81       	ldd	r18, Y+1	; 0x01
    2478:	3a 81       	ldd	r19, Y+2	; 0x02
    247a:	4b 81       	ldd	r20, Y+3	; 0x03
    247c:	5c 81       	ldd	r21, Y+4	; 0x04
    247e:	69 8d       	ldd	r22, Y+25	; 0x19
    2480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2486:	51 d5       	rcall	.+2722   	; 0x2f2a <__mulsf3>
    2488:	9b 01       	movw	r18, r22
    248a:	ac 01       	movw	r20, r24
    248c:	c7 01       	movw	r24, r14
    248e:	b6 01       	movw	r22, r12
    2490:	8b d2       	rcall	.+1302   	; 0x29a8 <__subsf3>
    2492:	f1 01       	movw	r30, r2
    2494:	60 83       	st	Z, r22
    2496:	71 83       	std	Z+1, r23	; 0x01
    2498:	82 83       	std	Z+2, r24	; 0x02
    249a:	93 83       	std	Z+3, r25	; 0x03
    249c:	29 a5       	ldd	r18, Y+41	; 0x29
    249e:	3a a5       	ldd	r19, Y+42	; 0x2a
    24a0:	4b a5       	ldd	r20, Y+43	; 0x2b
    24a2:	5c a5       	ldd	r21, Y+44	; 0x2c
    24a4:	69 81       	ldd	r22, Y+1	; 0x01
    24a6:	7a 81       	ldd	r23, Y+2	; 0x02
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	3e d5       	rcall	.+2684   	; 0x2f2a <__mulsf3>
    24ae:	6b 01       	movw	r12, r22
    24b0:	7c 01       	movw	r14, r24
    24b2:	29 85       	ldd	r18, Y+9	; 0x09
    24b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    24b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    24b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    24ba:	69 8d       	ldd	r22, Y+25	; 0x19
    24bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c2:	33 d5       	rcall	.+2662   	; 0x2f2a <__mulsf3>
    24c4:	9b 01       	movw	r18, r22
    24c6:	ac 01       	movw	r20, r24
    24c8:	c7 01       	movw	r24, r14
    24ca:	b6 01       	movw	r22, r12
    24cc:	6e d2       	rcall	.+1244   	; 0x29aa <__addsf3>
    24ce:	6b 01       	movw	r12, r22
    24d0:	7c 01       	movw	r14, r24
    24d2:	a5 01       	movw	r20, r10
    24d4:	94 01       	movw	r18, r8
    24d6:	6d 81       	ldd	r22, Y+5	; 0x05
    24d8:	7e 81       	ldd	r23, Y+6	; 0x06
    24da:	8f 81       	ldd	r24, Y+7	; 0x07
    24dc:	98 85       	ldd	r25, Y+8	; 0x08
    24de:	25 d5       	rcall	.+2634   	; 0x2f2a <__mulsf3>
    24e0:	9b 01       	movw	r18, r22
    24e2:	ac 01       	movw	r20, r24
    24e4:	c7 01       	movw	r24, r14
    24e6:	b6 01       	movw	r22, r12
    24e8:	60 d2       	rcall	.+1216   	; 0x29aa <__addsf3>
    24ea:	6b 01       	movw	r12, r22
    24ec:	7c 01       	movw	r14, r24
    24ee:	2d a1       	ldd	r18, Y+37	; 0x25
    24f0:	3e a1       	ldd	r19, Y+38	; 0x26
    24f2:	4f a1       	ldd	r20, Y+39	; 0x27
    24f4:	58 a5       	ldd	r21, Y+40	; 0x28
    24f6:	69 81       	ldd	r22, Y+1	; 0x01
    24f8:	7a 81       	ldd	r23, Y+2	; 0x02
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	15 d5       	rcall	.+2602   	; 0x2f2a <__mulsf3>
    2500:	9b 01       	movw	r18, r22
    2502:	ac 01       	movw	r20, r24
    2504:	c7 01       	movw	r24, r14
    2506:	b6 01       	movw	r22, r12
    2508:	50 d2       	rcall	.+1184   	; 0x29aa <__addsf3>
    250a:	6b 01       	movw	r12, r22
    250c:	7c 01       	movw	r14, r24
    250e:	29 85       	ldd	r18, Y+9	; 0x09
    2510:	3a 85       	ldd	r19, Y+10	; 0x0a
    2512:	4b 85       	ldd	r20, Y+11	; 0x0b
    2514:	5c 85       	ldd	r21, Y+12	; 0x0c
    2516:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2518:	7e 8d       	ldd	r23, Y+30	; 0x1e
    251a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    251c:	98 a1       	ldd	r25, Y+32	; 0x20
    251e:	05 d5       	rcall	.+2570   	; 0x2f2a <__mulsf3>
    2520:	9b 01       	movw	r18, r22
    2522:	ac 01       	movw	r20, r24
    2524:	c7 01       	movw	r24, r14
    2526:	b6 01       	movw	r22, r12
    2528:	3f d2       	rcall	.+1150   	; 0x29a8 <__subsf3>
    252a:	6b 01       	movw	r12, r22
    252c:	7c 01       	movw	r14, r24
    252e:	29 85       	ldd	r18, Y+9	; 0x09
    2530:	3a 85       	ldd	r19, Y+10	; 0x0a
    2532:	4b 85       	ldd	r20, Y+11	; 0x0b
    2534:	5c 85       	ldd	r21, Y+12	; 0x0c
    2536:	69 89       	ldd	r22, Y+17	; 0x11
    2538:	7a 89       	ldd	r23, Y+18	; 0x12
    253a:	8b 89       	ldd	r24, Y+19	; 0x13
    253c:	9c 89       	ldd	r25, Y+20	; 0x14
    253e:	f5 d4       	rcall	.+2538   	; 0x2f2a <__mulsf3>
    2540:	9b 01       	movw	r18, r22
    2542:	ac 01       	movw	r20, r24
    2544:	c7 01       	movw	r24, r14
    2546:	b6 01       	movw	r22, r12
    2548:	30 d2       	rcall	.+1120   	; 0x29aa <__addsf3>
    254a:	6b 01       	movw	r12, r22
    254c:	7c 01       	movw	r14, r24
    254e:	a3 01       	movw	r20, r6
    2550:	92 01       	movw	r18, r4
    2552:	6d 81       	ldd	r22, Y+5	; 0x05
    2554:	7e 81       	ldd	r23, Y+6	; 0x06
    2556:	8f 81       	ldd	r24, Y+7	; 0x07
    2558:	98 85       	ldd	r25, Y+8	; 0x08
    255a:	e7 d4       	rcall	.+2510   	; 0x2f2a <__mulsf3>
    255c:	9b 01       	movw	r18, r22
    255e:	ac 01       	movw	r20, r24
    2560:	c7 01       	movw	r24, r14
    2562:	b6 01       	movw	r22, r12
    2564:	21 d2       	rcall	.+1090   	; 0x29a8 <__subsf3>
    2566:	6b 01       	movw	r12, r22
    2568:	7c 01       	movw	r14, r24
    256a:	29 85       	ldd	r18, Y+9	; 0x09
    256c:	3a 85       	ldd	r19, Y+10	; 0x0a
    256e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2570:	5c 85       	ldd	r21, Y+12	; 0x0c
    2572:	6d 89       	ldd	r22, Y+21	; 0x15
    2574:	7e 89       	ldd	r23, Y+22	; 0x16
    2576:	8f 89       	ldd	r24, Y+23	; 0x17
    2578:	98 8d       	ldd	r25, Y+24	; 0x18
    257a:	d7 d4       	rcall	.+2478   	; 0x2f2a <__mulsf3>
    257c:	9b 01       	movw	r18, r22
    257e:	ac 01       	movw	r20, r24
    2580:	c7 01       	movw	r24, r14
    2582:	b6 01       	movw	r22, r12
    2584:	11 d2       	rcall	.+1058   	; 0x29a8 <__subsf3>
    2586:	d1 01       	movw	r26, r2
    2588:	14 96       	adiw	r26, 0x04	; 4
    258a:	6d 93       	st	X+, r22
    258c:	7d 93       	st	X+, r23
    258e:	8d 93       	st	X+, r24
    2590:	9c 93       	st	X, r25
    2592:	17 97       	sbiw	r26, 0x07	; 7
    2594:	2d a5       	ldd	r18, Y+45	; 0x2d
    2596:	3e a5       	ldd	r19, Y+46	; 0x2e
    2598:	4f a5       	ldd	r20, Y+47	; 0x2f
    259a:	58 a9       	ldd	r21, Y+48	; 0x30
    259c:	69 81       	ldd	r22, Y+1	; 0x01
    259e:	7a 81       	ldd	r23, Y+2	; 0x02
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	c2 d4       	rcall	.+2436   	; 0x2f2a <__mulsf3>
    25a6:	6b 01       	movw	r12, r22
    25a8:	7c 01       	movw	r14, r24
    25aa:	a5 01       	movw	r20, r10
    25ac:	94 01       	movw	r18, r8
    25ae:	69 85       	ldd	r22, Y+9	; 0x09
    25b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    25b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    25b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    25b6:	b9 d4       	rcall	.+2418   	; 0x2f2a <__mulsf3>
    25b8:	9b 01       	movw	r18, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	c7 01       	movw	r24, r14
    25be:	b6 01       	movw	r22, r12
    25c0:	f4 d1       	rcall	.+1000   	; 0x29aa <__addsf3>
    25c2:	6b 01       	movw	r12, r22
    25c4:	7c 01       	movw	r14, r24
    25c6:	2d 81       	ldd	r18, Y+5	; 0x05
    25c8:	3e 81       	ldd	r19, Y+6	; 0x06
    25ca:	4f 81       	ldd	r20, Y+7	; 0x07
    25cc:	58 85       	ldd	r21, Y+8	; 0x08
    25ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    25d0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    25d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d4:	98 a1       	ldd	r25, Y+32	; 0x20
    25d6:	a9 d4       	rcall	.+2386   	; 0x2f2a <__mulsf3>
    25d8:	9b 01       	movw	r18, r22
    25da:	ac 01       	movw	r20, r24
    25dc:	c7 01       	movw	r24, r14
    25de:	b6 01       	movw	r22, r12
    25e0:	e4 d1       	rcall	.+968    	; 0x29aa <__addsf3>
    25e2:	6b 01       	movw	r12, r22
    25e4:	7c 01       	movw	r14, r24
    25e6:	29 a1       	ldd	r18, Y+33	; 0x21
    25e8:	3a a1       	ldd	r19, Y+34	; 0x22
    25ea:	4b a1       	ldd	r20, Y+35	; 0x23
    25ec:	5c a1       	ldd	r21, Y+36	; 0x24
    25ee:	69 81       	ldd	r22, Y+1	; 0x01
    25f0:	7a 81       	ldd	r23, Y+2	; 0x02
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	99 d4       	rcall	.+2354   	; 0x2f2a <__mulsf3>
    25f8:	9b 01       	movw	r18, r22
    25fa:	ac 01       	movw	r20, r24
    25fc:	c7 01       	movw	r24, r14
    25fe:	b6 01       	movw	r22, r12
    2600:	d3 d1       	rcall	.+934    	; 0x29a8 <__subsf3>
    2602:	6b 01       	movw	r12, r22
    2604:	7c 01       	movw	r14, r24
    2606:	2d 81       	ldd	r18, Y+5	; 0x05
    2608:	3e 81       	ldd	r19, Y+6	; 0x06
    260a:	4f 81       	ldd	r20, Y+7	; 0x07
    260c:	58 85       	ldd	r21, Y+8	; 0x08
    260e:	69 8d       	ldd	r22, Y+25	; 0x19
    2610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2616:	89 d4       	rcall	.+2322   	; 0x2f2a <__mulsf3>
    2618:	9b 01       	movw	r18, r22
    261a:	ac 01       	movw	r20, r24
    261c:	c7 01       	movw	r24, r14
    261e:	b6 01       	movw	r22, r12
    2620:	c3 d1       	rcall	.+902    	; 0x29a8 <__subsf3>
    2622:	6b 01       	movw	r12, r22
    2624:	7c 01       	movw	r14, r24
    2626:	a3 01       	movw	r20, r6
    2628:	92 01       	movw	r18, r4
    262a:	69 85       	ldd	r22, Y+9	; 0x09
    262c:	7a 85       	ldd	r23, Y+10	; 0x0a
    262e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2630:	9c 85       	ldd	r25, Y+12	; 0x0c
    2632:	7b d4       	rcall	.+2294   	; 0x2f2a <__mulsf3>
    2634:	9b 01       	movw	r18, r22
    2636:	ac 01       	movw	r20, r24
    2638:	c7 01       	movw	r24, r14
    263a:	b6 01       	movw	r22, r12
    263c:	b6 d1       	rcall	.+876    	; 0x29aa <__addsf3>
    263e:	6b 01       	movw	r12, r22
    2640:	7c 01       	movw	r14, r24
    2642:	2d 81       	ldd	r18, Y+5	; 0x05
    2644:	3e 81       	ldd	r19, Y+6	; 0x06
    2646:	4f 81       	ldd	r20, Y+7	; 0x07
    2648:	58 85       	ldd	r21, Y+8	; 0x08
    264a:	6d 89       	ldd	r22, Y+21	; 0x15
    264c:	7e 89       	ldd	r23, Y+22	; 0x16
    264e:	8f 89       	ldd	r24, Y+23	; 0x17
    2650:	98 8d       	ldd	r25, Y+24	; 0x18
    2652:	6b d4       	rcall	.+2262   	; 0x2f2a <__mulsf3>
    2654:	9b 01       	movw	r18, r22
    2656:	ac 01       	movw	r20, r24
    2658:	c7 01       	movw	r24, r14
    265a:	b6 01       	movw	r22, r12
    265c:	a5 d1       	rcall	.+842    	; 0x29a8 <__subsf3>
    265e:	6b 01       	movw	r12, r22
    2660:	7c 01       	movw	r14, r24
    2662:	2d 81       	ldd	r18, Y+5	; 0x05
    2664:	3e 81       	ldd	r19, Y+6	; 0x06
    2666:	4f 81       	ldd	r20, Y+7	; 0x07
    2668:	58 85       	ldd	r21, Y+8	; 0x08
    266a:	69 89       	ldd	r22, Y+17	; 0x11
    266c:	7a 89       	ldd	r23, Y+18	; 0x12
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	5b d4       	rcall	.+2230   	; 0x2f2a <__mulsf3>
    2674:	9b 01       	movw	r18, r22
    2676:	ac 01       	movw	r20, r24
    2678:	c7 01       	movw	r24, r14
    267a:	b6 01       	movw	r22, r12
    267c:	96 d1       	rcall	.+812    	; 0x29aa <__addsf3>
    267e:	f1 01       	movw	r30, r2
    2680:	60 87       	std	Z+8, r22	; 0x08
    2682:	71 87       	std	Z+9, r23	; 0x09
    2684:	82 87       	std	Z+10, r24	; 0x0a
    2686:	93 87       	std	Z+11, r25	; 0x0b
    2688:	e0 96       	adiw	r28, 0x30	; 48
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	df 90       	pop	r13
    26a2:	cf 90       	pop	r12
    26a4:	bf 90       	pop	r11
    26a6:	af 90       	pop	r10
    26a8:	9f 90       	pop	r9
    26aa:	8f 90       	pop	r8
    26ac:	7f 90       	pop	r7
    26ae:	6f 90       	pop	r6
    26b0:	5f 90       	pop	r5
    26b2:	4f 90       	pop	r4
    26b4:	3f 90       	pop	r3
    26b6:	2f 90       	pop	r2
    26b8:	08 95       	ret

000026ba <Quaternion_addition>:

void Quaternion_addition(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
    26ba:	2f 92       	push	r2
    26bc:	3f 92       	push	r3
    26be:	4f 92       	push	r4
    26c0:	5f 92       	push	r5
    26c2:	6f 92       	push	r6
    26c4:	7f 92       	push	r7
    26c6:	8f 92       	push	r8
    26c8:	9f 92       	push	r9
    26ca:	af 92       	push	r10
    26cc:	bf 92       	push	r11
    26ce:	cf 92       	push	r12
    26d0:	df 92       	push	r13
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	1c 01       	movw	r2, r24
    26e0:	8b 01       	movw	r16, r22
    26e2:	ea 01       	movw	r28, r20
    assert(output != NULL);
    26e4:	20 97       	sbiw	r28, 0x00	; 0
    26e6:	09 f4       	brne	.+2      	; 0x26ea <Quaternion_addition+0x30>
    26e8:	0a d5       	rcall	.+2580   	; 0x30fe <abort>
    Quaternion result;

    result.w =    q1->w + q2->w;
    result.v[0] = q1->v[0] + q2->v[0];
    26ea:	fb 01       	movw	r30, r22
    26ec:	24 81       	ldd	r18, Z+4	; 0x04
    26ee:	35 81       	ldd	r19, Z+5	; 0x05
    26f0:	46 81       	ldd	r20, Z+6	; 0x06
    26f2:	57 81       	ldd	r21, Z+7	; 0x07
    26f4:	fc 01       	movw	r30, r24
    26f6:	64 81       	ldd	r22, Z+4	; 0x04
    26f8:	75 81       	ldd	r23, Z+5	; 0x05
    26fa:	86 81       	ldd	r24, Z+6	; 0x06
    26fc:	97 81       	ldd	r25, Z+7	; 0x07
    26fe:	55 d1       	rcall	.+682    	; 0x29aa <__addsf3>
    2700:	2b 01       	movw	r4, r22
    2702:	3c 01       	movw	r6, r24
    result.v[1] = q1->v[1] + q2->v[1];
    2704:	f8 01       	movw	r30, r16
    2706:	20 85       	ldd	r18, Z+8	; 0x08
    2708:	31 85       	ldd	r19, Z+9	; 0x09
    270a:	42 85       	ldd	r20, Z+10	; 0x0a
    270c:	53 85       	ldd	r21, Z+11	; 0x0b
    270e:	f1 01       	movw	r30, r2
    2710:	60 85       	ldd	r22, Z+8	; 0x08
    2712:	71 85       	ldd	r23, Z+9	; 0x09
    2714:	82 85       	ldd	r24, Z+10	; 0x0a
    2716:	93 85       	ldd	r25, Z+11	; 0x0b
    2718:	48 d1       	rcall	.+656    	; 0x29aa <__addsf3>
    271a:	4b 01       	movw	r8, r22
    271c:	5c 01       	movw	r10, r24
    result.v[2] = q1->v[2] + q2->v[2];
    271e:	f8 01       	movw	r30, r16
    2720:	24 85       	ldd	r18, Z+12	; 0x0c
    2722:	35 85       	ldd	r19, Z+13	; 0x0d
    2724:	46 85       	ldd	r20, Z+14	; 0x0e
    2726:	57 85       	ldd	r21, Z+15	; 0x0f
    2728:	f1 01       	movw	r30, r2
    272a:	64 85       	ldd	r22, Z+12	; 0x0c
    272c:	75 85       	ldd	r23, Z+13	; 0x0d
    272e:	86 85       	ldd	r24, Z+14	; 0x0e
    2730:	97 85       	ldd	r25, Z+15	; 0x0f
    2732:	3b d1       	rcall	.+630    	; 0x29aa <__addsf3>
    2734:	6b 01       	movw	r12, r22
    2736:	7c 01       	movw	r14, r24

    *output = result;
    2738:	f8 01       	movw	r30, r16
    273a:	20 81       	ld	r18, Z
    273c:	31 81       	ldd	r19, Z+1	; 0x01
    273e:	42 81       	ldd	r20, Z+2	; 0x02
    2740:	53 81       	ldd	r21, Z+3	; 0x03
    2742:	f1 01       	movw	r30, r2
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	2e d1       	rcall	.+604    	; 0x29aa <__addsf3>
    274e:	68 83       	st	Y, r22
    2750:	79 83       	std	Y+1, r23	; 0x01
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	9b 83       	std	Y+3, r25	; 0x03
    2756:	4c 82       	std	Y+4, r4	; 0x04
    2758:	5d 82       	std	Y+5, r5	; 0x05
    275a:	6e 82       	std	Y+6, r6	; 0x06
    275c:	7f 82       	std	Y+7, r7	; 0x07
    275e:	88 86       	std	Y+8, r8	; 0x08
    2760:	99 86       	std	Y+9, r9	; 0x09
    2762:	aa 86       	std	Y+10, r10	; 0x0a
    2764:	bb 86       	std	Y+11, r11	; 0x0b
    2766:	cc 86       	std	Y+12, r12	; 0x0c
    2768:	dd 86       	std	Y+13, r13	; 0x0d
    276a:	ee 86       	std	Y+14, r14	; 0x0e
    276c:	ff 86       	std	Y+15, r15	; 0x0f
}
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	ff 90       	pop	r15
    2778:	ef 90       	pop	r14
    277a:	df 90       	pop	r13
    277c:	cf 90       	pop	r12
    277e:	bf 90       	pop	r11
    2780:	af 90       	pop	r10
    2782:	9f 90       	pop	r9
    2784:	8f 90       	pop	r8
    2786:	7f 90       	pop	r7
    2788:	6f 90       	pop	r6
    278a:	5f 90       	pop	r5
    278c:	4f 90       	pop	r4
    278e:	3f 90       	pop	r3
    2790:	2f 90       	pop	r2
    2792:	08 95       	ret

00002794 <Quaternion_ratio>:

void Quaternion_ratio(Quaternion* q, double ratio, Quaternion* output)
{
    2794:	4f 92       	push	r4
    2796:	5f 92       	push	r5
    2798:	6f 92       	push	r6
    279a:	7f 92       	push	r7
    279c:	8f 92       	push	r8
    279e:	9f 92       	push	r9
    27a0:	af 92       	push	r10
    27a2:	bf 92       	push	r11
    27a4:	cf 92       	push	r12
    27a6:	df 92       	push	r13
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <Quaternion_ratio+0x22>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <Quaternion_ratio+0x24>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <Quaternion_ratio+0x26>
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	49 83       	std	Y+1, r20	; 0x01
    27c4:	5a 83       	std	Y+2, r21	; 0x02
    27c6:	6b 83       	std	Y+3, r22	; 0x03
    27c8:	7c 83       	std	Y+4, r23	; 0x04
    27ca:	89 01       	movw	r16, r18
	Quaternion result;

	result.w =    q->w * ratio;
	result.v[0] = q->v[0] * ratio;
    27cc:	fc 01       	movw	r30, r24
    27ce:	24 81       	ldd	r18, Z+4	; 0x04
    27d0:	35 81       	ldd	r19, Z+5	; 0x05
    27d2:	46 81       	ldd	r20, Z+6	; 0x06
    27d4:	57 81       	ldd	r21, Z+7	; 0x07
    27d6:	69 81       	ldd	r22, Y+1	; 0x01
    27d8:	7a 81       	ldd	r23, Y+2	; 0x02
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	9c 81       	ldd	r25, Y+4	; 0x04
    27de:	a5 d3       	rcall	.+1866   	; 0x2f2a <__mulsf3>
    27e0:	2b 01       	movw	r4, r22
    27e2:	3c 01       	movw	r6, r24
	result.v[1] = q->v[1] * ratio;
    27e4:	ed 81       	ldd	r30, Y+5	; 0x05
    27e6:	fe 81       	ldd	r31, Y+6	; 0x06
    27e8:	20 85       	ldd	r18, Z+8	; 0x08
    27ea:	31 85       	ldd	r19, Z+9	; 0x09
    27ec:	42 85       	ldd	r20, Z+10	; 0x0a
    27ee:	53 85       	ldd	r21, Z+11	; 0x0b
    27f0:	69 81       	ldd	r22, Y+1	; 0x01
    27f2:	7a 81       	ldd	r23, Y+2	; 0x02
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	98 d3       	rcall	.+1840   	; 0x2f2a <__mulsf3>
    27fa:	4b 01       	movw	r8, r22
    27fc:	5c 01       	movw	r10, r24
	result.v[2] = q->v[2] * ratio;
    27fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2800:	fe 81       	ldd	r31, Y+6	; 0x06
    2802:	24 85       	ldd	r18, Z+12	; 0x0c
    2804:	35 85       	ldd	r19, Z+13	; 0x0d
    2806:	46 85       	ldd	r20, Z+14	; 0x0e
    2808:	57 85       	ldd	r21, Z+15	; 0x0f
    280a:	69 81       	ldd	r22, Y+1	; 0x01
    280c:	7a 81       	ldd	r23, Y+2	; 0x02
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	8b d3       	rcall	.+1814   	; 0x2f2a <__mulsf3>
    2814:	6b 01       	movw	r12, r22
    2816:	7c 01       	movw	r14, r24

	*output = result;
    2818:	29 81       	ldd	r18, Y+1	; 0x01
    281a:	3a 81       	ldd	r19, Y+2	; 0x02
    281c:	4b 81       	ldd	r20, Y+3	; 0x03
    281e:	5c 81       	ldd	r21, Y+4	; 0x04
    2820:	ed 81       	ldd	r30, Y+5	; 0x05
    2822:	fe 81       	ldd	r31, Y+6	; 0x06
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	7e d3       	rcall	.+1788   	; 0x2f2a <__mulsf3>
    282e:	f8 01       	movw	r30, r16
    2830:	60 83       	st	Z, r22
    2832:	71 83       	std	Z+1, r23	; 0x01
    2834:	82 83       	std	Z+2, r24	; 0x02
    2836:	93 83       	std	Z+3, r25	; 0x03
    2838:	44 82       	std	Z+4, r4	; 0x04
    283a:	55 82       	std	Z+5, r5	; 0x05
    283c:	66 82       	std	Z+6, r6	; 0x06
    283e:	77 82       	std	Z+7, r7	; 0x07
    2840:	80 86       	std	Z+8, r8	; 0x08
    2842:	91 86       	std	Z+9, r9	; 0x09
    2844:	a2 86       	std	Z+10, r10	; 0x0a
    2846:	b3 86       	std	Z+11, r11	; 0x0b
    2848:	c4 86       	std	Z+12, r12	; 0x0c
    284a:	d5 86       	std	Z+13, r13	; 0x0d
    284c:	e6 86       	std	Z+14, r14	; 0x0e
    284e:	f7 86       	std	Z+15, r15	; 0x0f
    2850:	26 96       	adiw	r28, 0x06	; 6
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	bf 90       	pop	r11
    286e:	af 90       	pop	r10
    2870:	9f 90       	pop	r9
    2872:	8f 90       	pop	r8
    2874:	7f 90       	pop	r7
    2876:	6f 90       	pop	r6
    2878:	5f 90       	pop	r5
    287a:	4f 90       	pop	r4
    287c:	08 95       	ret

0000287e <UART1_init>:

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );         //데이터 수신 대기
	return UDR1;
}
    287e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    2882:	80 e1       	ldi	r24, 0x10	; 16
    2884:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2888:	eb e9       	ldi	r30, 0x9B	; 155
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	82 60       	ori	r24, 0x02	; 2
    2890:	80 83       	st	Z, r24
    2892:	ed e9       	ldi	r30, 0x9D	; 157
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	86 60       	ori	r24, 0x06	; 6
    289a:	80 83       	st	Z, r24
    289c:	ea e9       	ldi	r30, 0x9A	; 154
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	80 61       	ori	r24, 0x10	; 16
    28a4:	80 83       	st	Z, r24
    28a6:	80 81       	ld	r24, Z
    28a8:	88 60       	ori	r24, 0x08	; 8
    28aa:	80 83       	st	Z, r24
    28ac:	08 95       	ret

000028ae <UART1_transmit>:
    28ae:	eb e9       	ldi	r30, 0x9B	; 155
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	90 81       	ld	r25, Z
    28b4:	95 ff       	sbrs	r25, 5
    28b6:	fd cf       	rjmp	.-6      	; 0x28b2 <UART1_transmit+0x4>
    28b8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    28bc:	08 95       	ret

000028be <UART1_print16b>:

void UART1_print16b(int16_t no)
{
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <UART1_print16b+0xe>
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <UART1_print16b+0x10>
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <UART1_print16b+0x12>
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
	char numStr[6]="0";
    28d4:	20 e3       	ldi	r18, 0x30	; 48
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	3a 83       	std	Y+2, r19	; 0x02
    28da:	29 83       	std	Y+1, r18	; 0x01
    28dc:	fe 01       	movw	r30, r28
    28de:	33 96       	adiw	r30, 0x03	; 3
    28e0:	24 e0       	ldi	r18, 0x04	; 4
    28e2:	df 01       	movw	r26, r30
    28e4:	1d 92       	st	X+, r1
    28e6:	2a 95       	dec	r18
    28e8:	e9 f7       	brne	.-6      	; 0x28e4 <UART1_print16b+0x26>
	int mino=0;
	int index=0;
	
	int i=0;
	if(no>0)
    28ea:	18 16       	cp	r1, r24
    28ec:	19 06       	cpc	r1, r25
    28ee:	0c f0       	brlt	.+2      	; 0x28f2 <UART1_print16b+0x34>
    28f0:	49 c0       	rjmp	.+146    	; 0x2984 <UART1_print16b+0xc6>
    28f2:	32 97       	sbiw	r30, 0x02	; 2
    28f4:	00 e0       	ldi	r16, 0x00	; 0
    28f6:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0;no!=0;i++)
		{
			numStr[i]=no%10+48;
    28f8:	0f 2e       	mov	r0, r31
    28fa:	fa e0       	ldi	r31, 0x0A	; 10
    28fc:	ef 2e       	mov	r14, r31
    28fe:	f1 2c       	mov	r15, r1
    2900:	f0 2d       	mov	r31, r0
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <UART1_print16b+0x48>
	int index=0;
	
	int i=0;
	if(no>0)
	{
		for(i=0;no!=0;i++)
    2904:	89 01       	movw	r16, r18
		{
			numStr[i]=no%10+48;
    2906:	b7 01       	movw	r22, r14
    2908:	d3 d3       	rcall	.+1958   	; 0x30b0 <__divmodhi4>
    290a:	80 5d       	subi	r24, 0xD0	; 208
    290c:	81 93       	st	Z+, r24
			no=no/10;
    290e:	86 2f       	mov	r24, r22
    2910:	97 2f       	mov	r25, r23
	int index=0;
	
	int i=0;
	if(no>0)
	{
		for(i=0;no!=0;i++)
    2912:	98 01       	movw	r18, r16
    2914:	2f 5f       	subi	r18, 0xFF	; 255
    2916:	3f 4f       	sbci	r19, 0xFF	; 255
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	a1 f7       	brne	.-24     	; 0x2904 <UART1_print16b+0x46>
		{
			numStr[i]=no%10+48;
			no=no/10;
			
		}
		numStr[i]='\0';
    291c:	fe 01       	movw	r30, r28
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	11 82       	std	Z+1, r1	; 0x01
    2924:	1f c0       	rjmp	.+62     	; 0x2964 <UART1_print16b+0xa6>
		index=i-1;
	}if(no<0)
	{
		mino=0-no;
    2926:	91 95       	neg	r25
    2928:	81 95       	neg	r24
    292a:	91 09       	sbc	r25, r1
		for(i=0;mino!=0;i++)
    292c:	89 f0       	breq	.+34     	; 0x2950 <UART1_print16b+0x92>
    292e:	fe 01       	movw	r30, r28
    2930:	31 96       	adiw	r30, 0x01	; 1
    2932:	00 e0       	ldi	r16, 0x00	; 0
    2934:	10 e0       	ldi	r17, 0x00	; 0
		{
			numStr[i]=mino%10+48;
    2936:	2a e0       	ldi	r18, 0x0A	; 10
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	b9 01       	movw	r22, r18
    293c:	b9 d3       	rcall	.+1906   	; 0x30b0 <__divmodhi4>
    293e:	80 5d       	subi	r24, 0xD0	; 208
    2940:	81 93       	st	Z+, r24
			mino=mino/10;
    2942:	86 2f       	mov	r24, r22
    2944:	97 2f       	mov	r25, r23
		numStr[i]='\0';
		index=i-1;
	}if(no<0)
	{
		mino=0-no;
		for(i=0;mino!=0;i++)
    2946:	0f 5f       	subi	r16, 0xFF	; 255
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	b1 f7       	brne	.-20     	; 0x293a <UART1_print16b+0x7c>
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <UART1_print16b+0x96>
    2950:	00 e0       	ldi	r16, 0x00	; 0
    2952:	10 e0       	ldi	r17, 0x00	; 0
		{
			numStr[i]=mino%10+48;
			mino=mino/10;
		}
		numStr[i]='\0';
    2954:	fe 01       	movw	r30, r28
    2956:	e0 0f       	add	r30, r16
    2958:	f1 1f       	adc	r31, r17
    295a:	11 82       	std	Z+1, r1	; 0x01
		index=i-1;
    295c:	01 50       	subi	r16, 0x01	; 1
		UART1_transmit('-');
    295e:	11 09       	sbc	r17, r1
    2960:	8d e2       	ldi	r24, 0x2D	; 45
    2962:	a5 df       	rcall	.-182    	; 0x28ae <UART1_transmit>
	}
	for(int j=index;j>=0;j--)
    2964:	11 23       	and	r17, r17
    2966:	9c f0       	brlt	.+38     	; 0x298e <UART1_print16b+0xd0>
    2968:	ce 01       	movw	r24, r28
    296a:	80 0f       	add	r24, r16
    296c:	91 1f       	adc	r25, r17
    296e:	fc 01       	movw	r30, r24
    2970:	32 96       	adiw	r30, 0x02	; 2
    2972:	7f 01       	movw	r14, r30
	{
		UART1_transmit(numStr[j]);
    2974:	d7 01       	movw	r26, r14
    2976:	8e 91       	ld	r24, -X
    2978:	7d 01       	movw	r14, r26
    297a:	99 df       	rcall	.-206    	; 0x28ae <UART1_transmit>
		}
		numStr[i]='\0';
		index=i-1;
		UART1_transmit('-');
	}
	for(int j=index;j>=0;j--)
    297c:	01 50       	subi	r16, 0x01	; 1
    297e:	11 09       	sbc	r17, r1
    2980:	ca f7       	brpl	.-14     	; 0x2974 <UART1_print16b+0xb6>
    2982:	05 c0       	rjmp	.+10     	; 0x298e <UART1_print16b+0xd0>
			no=no/10;
			
		}
		numStr[i]='\0';
		index=i-1;
	}if(no<0)
    2984:	99 23       	and	r25, r25
    2986:	7c f2       	brlt	.-98     	; 0x2926 <UART1_print16b+0x68>

void UART1_print16b(int16_t no)
{
	char numStr[6]="0";
	int mino=0;
	int index=0;
    2988:	00 e0       	ldi	r16, 0x00	; 0
    298a:	10 e0       	ldi	r17, 0x00	; 0
    298c:	ed cf       	rjmp	.-38     	; 0x2968 <UART1_print16b+0xaa>
	for(int j=index;j>=0;j--)
	{
		UART1_transmit(numStr[j]);
	}
	return;
}
    298e:	26 96       	adiw	r28, 0x06	; 6
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	ff 90       	pop	r15
    29a4:	ef 90       	pop	r14
    29a6:	08 95       	ret

000029a8 <__subsf3>:
    29a8:	50 58       	subi	r21, 0x80	; 128

000029aa <__addsf3>:
    29aa:	bb 27       	eor	r27, r27
    29ac:	aa 27       	eor	r26, r26
    29ae:	0e d0       	rcall	.+28     	; 0x29cc <__addsf3x>
    29b0:	6a c2       	rjmp	.+1236   	; 0x2e86 <__fp_round>
    29b2:	33 d2       	rcall	.+1126   	; 0x2e1a <__fp_pscA>
    29b4:	30 f0       	brcs	.+12     	; 0x29c2 <__addsf3+0x18>
    29b6:	38 d2       	rcall	.+1136   	; 0x2e28 <__fp_pscB>
    29b8:	20 f0       	brcs	.+8      	; 0x29c2 <__addsf3+0x18>
    29ba:	31 f4       	brne	.+12     	; 0x29c8 <__addsf3+0x1e>
    29bc:	9f 3f       	cpi	r25, 0xFF	; 255
    29be:	11 f4       	brne	.+4      	; 0x29c4 <__addsf3+0x1a>
    29c0:	1e f4       	brtc	.+6      	; 0x29c8 <__addsf3+0x1e>
    29c2:	f2 c1       	rjmp	.+996    	; 0x2da8 <__fp_nan>
    29c4:	0e f4       	brtc	.+2      	; 0x29c8 <__addsf3+0x1e>
    29c6:	e0 95       	com	r30
    29c8:	e7 fb       	bst	r30, 7
    29ca:	e8 c1       	rjmp	.+976    	; 0x2d9c <__fp_inf>

000029cc <__addsf3x>:
    29cc:	e9 2f       	mov	r30, r25
    29ce:	7d d2       	rcall	.+1274   	; 0x2eca <__fp_split3>
    29d0:	80 f3       	brcs	.-32     	; 0x29b2 <__addsf3+0x8>
    29d2:	ba 17       	cp	r27, r26
    29d4:	62 07       	cpc	r22, r18
    29d6:	73 07       	cpc	r23, r19
    29d8:	84 07       	cpc	r24, r20
    29da:	95 07       	cpc	r25, r21
    29dc:	18 f0       	brcs	.+6      	; 0x29e4 <__addsf3x+0x18>
    29de:	71 f4       	brne	.+28     	; 0x29fc <__addsf3x+0x30>
    29e0:	9e f5       	brtc	.+102    	; 0x2a48 <__addsf3x+0x7c>
    29e2:	95 c2       	rjmp	.+1322   	; 0x2f0e <__fp_zero>
    29e4:	0e f4       	brtc	.+2      	; 0x29e8 <__addsf3x+0x1c>
    29e6:	e0 95       	com	r30
    29e8:	0b 2e       	mov	r0, r27
    29ea:	ba 2f       	mov	r27, r26
    29ec:	a0 2d       	mov	r26, r0
    29ee:	0b 01       	movw	r0, r22
    29f0:	b9 01       	movw	r22, r18
    29f2:	90 01       	movw	r18, r0
    29f4:	0c 01       	movw	r0, r24
    29f6:	ca 01       	movw	r24, r20
    29f8:	a0 01       	movw	r20, r0
    29fa:	11 24       	eor	r1, r1
    29fc:	ff 27       	eor	r31, r31
    29fe:	59 1b       	sub	r21, r25
    2a00:	99 f0       	breq	.+38     	; 0x2a28 <__addsf3x+0x5c>
    2a02:	59 3f       	cpi	r21, 0xF9	; 249
    2a04:	50 f4       	brcc	.+20     	; 0x2a1a <__addsf3x+0x4e>
    2a06:	50 3e       	cpi	r21, 0xE0	; 224
    2a08:	68 f1       	brcs	.+90     	; 0x2a64 <__addsf3x+0x98>
    2a0a:	1a 16       	cp	r1, r26
    2a0c:	f0 40       	sbci	r31, 0x00	; 0
    2a0e:	a2 2f       	mov	r26, r18
    2a10:	23 2f       	mov	r18, r19
    2a12:	34 2f       	mov	r19, r20
    2a14:	44 27       	eor	r20, r20
    2a16:	58 5f       	subi	r21, 0xF8	; 248
    2a18:	f3 cf       	rjmp	.-26     	; 0x2a00 <__addsf3x+0x34>
    2a1a:	46 95       	lsr	r20
    2a1c:	37 95       	ror	r19
    2a1e:	27 95       	ror	r18
    2a20:	a7 95       	ror	r26
    2a22:	f0 40       	sbci	r31, 0x00	; 0
    2a24:	53 95       	inc	r21
    2a26:	c9 f7       	brne	.-14     	; 0x2a1a <__addsf3x+0x4e>
    2a28:	7e f4       	brtc	.+30     	; 0x2a48 <__addsf3x+0x7c>
    2a2a:	1f 16       	cp	r1, r31
    2a2c:	ba 0b       	sbc	r27, r26
    2a2e:	62 0b       	sbc	r22, r18
    2a30:	73 0b       	sbc	r23, r19
    2a32:	84 0b       	sbc	r24, r20
    2a34:	ba f0       	brmi	.+46     	; 0x2a64 <__addsf3x+0x98>
    2a36:	91 50       	subi	r25, 0x01	; 1
    2a38:	a1 f0       	breq	.+40     	; 0x2a62 <__addsf3x+0x96>
    2a3a:	ff 0f       	add	r31, r31
    2a3c:	bb 1f       	adc	r27, r27
    2a3e:	66 1f       	adc	r22, r22
    2a40:	77 1f       	adc	r23, r23
    2a42:	88 1f       	adc	r24, r24
    2a44:	c2 f7       	brpl	.-16     	; 0x2a36 <__addsf3x+0x6a>
    2a46:	0e c0       	rjmp	.+28     	; 0x2a64 <__addsf3x+0x98>
    2a48:	ba 0f       	add	r27, r26
    2a4a:	62 1f       	adc	r22, r18
    2a4c:	73 1f       	adc	r23, r19
    2a4e:	84 1f       	adc	r24, r20
    2a50:	48 f4       	brcc	.+18     	; 0x2a64 <__addsf3x+0x98>
    2a52:	87 95       	ror	r24
    2a54:	77 95       	ror	r23
    2a56:	67 95       	ror	r22
    2a58:	b7 95       	ror	r27
    2a5a:	f7 95       	ror	r31
    2a5c:	9e 3f       	cpi	r25, 0xFE	; 254
    2a5e:	08 f0       	brcs	.+2      	; 0x2a62 <__addsf3x+0x96>
    2a60:	b3 cf       	rjmp	.-154    	; 0x29c8 <__addsf3+0x1e>
    2a62:	93 95       	inc	r25
    2a64:	88 0f       	add	r24, r24
    2a66:	08 f0       	brcs	.+2      	; 0x2a6a <__addsf3x+0x9e>
    2a68:	99 27       	eor	r25, r25
    2a6a:	ee 0f       	add	r30, r30
    2a6c:	97 95       	ror	r25
    2a6e:	87 95       	ror	r24
    2a70:	08 95       	ret

00002a72 <asin>:
    2a72:	9f 93       	push	r25
    2a74:	9f 77       	andi	r25, 0x7F	; 127
    2a76:	ee e3       	ldi	r30, 0x3E	; 62
    2a78:	89 37       	cpi	r24, 0x79	; 121
    2a7a:	9e 07       	cpc	r25, r30
    2a7c:	20 f4       	brcc	.+8      	; 0x2a86 <asin+0x14>
    2a7e:	ec e8       	ldi	r30, 0x8C	; 140
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	ba d1       	rcall	.+884    	; 0x2df8 <__fp_powsodd>
    2a84:	09 c0       	rjmp	.+18     	; 0x2a98 <asin+0x26>
    2a86:	4b d1       	rcall	.+662    	; 0x2d1e <__fp_arccos>
    2a88:	90 58       	subi	r25, 0x80	; 128
    2a8a:	a2 ea       	ldi	r26, 0xA2	; 162
    2a8c:	2a ed       	ldi	r18, 0xDA	; 218
    2a8e:	3f e0       	ldi	r19, 0x0F	; 15
    2a90:	49 ec       	ldi	r20, 0xC9	; 201
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	9b df       	rcall	.-202    	; 0x29cc <__addsf3x>
    2a96:	f7 d1       	rcall	.+1006   	; 0x2e86 <__fp_round>
    2a98:	0f 90       	pop	r0
    2a9a:	07 fc       	sbrc	r0, 7
    2a9c:	90 58       	subi	r25, 0x80	; 128
    2a9e:	08 95       	ret
    2aa0:	bc d1       	rcall	.+888    	; 0x2e1a <__fp_pscA>
    2aa2:	58 f0       	brcs	.+22     	; 0x2aba <asin+0x48>
    2aa4:	80 e8       	ldi	r24, 0x80	; 128
    2aa6:	91 e0       	ldi	r25, 0x01	; 1
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <asin+0x3a>
    2aaa:	9e ef       	ldi	r25, 0xFE	; 254
    2aac:	bd d1       	rcall	.+890    	; 0x2e28 <__fp_pscB>
    2aae:	28 f0       	brcs	.+10     	; 0x2aba <asin+0x48>
    2ab0:	40 e8       	ldi	r20, 0x80	; 128
    2ab2:	51 e0       	ldi	r21, 0x01	; 1
    2ab4:	59 f4       	brne	.+22     	; 0x2acc <atan2+0xe>
    2ab6:	5e ef       	ldi	r21, 0xFE	; 254
    2ab8:	09 c0       	rjmp	.+18     	; 0x2acc <atan2+0xe>
    2aba:	76 c1       	rjmp	.+748    	; 0x2da8 <__fp_nan>
    2abc:	28 c2       	rjmp	.+1104   	; 0x2f0e <__fp_zero>

00002abe <atan2>:
    2abe:	e9 2f       	mov	r30, r25
    2ac0:	e0 78       	andi	r30, 0x80	; 128
    2ac2:	03 d2       	rcall	.+1030   	; 0x2eca <__fp_split3>
    2ac4:	68 f3       	brcs	.-38     	; 0x2aa0 <asin+0x2e>
    2ac6:	09 2e       	mov	r0, r25
    2ac8:	05 2a       	or	r0, r21
    2aca:	c1 f3       	breq	.-16     	; 0x2abc <asin+0x4a>
    2acc:	26 17       	cp	r18, r22
    2ace:	37 07       	cpc	r19, r23
    2ad0:	48 07       	cpc	r20, r24
    2ad2:	59 07       	cpc	r21, r25
    2ad4:	38 f0       	brcs	.+14     	; 0x2ae4 <atan2+0x26>
    2ad6:	0e 2e       	mov	r0, r30
    2ad8:	07 f8       	bld	r0, 7
    2ada:	e0 25       	eor	r30, r0
    2adc:	69 f0       	breq	.+26     	; 0x2af8 <atan2+0x3a>
    2ade:	e0 25       	eor	r30, r0
    2ae0:	e0 64       	ori	r30, 0x40	; 64
    2ae2:	0a c0       	rjmp	.+20     	; 0x2af8 <atan2+0x3a>
    2ae4:	ef 63       	ori	r30, 0x3F	; 63
    2ae6:	07 f8       	bld	r0, 7
    2ae8:	00 94       	com	r0
    2aea:	07 fa       	bst	r0, 7
    2aec:	db 01       	movw	r26, r22
    2aee:	b9 01       	movw	r22, r18
    2af0:	9d 01       	movw	r18, r26
    2af2:	dc 01       	movw	r26, r24
    2af4:	ca 01       	movw	r24, r20
    2af6:	ad 01       	movw	r20, r26
    2af8:	ef 93       	push	r30
    2afa:	4a d0       	rcall	.+148    	; 0x2b90 <__divsf3_pse>
    2afc:	c4 d1       	rcall	.+904    	; 0x2e86 <__fp_round>
    2afe:	0a d0       	rcall	.+20     	; 0x2b14 <atan>
    2b00:	5f 91       	pop	r21
    2b02:	55 23       	and	r21, r21
    2b04:	31 f0       	breq	.+12     	; 0x2b12 <atan2+0x54>
    2b06:	2b ed       	ldi	r18, 0xDB	; 219
    2b08:	3f e0       	ldi	r19, 0x0F	; 15
    2b0a:	49 e4       	ldi	r20, 0x49	; 73
    2b0c:	50 fd       	sbrc	r21, 0
    2b0e:	49 ec       	ldi	r20, 0xC9	; 201
    2b10:	4c cf       	rjmp	.-360    	; 0x29aa <__addsf3>
    2b12:	08 95       	ret

00002b14 <atan>:
    2b14:	df 93       	push	r29
    2b16:	dd 27       	eor	r29, r29
    2b18:	b9 2f       	mov	r27, r25
    2b1a:	bf 77       	andi	r27, 0x7F	; 127
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	16 16       	cp	r1, r22
    2b22:	17 06       	cpc	r1, r23
    2b24:	48 07       	cpc	r20, r24
    2b26:	5b 07       	cpc	r21, r27
    2b28:	10 f4       	brcc	.+4      	; 0x2b2e <atan+0x1a>
    2b2a:	d9 2f       	mov	r29, r25
    2b2c:	f7 d1       	rcall	.+1006   	; 0x2f1c <inverse>
    2b2e:	9f 93       	push	r25
    2b30:	8f 93       	push	r24
    2b32:	7f 93       	push	r23
    2b34:	6f 93       	push	r22
    2b36:	a4 d2       	rcall	.+1352   	; 0x3080 <square>
    2b38:	e0 ea       	ldi	r30, 0xA0	; 160
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	38 d1       	rcall	.+624    	; 0x2dae <__fp_powser>
    2b3e:	a3 d1       	rcall	.+838    	; 0x2e86 <__fp_round>
    2b40:	2f 91       	pop	r18
    2b42:	3f 91       	pop	r19
    2b44:	4f 91       	pop	r20
    2b46:	5f 91       	pop	r21
    2b48:	fc d1       	rcall	.+1016   	; 0x2f42 <__mulsf3x>
    2b4a:	dd 23       	and	r29, r29
    2b4c:	49 f0       	breq	.+18     	; 0x2b60 <atan+0x4c>
    2b4e:	90 58       	subi	r25, 0x80	; 128
    2b50:	a2 ea       	ldi	r26, 0xA2	; 162
    2b52:	2a ed       	ldi	r18, 0xDA	; 218
    2b54:	3f e0       	ldi	r19, 0x0F	; 15
    2b56:	49 ec       	ldi	r20, 0xC9	; 201
    2b58:	5f e3       	ldi	r21, 0x3F	; 63
    2b5a:	d0 78       	andi	r29, 0x80	; 128
    2b5c:	5d 27       	eor	r21, r29
    2b5e:	36 df       	rcall	.-404    	; 0x29cc <__addsf3x>
    2b60:	df 91       	pop	r29
    2b62:	91 c1       	rjmp	.+802    	; 0x2e86 <__fp_round>

00002b64 <__cmpsf2>:
    2b64:	f7 d0       	rcall	.+494    	; 0x2d54 <__fp_cmp>
    2b66:	08 f4       	brcc	.+2      	; 0x2b6a <__cmpsf2+0x6>
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	08 95       	ret

00002b6c <cos>:
    2b6c:	65 d1       	rcall	.+714    	; 0x2e38 <__fp_rempio2>
    2b6e:	e3 95       	inc	r30
    2b70:	9b c1       	rjmp	.+822    	; 0x2ea8 <__fp_sinus>

00002b72 <__divsf3>:
    2b72:	0c d0       	rcall	.+24     	; 0x2b8c <__divsf3x>
    2b74:	88 c1       	rjmp	.+784    	; 0x2e86 <__fp_round>
    2b76:	58 d1       	rcall	.+688    	; 0x2e28 <__fp_pscB>
    2b78:	40 f0       	brcs	.+16     	; 0x2b8a <__divsf3+0x18>
    2b7a:	4f d1       	rcall	.+670    	; 0x2e1a <__fp_pscA>
    2b7c:	30 f0       	brcs	.+12     	; 0x2b8a <__divsf3+0x18>
    2b7e:	21 f4       	brne	.+8      	; 0x2b88 <__divsf3+0x16>
    2b80:	5f 3f       	cpi	r21, 0xFF	; 255
    2b82:	19 f0       	breq	.+6      	; 0x2b8a <__divsf3+0x18>
    2b84:	0b c1       	rjmp	.+534    	; 0x2d9c <__fp_inf>
    2b86:	51 11       	cpse	r21, r1
    2b88:	c3 c1       	rjmp	.+902    	; 0x2f10 <__fp_szero>
    2b8a:	0e c1       	rjmp	.+540    	; 0x2da8 <__fp_nan>

00002b8c <__divsf3x>:
    2b8c:	9e d1       	rcall	.+828    	; 0x2eca <__fp_split3>
    2b8e:	98 f3       	brcs	.-26     	; 0x2b76 <__divsf3+0x4>

00002b90 <__divsf3_pse>:
    2b90:	99 23       	and	r25, r25
    2b92:	c9 f3       	breq	.-14     	; 0x2b86 <__divsf3+0x14>
    2b94:	55 23       	and	r21, r21
    2b96:	b1 f3       	breq	.-20     	; 0x2b84 <__divsf3+0x12>
    2b98:	95 1b       	sub	r25, r21
    2b9a:	55 0b       	sbc	r21, r21
    2b9c:	bb 27       	eor	r27, r27
    2b9e:	aa 27       	eor	r26, r26
    2ba0:	62 17       	cp	r22, r18
    2ba2:	73 07       	cpc	r23, r19
    2ba4:	84 07       	cpc	r24, r20
    2ba6:	38 f0       	brcs	.+14     	; 0x2bb6 <__divsf3_pse+0x26>
    2ba8:	9f 5f       	subi	r25, 0xFF	; 255
    2baa:	5f 4f       	sbci	r21, 0xFF	; 255
    2bac:	22 0f       	add	r18, r18
    2bae:	33 1f       	adc	r19, r19
    2bb0:	44 1f       	adc	r20, r20
    2bb2:	aa 1f       	adc	r26, r26
    2bb4:	a9 f3       	breq	.-22     	; 0x2ba0 <__divsf3_pse+0x10>
    2bb6:	33 d0       	rcall	.+102    	; 0x2c1e <__divsf3_pse+0x8e>
    2bb8:	0e 2e       	mov	r0, r30
    2bba:	3a f0       	brmi	.+14     	; 0x2bca <__divsf3_pse+0x3a>
    2bbc:	e0 e8       	ldi	r30, 0x80	; 128
    2bbe:	30 d0       	rcall	.+96     	; 0x2c20 <__divsf3_pse+0x90>
    2bc0:	91 50       	subi	r25, 0x01	; 1
    2bc2:	50 40       	sbci	r21, 0x00	; 0
    2bc4:	e6 95       	lsr	r30
    2bc6:	00 1c       	adc	r0, r0
    2bc8:	ca f7       	brpl	.-14     	; 0x2bbc <__divsf3_pse+0x2c>
    2bca:	29 d0       	rcall	.+82     	; 0x2c1e <__divsf3_pse+0x8e>
    2bcc:	fe 2f       	mov	r31, r30
    2bce:	27 d0       	rcall	.+78     	; 0x2c1e <__divsf3_pse+0x8e>
    2bd0:	66 0f       	add	r22, r22
    2bd2:	77 1f       	adc	r23, r23
    2bd4:	88 1f       	adc	r24, r24
    2bd6:	bb 1f       	adc	r27, r27
    2bd8:	26 17       	cp	r18, r22
    2bda:	37 07       	cpc	r19, r23
    2bdc:	48 07       	cpc	r20, r24
    2bde:	ab 07       	cpc	r26, r27
    2be0:	b0 e8       	ldi	r27, 0x80	; 128
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <__divsf3_pse+0x56>
    2be4:	bb 0b       	sbc	r27, r27
    2be6:	80 2d       	mov	r24, r0
    2be8:	bf 01       	movw	r22, r30
    2bea:	ff 27       	eor	r31, r31
    2bec:	93 58       	subi	r25, 0x83	; 131
    2bee:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf0:	2a f0       	brmi	.+10     	; 0x2bfc <__divsf3_pse+0x6c>
    2bf2:	9e 3f       	cpi	r25, 0xFE	; 254
    2bf4:	51 05       	cpc	r21, r1
    2bf6:	68 f0       	brcs	.+26     	; 0x2c12 <__divsf3_pse+0x82>
    2bf8:	d1 c0       	rjmp	.+418    	; 0x2d9c <__fp_inf>
    2bfa:	8a c1       	rjmp	.+788    	; 0x2f10 <__fp_szero>
    2bfc:	5f 3f       	cpi	r21, 0xFF	; 255
    2bfe:	ec f3       	brlt	.-6      	; 0x2bfa <__divsf3_pse+0x6a>
    2c00:	98 3e       	cpi	r25, 0xE8	; 232
    2c02:	dc f3       	brlt	.-10     	; 0x2bfa <__divsf3_pse+0x6a>
    2c04:	86 95       	lsr	r24
    2c06:	77 95       	ror	r23
    2c08:	67 95       	ror	r22
    2c0a:	b7 95       	ror	r27
    2c0c:	f7 95       	ror	r31
    2c0e:	9f 5f       	subi	r25, 0xFF	; 255
    2c10:	c9 f7       	brne	.-14     	; 0x2c04 <__divsf3_pse+0x74>
    2c12:	88 0f       	add	r24, r24
    2c14:	91 1d       	adc	r25, r1
    2c16:	96 95       	lsr	r25
    2c18:	87 95       	ror	r24
    2c1a:	97 f9       	bld	r25, 7
    2c1c:	08 95       	ret
    2c1e:	e1 e0       	ldi	r30, 0x01	; 1
    2c20:	66 0f       	add	r22, r22
    2c22:	77 1f       	adc	r23, r23
    2c24:	88 1f       	adc	r24, r24
    2c26:	bb 1f       	adc	r27, r27
    2c28:	62 17       	cp	r22, r18
    2c2a:	73 07       	cpc	r23, r19
    2c2c:	84 07       	cpc	r24, r20
    2c2e:	ba 07       	cpc	r27, r26
    2c30:	20 f0       	brcs	.+8      	; 0x2c3a <__divsf3_pse+0xaa>
    2c32:	62 1b       	sub	r22, r18
    2c34:	73 0b       	sbc	r23, r19
    2c36:	84 0b       	sbc	r24, r20
    2c38:	ba 0b       	sbc	r27, r26
    2c3a:	ee 1f       	adc	r30, r30
    2c3c:	88 f7       	brcc	.-30     	; 0x2c20 <__divsf3_pse+0x90>
    2c3e:	e0 95       	com	r30
    2c40:	08 95       	ret

00002c42 <__fixsfsi>:
    2c42:	04 d0       	rcall	.+8      	; 0x2c4c <__fixunssfsi>
    2c44:	68 94       	set
    2c46:	b1 11       	cpse	r27, r1
    2c48:	63 c1       	rjmp	.+710    	; 0x2f10 <__fp_szero>
    2c4a:	08 95       	ret

00002c4c <__fixunssfsi>:
    2c4c:	46 d1       	rcall	.+652    	; 0x2eda <__fp_splitA>
    2c4e:	88 f0       	brcs	.+34     	; 0x2c72 <__fixunssfsi+0x26>
    2c50:	9f 57       	subi	r25, 0x7F	; 127
    2c52:	90 f0       	brcs	.+36     	; 0x2c78 <__fixunssfsi+0x2c>
    2c54:	b9 2f       	mov	r27, r25
    2c56:	99 27       	eor	r25, r25
    2c58:	b7 51       	subi	r27, 0x17	; 23
    2c5a:	a0 f0       	brcs	.+40     	; 0x2c84 <__fixunssfsi+0x38>
    2c5c:	d1 f0       	breq	.+52     	; 0x2c92 <__fixunssfsi+0x46>
    2c5e:	66 0f       	add	r22, r22
    2c60:	77 1f       	adc	r23, r23
    2c62:	88 1f       	adc	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	1a f0       	brmi	.+6      	; 0x2c6e <__fixunssfsi+0x22>
    2c68:	ba 95       	dec	r27
    2c6a:	c9 f7       	brne	.-14     	; 0x2c5e <__fixunssfsi+0x12>
    2c6c:	12 c0       	rjmp	.+36     	; 0x2c92 <__fixunssfsi+0x46>
    2c6e:	b1 30       	cpi	r27, 0x01	; 1
    2c70:	81 f0       	breq	.+32     	; 0x2c92 <__fixunssfsi+0x46>
    2c72:	4d d1       	rcall	.+666    	; 0x2f0e <__fp_zero>
    2c74:	b1 e0       	ldi	r27, 0x01	; 1
    2c76:	08 95       	ret
    2c78:	4a c1       	rjmp	.+660    	; 0x2f0e <__fp_zero>
    2c7a:	67 2f       	mov	r22, r23
    2c7c:	78 2f       	mov	r23, r24
    2c7e:	88 27       	eor	r24, r24
    2c80:	b8 5f       	subi	r27, 0xF8	; 248
    2c82:	39 f0       	breq	.+14     	; 0x2c92 <__fixunssfsi+0x46>
    2c84:	b9 3f       	cpi	r27, 0xF9	; 249
    2c86:	cc f3       	brlt	.-14     	; 0x2c7a <__fixunssfsi+0x2e>
    2c88:	86 95       	lsr	r24
    2c8a:	77 95       	ror	r23
    2c8c:	67 95       	ror	r22
    2c8e:	b3 95       	inc	r27
    2c90:	d9 f7       	brne	.-10     	; 0x2c88 <__fixunssfsi+0x3c>
    2c92:	3e f4       	brtc	.+14     	; 0x2ca2 <__fixunssfsi+0x56>
    2c94:	90 95       	com	r25
    2c96:	80 95       	com	r24
    2c98:	70 95       	com	r23
    2c9a:	61 95       	neg	r22
    2c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca2:	08 95       	ret

00002ca4 <__floatunsisf>:
    2ca4:	e8 94       	clt
    2ca6:	09 c0       	rjmp	.+18     	; 0x2cba <__floatsisf+0x12>

00002ca8 <__floatsisf>:
    2ca8:	97 fb       	bst	r25, 7
    2caa:	3e f4       	brtc	.+14     	; 0x2cba <__floatsisf+0x12>
    2cac:	90 95       	com	r25
    2cae:	80 95       	com	r24
    2cb0:	70 95       	com	r23
    2cb2:	61 95       	neg	r22
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cba:	99 23       	and	r25, r25
    2cbc:	a9 f0       	breq	.+42     	; 0x2ce8 <__floatsisf+0x40>
    2cbe:	f9 2f       	mov	r31, r25
    2cc0:	96 e9       	ldi	r25, 0x96	; 150
    2cc2:	bb 27       	eor	r27, r27
    2cc4:	93 95       	inc	r25
    2cc6:	f6 95       	lsr	r31
    2cc8:	87 95       	ror	r24
    2cca:	77 95       	ror	r23
    2ccc:	67 95       	ror	r22
    2cce:	b7 95       	ror	r27
    2cd0:	f1 11       	cpse	r31, r1
    2cd2:	f8 cf       	rjmp	.-16     	; 0x2cc4 <__floatsisf+0x1c>
    2cd4:	fa f4       	brpl	.+62     	; 0x2d14 <__floatsisf+0x6c>
    2cd6:	bb 0f       	add	r27, r27
    2cd8:	11 f4       	brne	.+4      	; 0x2cde <__floatsisf+0x36>
    2cda:	60 ff       	sbrs	r22, 0
    2cdc:	1b c0       	rjmp	.+54     	; 0x2d14 <__floatsisf+0x6c>
    2cde:	6f 5f       	subi	r22, 0xFF	; 255
    2ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce6:	16 c0       	rjmp	.+44     	; 0x2d14 <__floatsisf+0x6c>
    2ce8:	88 23       	and	r24, r24
    2cea:	11 f0       	breq	.+4      	; 0x2cf0 <__floatsisf+0x48>
    2cec:	96 e9       	ldi	r25, 0x96	; 150
    2cee:	11 c0       	rjmp	.+34     	; 0x2d12 <__floatsisf+0x6a>
    2cf0:	77 23       	and	r23, r23
    2cf2:	21 f0       	breq	.+8      	; 0x2cfc <__floatsisf+0x54>
    2cf4:	9e e8       	ldi	r25, 0x8E	; 142
    2cf6:	87 2f       	mov	r24, r23
    2cf8:	76 2f       	mov	r23, r22
    2cfa:	05 c0       	rjmp	.+10     	; 0x2d06 <__floatsisf+0x5e>
    2cfc:	66 23       	and	r22, r22
    2cfe:	71 f0       	breq	.+28     	; 0x2d1c <__floatsisf+0x74>
    2d00:	96 e8       	ldi	r25, 0x86	; 134
    2d02:	86 2f       	mov	r24, r22
    2d04:	70 e0       	ldi	r23, 0x00	; 0
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	2a f0       	brmi	.+10     	; 0x2d14 <__floatsisf+0x6c>
    2d0a:	9a 95       	dec	r25
    2d0c:	66 0f       	add	r22, r22
    2d0e:	77 1f       	adc	r23, r23
    2d10:	88 1f       	adc	r24, r24
    2d12:	da f7       	brpl	.-10     	; 0x2d0a <__floatsisf+0x62>
    2d14:	88 0f       	add	r24, r24
    2d16:	96 95       	lsr	r25
    2d18:	87 95       	ror	r24
    2d1a:	97 f9       	bld	r25, 7
    2d1c:	08 95       	ret

00002d1e <__fp_arccos>:
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	1f 93       	push	r17
    2d24:	0f 93       	push	r16
    2d26:	8b 01       	movw	r16, r22
    2d28:	ec 01       	movw	r28, r24
    2d2a:	ed ec       	ldi	r30, 0xCD	; 205
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	3f d0       	rcall	.+126    	; 0x2dae <__fp_powser>
    2d30:	aa d0       	rcall	.+340    	; 0x2e86 <__fp_round>
    2d32:	98 01       	movw	r18, r16
    2d34:	ae 01       	movw	r20, r28
    2d36:	8b 01       	movw	r16, r22
    2d38:	ec 01       	movw	r28, r24
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	70 e0       	ldi	r23, 0x00	; 0
    2d3e:	80 e8       	ldi	r24, 0x80	; 128
    2d40:	9f e3       	ldi	r25, 0x3F	; 63
    2d42:	32 de       	rcall	.-924    	; 0x29a8 <__subsf3>
    2d44:	5f d1       	rcall	.+702    	; 0x3004 <sqrt>
    2d46:	98 01       	movw	r18, r16
    2d48:	ae 01       	movw	r20, r28
    2d4a:	0f 91       	pop	r16
    2d4c:	1f 91       	pop	r17
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	f7 c0       	rjmp	.+494    	; 0x2f42 <__mulsf3x>

00002d54 <__fp_cmp>:
    2d54:	99 0f       	add	r25, r25
    2d56:	00 08       	sbc	r0, r0
    2d58:	55 0f       	add	r21, r21
    2d5a:	aa 0b       	sbc	r26, r26
    2d5c:	e0 e8       	ldi	r30, 0x80	; 128
    2d5e:	fe ef       	ldi	r31, 0xFE	; 254
    2d60:	16 16       	cp	r1, r22
    2d62:	17 06       	cpc	r1, r23
    2d64:	e8 07       	cpc	r30, r24
    2d66:	f9 07       	cpc	r31, r25
    2d68:	c0 f0       	brcs	.+48     	; 0x2d9a <__fp_cmp+0x46>
    2d6a:	12 16       	cp	r1, r18
    2d6c:	13 06       	cpc	r1, r19
    2d6e:	e4 07       	cpc	r30, r20
    2d70:	f5 07       	cpc	r31, r21
    2d72:	98 f0       	brcs	.+38     	; 0x2d9a <__fp_cmp+0x46>
    2d74:	62 1b       	sub	r22, r18
    2d76:	73 0b       	sbc	r23, r19
    2d78:	84 0b       	sbc	r24, r20
    2d7a:	95 0b       	sbc	r25, r21
    2d7c:	39 f4       	brne	.+14     	; 0x2d8c <__fp_cmp+0x38>
    2d7e:	0a 26       	eor	r0, r26
    2d80:	61 f0       	breq	.+24     	; 0x2d9a <__fp_cmp+0x46>
    2d82:	23 2b       	or	r18, r19
    2d84:	24 2b       	or	r18, r20
    2d86:	25 2b       	or	r18, r21
    2d88:	21 f4       	brne	.+8      	; 0x2d92 <__fp_cmp+0x3e>
    2d8a:	08 95       	ret
    2d8c:	0a 26       	eor	r0, r26
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <__fp_cmp+0x3e>
    2d90:	a1 40       	sbci	r26, 0x01	; 1
    2d92:	a6 95       	lsr	r26
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	81 1d       	adc	r24, r1
    2d98:	81 1d       	adc	r24, r1
    2d9a:	08 95       	ret

00002d9c <__fp_inf>:
    2d9c:	97 f9       	bld	r25, 7
    2d9e:	9f 67       	ori	r25, 0x7F	; 127
    2da0:	80 e8       	ldi	r24, 0x80	; 128
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	08 95       	ret

00002da8 <__fp_nan>:
    2da8:	9f ef       	ldi	r25, 0xFF	; 255
    2daa:	80 ec       	ldi	r24, 0xC0	; 192
    2dac:	08 95       	ret

00002dae <__fp_powser>:
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	1f 93       	push	r17
    2db4:	0f 93       	push	r16
    2db6:	ff 92       	push	r15
    2db8:	ef 92       	push	r14
    2dba:	df 92       	push	r13
    2dbc:	7b 01       	movw	r14, r22
    2dbe:	8c 01       	movw	r16, r24
    2dc0:	68 94       	set
    2dc2:	05 c0       	rjmp	.+10     	; 0x2dce <__fp_powser+0x20>
    2dc4:	da 2e       	mov	r13, r26
    2dc6:	ef 01       	movw	r28, r30
    2dc8:	bc d0       	rcall	.+376    	; 0x2f42 <__mulsf3x>
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e8 94       	clt
    2dce:	a5 91       	lpm	r26, Z+
    2dd0:	25 91       	lpm	r18, Z+
    2dd2:	35 91       	lpm	r19, Z+
    2dd4:	45 91       	lpm	r20, Z+
    2dd6:	55 91       	lpm	r21, Z+
    2dd8:	ae f3       	brts	.-22     	; 0x2dc4 <__fp_powser+0x16>
    2dda:	ef 01       	movw	r28, r30
    2ddc:	f7 dd       	rcall	.-1042   	; 0x29cc <__addsf3x>
    2dde:	fe 01       	movw	r30, r28
    2de0:	97 01       	movw	r18, r14
    2de2:	a8 01       	movw	r20, r16
    2de4:	da 94       	dec	r13
    2de6:	79 f7       	brne	.-34     	; 0x2dc6 <__fp_powser+0x18>
    2de8:	df 90       	pop	r13
    2dea:	ef 90       	pop	r14
    2dec:	ff 90       	pop	r15
    2dee:	0f 91       	pop	r16
    2df0:	1f 91       	pop	r17
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <__fp_powsodd>:
    2df8:	9f 93       	push	r25
    2dfa:	8f 93       	push	r24
    2dfc:	7f 93       	push	r23
    2dfe:	6f 93       	push	r22
    2e00:	ff 93       	push	r31
    2e02:	ef 93       	push	r30
    2e04:	9b 01       	movw	r18, r22
    2e06:	ac 01       	movw	r20, r24
    2e08:	90 d0       	rcall	.+288    	; 0x2f2a <__mulsf3>
    2e0a:	ef 91       	pop	r30
    2e0c:	ff 91       	pop	r31
    2e0e:	cf df       	rcall	.-98     	; 0x2dae <__fp_powser>
    2e10:	2f 91       	pop	r18
    2e12:	3f 91       	pop	r19
    2e14:	4f 91       	pop	r20
    2e16:	5f 91       	pop	r21
    2e18:	88 c0       	rjmp	.+272    	; 0x2f2a <__mulsf3>

00002e1a <__fp_pscA>:
    2e1a:	00 24       	eor	r0, r0
    2e1c:	0a 94       	dec	r0
    2e1e:	16 16       	cp	r1, r22
    2e20:	17 06       	cpc	r1, r23
    2e22:	18 06       	cpc	r1, r24
    2e24:	09 06       	cpc	r0, r25
    2e26:	08 95       	ret

00002e28 <__fp_pscB>:
    2e28:	00 24       	eor	r0, r0
    2e2a:	0a 94       	dec	r0
    2e2c:	12 16       	cp	r1, r18
    2e2e:	13 06       	cpc	r1, r19
    2e30:	14 06       	cpc	r1, r20
    2e32:	05 06       	cpc	r0, r21
    2e34:	08 95       	ret
    2e36:	b8 cf       	rjmp	.-144    	; 0x2da8 <__fp_nan>

00002e38 <__fp_rempio2>:
    2e38:	50 d0       	rcall	.+160    	; 0x2eda <__fp_splitA>
    2e3a:	e8 f3       	brcs	.-6      	; 0x2e36 <__fp_pscB+0xe>
    2e3c:	e8 94       	clt
    2e3e:	e0 e0       	ldi	r30, 0x00	; 0
    2e40:	bb 27       	eor	r27, r27
    2e42:	9f 57       	subi	r25, 0x7F	; 127
    2e44:	f0 f0       	brcs	.+60     	; 0x2e82 <__fp_rempio2+0x4a>
    2e46:	2a ed       	ldi	r18, 0xDA	; 218
    2e48:	3f e0       	ldi	r19, 0x0F	; 15
    2e4a:	49 ec       	ldi	r20, 0xC9	; 201
    2e4c:	06 c0       	rjmp	.+12     	; 0x2e5a <__fp_rempio2+0x22>
    2e4e:	ee 0f       	add	r30, r30
    2e50:	bb 0f       	add	r27, r27
    2e52:	66 1f       	adc	r22, r22
    2e54:	77 1f       	adc	r23, r23
    2e56:	88 1f       	adc	r24, r24
    2e58:	28 f0       	brcs	.+10     	; 0x2e64 <__fp_rempio2+0x2c>
    2e5a:	b2 3a       	cpi	r27, 0xA2	; 162
    2e5c:	62 07       	cpc	r22, r18
    2e5e:	73 07       	cpc	r23, r19
    2e60:	84 07       	cpc	r24, r20
    2e62:	28 f0       	brcs	.+10     	; 0x2e6e <__fp_rempio2+0x36>
    2e64:	b2 5a       	subi	r27, 0xA2	; 162
    2e66:	62 0b       	sbc	r22, r18
    2e68:	73 0b       	sbc	r23, r19
    2e6a:	84 0b       	sbc	r24, r20
    2e6c:	e3 95       	inc	r30
    2e6e:	9a 95       	dec	r25
    2e70:	72 f7       	brpl	.-36     	; 0x2e4e <__fp_rempio2+0x16>
    2e72:	80 38       	cpi	r24, 0x80	; 128
    2e74:	30 f4       	brcc	.+12     	; 0x2e82 <__fp_rempio2+0x4a>
    2e76:	9a 95       	dec	r25
    2e78:	bb 0f       	add	r27, r27
    2e7a:	66 1f       	adc	r22, r22
    2e7c:	77 1f       	adc	r23, r23
    2e7e:	88 1f       	adc	r24, r24
    2e80:	d2 f7       	brpl	.-12     	; 0x2e76 <__fp_rempio2+0x3e>
    2e82:	90 48       	sbci	r25, 0x80	; 128
    2e84:	02 c1       	rjmp	.+516    	; 0x308a <__fp_mpack_finite>

00002e86 <__fp_round>:
    2e86:	09 2e       	mov	r0, r25
    2e88:	03 94       	inc	r0
    2e8a:	00 0c       	add	r0, r0
    2e8c:	11 f4       	brne	.+4      	; 0x2e92 <__fp_round+0xc>
    2e8e:	88 23       	and	r24, r24
    2e90:	52 f0       	brmi	.+20     	; 0x2ea6 <__fp_round+0x20>
    2e92:	bb 0f       	add	r27, r27
    2e94:	40 f4       	brcc	.+16     	; 0x2ea6 <__fp_round+0x20>
    2e96:	bf 2b       	or	r27, r31
    2e98:	11 f4       	brne	.+4      	; 0x2e9e <__fp_round+0x18>
    2e9a:	60 ff       	sbrs	r22, 0
    2e9c:	04 c0       	rjmp	.+8      	; 0x2ea6 <__fp_round+0x20>
    2e9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea6:	08 95       	ret

00002ea8 <__fp_sinus>:
    2ea8:	ef 93       	push	r30
    2eaa:	e0 ff       	sbrs	r30, 0
    2eac:	06 c0       	rjmp	.+12     	; 0x2eba <__fp_sinus+0x12>
    2eae:	a2 ea       	ldi	r26, 0xA2	; 162
    2eb0:	2a ed       	ldi	r18, 0xDA	; 218
    2eb2:	3f e0       	ldi	r19, 0x0F	; 15
    2eb4:	49 ec       	ldi	r20, 0xC9	; 201
    2eb6:	5f eb       	ldi	r21, 0xBF	; 191
    2eb8:	89 dd       	rcall	.-1262   	; 0x29cc <__addsf3x>
    2eba:	e5 df       	rcall	.-54     	; 0x2e86 <__fp_round>
    2ebc:	0f 90       	pop	r0
    2ebe:	03 94       	inc	r0
    2ec0:	01 fc       	sbrc	r0, 1
    2ec2:	90 58       	subi	r25, 0x80	; 128
    2ec4:	e5 ef       	ldi	r30, 0xF5	; 245
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	97 cf       	rjmp	.-210    	; 0x2df8 <__fp_powsodd>

00002eca <__fp_split3>:
    2eca:	57 fd       	sbrc	r21, 7
    2ecc:	90 58       	subi	r25, 0x80	; 128
    2ece:	44 0f       	add	r20, r20
    2ed0:	55 1f       	adc	r21, r21
    2ed2:	59 f0       	breq	.+22     	; 0x2eea <__fp_splitA+0x10>
    2ed4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ed6:	71 f0       	breq	.+28     	; 0x2ef4 <__fp_splitA+0x1a>
    2ed8:	47 95       	ror	r20

00002eda <__fp_splitA>:
    2eda:	88 0f       	add	r24, r24
    2edc:	97 fb       	bst	r25, 7
    2ede:	99 1f       	adc	r25, r25
    2ee0:	61 f0       	breq	.+24     	; 0x2efa <__fp_splitA+0x20>
    2ee2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ee4:	79 f0       	breq	.+30     	; 0x2f04 <__fp_splitA+0x2a>
    2ee6:	87 95       	ror	r24
    2ee8:	08 95       	ret
    2eea:	12 16       	cp	r1, r18
    2eec:	13 06       	cpc	r1, r19
    2eee:	14 06       	cpc	r1, r20
    2ef0:	55 1f       	adc	r21, r21
    2ef2:	f2 cf       	rjmp	.-28     	; 0x2ed8 <__fp_split3+0xe>
    2ef4:	46 95       	lsr	r20
    2ef6:	f1 df       	rcall	.-30     	; 0x2eda <__fp_splitA>
    2ef8:	08 c0       	rjmp	.+16     	; 0x2f0a <__fp_splitA+0x30>
    2efa:	16 16       	cp	r1, r22
    2efc:	17 06       	cpc	r1, r23
    2efe:	18 06       	cpc	r1, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	f1 cf       	rjmp	.-30     	; 0x2ee6 <__fp_splitA+0xc>
    2f04:	86 95       	lsr	r24
    2f06:	71 05       	cpc	r23, r1
    2f08:	61 05       	cpc	r22, r1
    2f0a:	08 94       	sec
    2f0c:	08 95       	ret

00002f0e <__fp_zero>:
    2f0e:	e8 94       	clt

00002f10 <__fp_szero>:
    2f10:	bb 27       	eor	r27, r27
    2f12:	66 27       	eor	r22, r22
    2f14:	77 27       	eor	r23, r23
    2f16:	cb 01       	movw	r24, r22
    2f18:	97 f9       	bld	r25, 7
    2f1a:	08 95       	ret

00002f1c <inverse>:
    2f1c:	9b 01       	movw	r18, r22
    2f1e:	ac 01       	movw	r20, r24
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	80 e8       	ldi	r24, 0x80	; 128
    2f26:	9f e3       	ldi	r25, 0x3F	; 63
    2f28:	24 ce       	rjmp	.-952    	; 0x2b72 <__divsf3>

00002f2a <__mulsf3>:
    2f2a:	0b d0       	rcall	.+22     	; 0x2f42 <__mulsf3x>
    2f2c:	ac cf       	rjmp	.-168    	; 0x2e86 <__fp_round>
    2f2e:	75 df       	rcall	.-278    	; 0x2e1a <__fp_pscA>
    2f30:	28 f0       	brcs	.+10     	; 0x2f3c <__mulsf3+0x12>
    2f32:	7a df       	rcall	.-268    	; 0x2e28 <__fp_pscB>
    2f34:	18 f0       	brcs	.+6      	; 0x2f3c <__mulsf3+0x12>
    2f36:	95 23       	and	r25, r21
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <__mulsf3+0x12>
    2f3a:	30 cf       	rjmp	.-416    	; 0x2d9c <__fp_inf>
    2f3c:	35 cf       	rjmp	.-406    	; 0x2da8 <__fp_nan>
    2f3e:	11 24       	eor	r1, r1
    2f40:	e7 cf       	rjmp	.-50     	; 0x2f10 <__fp_szero>

00002f42 <__mulsf3x>:
    2f42:	c3 df       	rcall	.-122    	; 0x2eca <__fp_split3>
    2f44:	a0 f3       	brcs	.-24     	; 0x2f2e <__mulsf3+0x4>

00002f46 <__mulsf3_pse>:
    2f46:	95 9f       	mul	r25, r21
    2f48:	d1 f3       	breq	.-12     	; 0x2f3e <__mulsf3+0x14>
    2f4a:	95 0f       	add	r25, r21
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	55 1f       	adc	r21, r21
    2f50:	62 9f       	mul	r22, r18
    2f52:	f0 01       	movw	r30, r0
    2f54:	72 9f       	mul	r23, r18
    2f56:	bb 27       	eor	r27, r27
    2f58:	f0 0d       	add	r31, r0
    2f5a:	b1 1d       	adc	r27, r1
    2f5c:	63 9f       	mul	r22, r19
    2f5e:	aa 27       	eor	r26, r26
    2f60:	f0 0d       	add	r31, r0
    2f62:	b1 1d       	adc	r27, r1
    2f64:	aa 1f       	adc	r26, r26
    2f66:	64 9f       	mul	r22, r20
    2f68:	66 27       	eor	r22, r22
    2f6a:	b0 0d       	add	r27, r0
    2f6c:	a1 1d       	adc	r26, r1
    2f6e:	66 1f       	adc	r22, r22
    2f70:	82 9f       	mul	r24, r18
    2f72:	22 27       	eor	r18, r18
    2f74:	b0 0d       	add	r27, r0
    2f76:	a1 1d       	adc	r26, r1
    2f78:	62 1f       	adc	r22, r18
    2f7a:	73 9f       	mul	r23, r19
    2f7c:	b0 0d       	add	r27, r0
    2f7e:	a1 1d       	adc	r26, r1
    2f80:	62 1f       	adc	r22, r18
    2f82:	83 9f       	mul	r24, r19
    2f84:	a0 0d       	add	r26, r0
    2f86:	61 1d       	adc	r22, r1
    2f88:	22 1f       	adc	r18, r18
    2f8a:	74 9f       	mul	r23, r20
    2f8c:	33 27       	eor	r19, r19
    2f8e:	a0 0d       	add	r26, r0
    2f90:	61 1d       	adc	r22, r1
    2f92:	23 1f       	adc	r18, r19
    2f94:	84 9f       	mul	r24, r20
    2f96:	60 0d       	add	r22, r0
    2f98:	21 1d       	adc	r18, r1
    2f9a:	82 2f       	mov	r24, r18
    2f9c:	76 2f       	mov	r23, r22
    2f9e:	6a 2f       	mov	r22, r26
    2fa0:	11 24       	eor	r1, r1
    2fa2:	9f 57       	subi	r25, 0x7F	; 127
    2fa4:	50 40       	sbci	r21, 0x00	; 0
    2fa6:	8a f0       	brmi	.+34     	; 0x2fca <__mulsf3_pse+0x84>
    2fa8:	e1 f0       	breq	.+56     	; 0x2fe2 <__mulsf3_pse+0x9c>
    2faa:	88 23       	and	r24, r24
    2fac:	4a f0       	brmi	.+18     	; 0x2fc0 <__mulsf3_pse+0x7a>
    2fae:	ee 0f       	add	r30, r30
    2fb0:	ff 1f       	adc	r31, r31
    2fb2:	bb 1f       	adc	r27, r27
    2fb4:	66 1f       	adc	r22, r22
    2fb6:	77 1f       	adc	r23, r23
    2fb8:	88 1f       	adc	r24, r24
    2fba:	91 50       	subi	r25, 0x01	; 1
    2fbc:	50 40       	sbci	r21, 0x00	; 0
    2fbe:	a9 f7       	brne	.-22     	; 0x2faa <__mulsf3_pse+0x64>
    2fc0:	9e 3f       	cpi	r25, 0xFE	; 254
    2fc2:	51 05       	cpc	r21, r1
    2fc4:	70 f0       	brcs	.+28     	; 0x2fe2 <__mulsf3_pse+0x9c>
    2fc6:	ea ce       	rjmp	.-556    	; 0x2d9c <__fp_inf>
    2fc8:	a3 cf       	rjmp	.-186    	; 0x2f10 <__fp_szero>
    2fca:	5f 3f       	cpi	r21, 0xFF	; 255
    2fcc:	ec f3       	brlt	.-6      	; 0x2fc8 <__mulsf3_pse+0x82>
    2fce:	98 3e       	cpi	r25, 0xE8	; 232
    2fd0:	dc f3       	brlt	.-10     	; 0x2fc8 <__mulsf3_pse+0x82>
    2fd2:	86 95       	lsr	r24
    2fd4:	77 95       	ror	r23
    2fd6:	67 95       	ror	r22
    2fd8:	b7 95       	ror	r27
    2fda:	f7 95       	ror	r31
    2fdc:	e7 95       	ror	r30
    2fde:	9f 5f       	subi	r25, 0xFF	; 255
    2fe0:	c1 f7       	brne	.-16     	; 0x2fd2 <__mulsf3_pse+0x8c>
    2fe2:	fe 2b       	or	r31, r30
    2fe4:	88 0f       	add	r24, r24
    2fe6:	91 1d       	adc	r25, r1
    2fe8:	96 95       	lsr	r25
    2fea:	87 95       	ror	r24
    2fec:	97 f9       	bld	r25, 7
    2fee:	08 95       	ret

00002ff0 <sin>:
    2ff0:	9f 93       	push	r25
    2ff2:	22 df       	rcall	.-444    	; 0x2e38 <__fp_rempio2>
    2ff4:	0f 90       	pop	r0
    2ff6:	07 fc       	sbrc	r0, 7
    2ff8:	ee 5f       	subi	r30, 0xFE	; 254
    2ffa:	56 cf       	rjmp	.-340    	; 0x2ea8 <__fp_sinus>
    2ffc:	11 f4       	brne	.+4      	; 0x3002 <sin+0x12>
    2ffe:	0e f4       	brtc	.+2      	; 0x3002 <sin+0x12>
    3000:	d3 ce       	rjmp	.-602    	; 0x2da8 <__fp_nan>
    3002:	41 c0       	rjmp	.+130    	; 0x3086 <__fp_mpack>

00003004 <sqrt>:
    3004:	6a df       	rcall	.-300    	; 0x2eda <__fp_splitA>
    3006:	d0 f3       	brcs	.-12     	; 0x2ffc <sin+0xc>
    3008:	99 23       	and	r25, r25
    300a:	d9 f3       	breq	.-10     	; 0x3002 <sin+0x12>
    300c:	ce f3       	brts	.-14     	; 0x3000 <sin+0x10>
    300e:	9f 57       	subi	r25, 0x7F	; 127
    3010:	55 0b       	sbc	r21, r21
    3012:	87 ff       	sbrs	r24, 7
    3014:	46 d0       	rcall	.+140    	; 0x30a2 <__fp_norm2>
    3016:	00 24       	eor	r0, r0
    3018:	a0 e6       	ldi	r26, 0x60	; 96
    301a:	40 ea       	ldi	r20, 0xA0	; 160
    301c:	90 01       	movw	r18, r0
    301e:	80 58       	subi	r24, 0x80	; 128
    3020:	56 95       	lsr	r21
    3022:	97 95       	ror	r25
    3024:	28 f4       	brcc	.+10     	; 0x3030 <sqrt+0x2c>
    3026:	80 5c       	subi	r24, 0xC0	; 192
    3028:	66 0f       	add	r22, r22
    302a:	77 1f       	adc	r23, r23
    302c:	88 1f       	adc	r24, r24
    302e:	20 f0       	brcs	.+8      	; 0x3038 <sqrt+0x34>
    3030:	26 17       	cp	r18, r22
    3032:	37 07       	cpc	r19, r23
    3034:	48 07       	cpc	r20, r24
    3036:	30 f4       	brcc	.+12     	; 0x3044 <sqrt+0x40>
    3038:	62 1b       	sub	r22, r18
    303a:	73 0b       	sbc	r23, r19
    303c:	84 0b       	sbc	r24, r20
    303e:	20 29       	or	r18, r0
    3040:	31 29       	or	r19, r1
    3042:	4a 2b       	or	r20, r26
    3044:	a6 95       	lsr	r26
    3046:	17 94       	ror	r1
    3048:	07 94       	ror	r0
    304a:	20 25       	eor	r18, r0
    304c:	31 25       	eor	r19, r1
    304e:	4a 27       	eor	r20, r26
    3050:	58 f7       	brcc	.-42     	; 0x3028 <sqrt+0x24>
    3052:	66 0f       	add	r22, r22
    3054:	77 1f       	adc	r23, r23
    3056:	88 1f       	adc	r24, r24
    3058:	20 f0       	brcs	.+8      	; 0x3062 <sqrt+0x5e>
    305a:	26 17       	cp	r18, r22
    305c:	37 07       	cpc	r19, r23
    305e:	48 07       	cpc	r20, r24
    3060:	30 f4       	brcc	.+12     	; 0x306e <sqrt+0x6a>
    3062:	62 0b       	sbc	r22, r18
    3064:	73 0b       	sbc	r23, r19
    3066:	84 0b       	sbc	r24, r20
    3068:	20 0d       	add	r18, r0
    306a:	31 1d       	adc	r19, r1
    306c:	41 1d       	adc	r20, r1
    306e:	a0 95       	com	r26
    3070:	81 f7       	brne	.-32     	; 0x3052 <sqrt+0x4e>
    3072:	b9 01       	movw	r22, r18
    3074:	84 2f       	mov	r24, r20
    3076:	91 58       	subi	r25, 0x81	; 129
    3078:	88 0f       	add	r24, r24
    307a:	96 95       	lsr	r25
    307c:	87 95       	ror	r24
    307e:	08 95       	ret

00003080 <square>:
    3080:	9b 01       	movw	r18, r22
    3082:	ac 01       	movw	r20, r24
    3084:	52 cf       	rjmp	.-348    	; 0x2f2a <__mulsf3>

00003086 <__fp_mpack>:
    3086:	9f 3f       	cpi	r25, 0xFF	; 255
    3088:	31 f0       	breq	.+12     	; 0x3096 <__fp_mpack_finite+0xc>

0000308a <__fp_mpack_finite>:
    308a:	91 50       	subi	r25, 0x01	; 1
    308c:	20 f4       	brcc	.+8      	; 0x3096 <__fp_mpack_finite+0xc>
    308e:	87 95       	ror	r24
    3090:	77 95       	ror	r23
    3092:	67 95       	ror	r22
    3094:	b7 95       	ror	r27
    3096:	88 0f       	add	r24, r24
    3098:	91 1d       	adc	r25, r1
    309a:	96 95       	lsr	r25
    309c:	87 95       	ror	r24
    309e:	97 f9       	bld	r25, 7
    30a0:	08 95       	ret

000030a2 <__fp_norm2>:
    30a2:	91 50       	subi	r25, 0x01	; 1
    30a4:	50 40       	sbci	r21, 0x00	; 0
    30a6:	66 0f       	add	r22, r22
    30a8:	77 1f       	adc	r23, r23
    30aa:	88 1f       	adc	r24, r24
    30ac:	d2 f7       	brpl	.-12     	; 0x30a2 <__fp_norm2>
    30ae:	08 95       	ret

000030b0 <__divmodhi4>:
    30b0:	97 fb       	bst	r25, 7
    30b2:	07 2e       	mov	r0, r23
    30b4:	16 f4       	brtc	.+4      	; 0x30ba <__divmodhi4+0xa>
    30b6:	00 94       	com	r0
    30b8:	06 d0       	rcall	.+12     	; 0x30c6 <__divmodhi4_neg1>
    30ba:	77 fd       	sbrc	r23, 7
    30bc:	08 d0       	rcall	.+16     	; 0x30ce <__divmodhi4_neg2>
    30be:	0b d0       	rcall	.+22     	; 0x30d6 <__udivmodhi4>
    30c0:	07 fc       	sbrc	r0, 7
    30c2:	05 d0       	rcall	.+10     	; 0x30ce <__divmodhi4_neg2>
    30c4:	3e f4       	brtc	.+14     	; 0x30d4 <__divmodhi4_exit>

000030c6 <__divmodhi4_neg1>:
    30c6:	90 95       	com	r25
    30c8:	81 95       	neg	r24
    30ca:	9f 4f       	sbci	r25, 0xFF	; 255
    30cc:	08 95       	ret

000030ce <__divmodhi4_neg2>:
    30ce:	70 95       	com	r23
    30d0:	61 95       	neg	r22
    30d2:	7f 4f       	sbci	r23, 0xFF	; 255

000030d4 <__divmodhi4_exit>:
    30d4:	08 95       	ret

000030d6 <__udivmodhi4>:
    30d6:	aa 1b       	sub	r26, r26
    30d8:	bb 1b       	sub	r27, r27
    30da:	51 e1       	ldi	r21, 0x11	; 17
    30dc:	07 c0       	rjmp	.+14     	; 0x30ec <__udivmodhi4_ep>

000030de <__udivmodhi4_loop>:
    30de:	aa 1f       	adc	r26, r26
    30e0:	bb 1f       	adc	r27, r27
    30e2:	a6 17       	cp	r26, r22
    30e4:	b7 07       	cpc	r27, r23
    30e6:	10 f0       	brcs	.+4      	; 0x30ec <__udivmodhi4_ep>
    30e8:	a6 1b       	sub	r26, r22
    30ea:	b7 0b       	sbc	r27, r23

000030ec <__udivmodhi4_ep>:
    30ec:	88 1f       	adc	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	5a 95       	dec	r21
    30f2:	a9 f7       	brne	.-22     	; 0x30de <__udivmodhi4_loop>
    30f4:	80 95       	com	r24
    30f6:	90 95       	com	r25
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	08 95       	ret

000030fe <abort>:
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	f8 94       	cli
    3104:	00 c0       	rjmp	.+0      	; 0x3106 <_exit>

00003106 <_exit>:
    3106:	f8 94       	cli

00003108 <__stop_program>:
    3108:	ff cf       	rjmp	.-2      	; 0x3108 <__stop_program>
