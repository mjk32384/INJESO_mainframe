
230726_mainframe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000220a  0000229e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000220a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800130  00800130  000022ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003289  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6d  00000000  00000000  00005771  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000153e  00000000  00000000  000066de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a0  00000000  00000000  00007c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a23  00000000  00000000  000085bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004391  00000000  00000000  00008fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000d370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	48 c2       	rjmp	.+1168   	; 0x4d2 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e0       	ldi	r30, 0x0A	; 10
      a0:	f2 e2       	ldi	r31, 0x22	; 34
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 33       	cpi	r26, 0x30	; 48
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e3       	ldi	r26, 0x30	; 48
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3e       	cpi	r26, 0xE0	; 224
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ba d4       	rcall	.+2420   	; 0xa38 <main>
      c4:	0c 94 03 11 	jmp	0x2206	; 0x2206 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <i2c_init>:
//	input:
//		hz - data transfer rate in Hz
//============================================
void i2c_init(int32_t hz)
{
	TWSR = 0x00;
      ca:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	//TWSR = 1<<TWPS0;		// 비트율 프리스케일러값을 1로 한다.

	// 비트율 설정
	TWBR = 0x0c;
      ce:	8c e0       	ldi	r24, 0x0C	; 12
      d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
      d4:	08 95       	ret

000000d6 <i2c_write_a_byte>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_write_a_byte(uint8_t i2c_addr, uint8_t data, int with_stop)
{
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	8a 01       	movw	r16, r20
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
      e0:	88 0f       	add	r24, r24
      e2:	2a e0       	ldi	r18, 0x0A	; 10
      e4:	30 e0       	ldi	r19, 0x00	; 0
{
	int time_out = TIME_OUT_CNT;
	 
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
      e6:	e4 e7       	ldi	r30, 0x74	; 116
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	54 ea       	ldi	r21, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
      ec:	a1 e7       	ldi	r26, 0x71	; 113
      ee:	b0 e0       	ldi	r27, 0x00	; 0
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
      f0:	c3 e7       	ldi	r28, 0x73	; 115
      f2:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
      f4:	44 e8       	ldi	r20, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
      f6:	74 e9       	ldi	r23, 0x94	; 148
{
	int time_out = TIME_OUT_CNT;
	 
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
      f8:	50 83       	st	Z, r21
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
      fa:	90 81       	ld	r25, Z
      fc:	99 23       	and	r25, r25
      fe:	ec f7       	brge	.-6      	; 0xfa <i2c_write_a_byte+0x24>
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     100:	9c 91       	ld	r25, X
     102:	98 7f       	andi	r25, 0xF8	; 248
     104:	98 30       	cpi	r25, 0x08	; 8
     106:	89 f5       	brne	.+98     	; 0x16a <i2c_write_a_byte+0x94>
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
     108:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     10a:	40 83       	st	Z, r20
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
     10c:	90 81       	ld	r25, Z
     10e:	99 23       	and	r25, r25
     110:	ec f7       	brge	.-6      	; 0x10c <i2c_write_a_byte+0x36>
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
     112:	9c 91       	ld	r25, X
     114:	98 7f       	andi	r25, 0xF8	; 248
     116:	98 31       	cpi	r25, 0x18	; 24
     118:	61 f0       	breq	.+24     	; 0x132 <i2c_write_a_byte+0x5c>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     11a:	70 83       	st	Z, r23
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     11c:	90 81       	ld	r25, Z
     11e:	94 fd       	sbrc	r25, 4
     120:	fd cf       	rjmp	.-6      	; 0x11c <i2c_write_a_byte+0x46>
     122:	21 50       	subi	r18, 0x01	; 1
     124:	31 09       	sbc	r19, r1

			time_out--;
			if(time_out <= 0) return -2;
     126:	21 f1       	breq	.+72     	; 0x170 <i2c_write_a_byte+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     128:	95 e3       	ldi	r25, 0x35	; 53
     12a:	9a 95       	dec	r25
     12c:	f1 f7       	brne	.-4      	; 0x12a <i2c_write_a_byte+0x54>
     12e:	00 00       	nop
     130:	e3 cf       	rjmp	.-58     	; 0xf8 <i2c_write_a_byte+0x22>
	}

	//--------------------------------------------------------
	// write i-th data to slave
	//--------------------------------------------------------
	TWDR = data;
     132:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     136:	84 e8       	ldi	r24, 0x84	; 132
     138:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));			// wait until data is sent.
     13c:	e4 e7       	ldi	r30, 0x74	; 116
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	88 23       	and	r24, r24
     144:	ec f7       	brge	.-6      	; 0x140 <i2c_write_a_byte+0x6a>

	// check if ACK is received from slave after sending data
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     146:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	99 f4       	brne	.+38     	; 0x176 <i2c_write_a_byte+0xa0>
	
	//----------------------------------
	// send STOP condition
	//----------------------------------

	if(with_stop)
     150:	01 2b       	or	r16, r17
     152:	a1 f0       	breq	.+40     	; 0x17c <i2c_write_a_byte+0xa6>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     154:	84 e9       	ldi	r24, 0x94	; 148
     156:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
		while((TWCR & (1<<TWSTO)));					// wait until STOP condition is sent and release bus
     15a:	e4 e7       	ldi	r30, 0x74	; 116
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	84 fd       	sbrc	r24, 4
     162:	fd cf       	rjmp	.-6      	; 0x15e <i2c_write_a_byte+0x88>
	}

	return 0;
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0b c0       	rjmp	.+22     	; 0x180 <i2c_write_a_byte+0xaa>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	9f ef       	ldi	r25, 0xFF	; 255
     16e:	08 c0       	rjmp	.+16     	; 0x180 <i2c_write_a_byte+0xaa>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     170:	8e ef       	ldi	r24, 0xFE	; 254
     172:	9f ef       	ldi	r25, 0xFF	; 255
     174:	05 c0       	rjmp	.+10     	; 0x180 <i2c_write_a_byte+0xaa>
	TWCR = (1<<TWINT) | (1<<TWEN);			// send data
	while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

	// check if ACK is received from slave after sending data
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
		return -3;
     176:	8d ef       	ldi	r24, 0xFD	; 253
     178:	9f ef       	ldi	r25, 0xFF	; 255
     17a:	02 c0       	rjmp	.+4      	; 0x180 <i2c_write_a_byte+0xaa>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
		while((TWCR & (1<<TWSTO)));					// wait until STOP condition is sent and release bus
	}

	return 0;
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	08 95       	ret

0000018a <i2c_write_n_bytes>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_write_n_bytes(uint8_t i2c_addr, uint8_t *buffer, int n, int with_stop)
{
     18a:	af 92       	push	r10
     18c:	bf 92       	push	r11
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     19c:	e8 2e       	mov	r14, r24
     19e:	ee 0c       	add	r14, r14
     1a0:	aa e0       	ldi	r26, 0x0A	; 10
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     1a4:	e4 e7       	ldi	r30, 0x74	; 116
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	84 ea       	ldi	r24, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     1aa:	0f 2e       	mov	r0, r31
     1ac:	f1 e7       	ldi	r31, 0x71	; 113
     1ae:	af 2e       	mov	r10, r31
     1b0:	b1 2c       	mov	r11, r1
     1b2:	f0 2d       	mov	r31, r0
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     1b4:	03 e7       	ldi	r16, 0x73	; 115
     1b6:	10 e0       	ldi	r17, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     1b8:	0f 2e       	mov	r0, r31
     1ba:	f4 e8       	ldi	r31, 0x84	; 132
     1bc:	ff 2e       	mov	r15, r31
     1be:	f0 2d       	mov	r31, r0
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     1c0:	0f 2e       	mov	r0, r31
     1c2:	f4 e9       	ldi	r31, 0x94	; 148
     1c4:	df 2e       	mov	r13, r31
     1c6:	f0 2d       	mov	r31, r0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     1c8:	80 83       	st	Z, r24
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     1ca:	90 81       	ld	r25, Z
     1cc:	99 23       	and	r25, r25
     1ce:	ec f7       	brge	.-6      	; 0x1ca <i2c_write_n_bytes+0x40>
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     1d0:	e5 01       	movw	r28, r10
     1d2:	98 81       	ld	r25, Y
     1d4:	98 7f       	andi	r25, 0xF8	; 248
     1d6:	98 30       	cpi	r25, 0x08	; 8
     1d8:	09 f0       	breq	.+2      	; 0x1dc <i2c_write_n_bytes+0x52>
     1da:	40 c0       	rjmp	.+128    	; 0x25c <i2c_write_n_bytes+0xd2>
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     1dc:	e8 01       	movw	r28, r16
     1de:	e8 82       	st	Y, r14
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     1e0:	f0 82       	st	Z, r15
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
     1e2:	90 81       	ld	r25, Z
     1e4:	99 23       	and	r25, r25
     1e6:	ec f7       	brge	.-6      	; 0x1e2 <i2c_write_n_bytes+0x58>
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
     1e8:	e5 01       	movw	r28, r10
     1ea:	98 81       	ld	r25, Y
     1ec:	98 7f       	andi	r25, 0xF8	; 248
     1ee:	98 31       	cpi	r25, 0x18	; 24
     1f0:	21 f4       	brne	.+8      	; 0x1fa <i2c_write_n_bytes+0x70>
		{
			break;
		}
	}

	for(i=0; i<n; i++)
     1f2:	14 16       	cp	r1, r20
     1f4:	15 06       	cpc	r1, r21
     1f6:	64 f0       	brlt	.+24     	; 0x210 <i2c_write_n_bytes+0x86>
     1f8:	24 c0       	rjmp	.+72     	; 0x242 <i2c_write_n_bytes+0xb8>
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     1fa:	d0 82       	st	Z, r13
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     1fc:	90 81       	ld	r25, Z
     1fe:	94 fd       	sbrc	r25, 4
     200:	fd cf       	rjmp	.-6      	; 0x1fc <i2c_write_n_bytes+0x72>
     202:	11 97       	sbiw	r26, 0x01	; 1

			time_out--;
			if(time_out <= 0) return -2;
     204:	71 f1       	breq	.+92     	; 0x262 <i2c_write_n_bytes+0xd8>
     206:	d5 e3       	ldi	r29, 0x35	; 53
     208:	da 95       	dec	r29
     20a:	f1 f7       	brne	.-4      	; 0x208 <i2c_write_n_bytes+0x7e>
     20c:	00 00       	nop
     20e:	dc cf       	rjmp	.-72     	; 0x1c8 <i2c_write_n_bytes+0x3e>
     210:	db 01       	movw	r26, r22
     212:	46 0f       	add	r20, r22
     214:	57 1f       	adc	r21, r23
	for(i=0; i<n; i++)
	{
		//--------------------------------------------------------
		// write i-th data to slave
		//--------------------------------------------------------
		TWDR = buffer[i];
     216:	63 e7       	ldi	r22, 0x73	; 115
     218:	70 e0       	ldi	r23, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     21a:	e4 e7       	ldi	r30, 0x74	; 116
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	94 e8       	ldi	r25, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     220:	01 e7       	ldi	r16, 0x71	; 113
     222:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<n; i++)
	{
		//--------------------------------------------------------
		// write i-th data to slave
		//--------------------------------------------------------
		TWDR = buffer[i];
     224:	8d 91       	ld	r24, X+
     226:	eb 01       	movw	r28, r22
     228:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     22a:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.
     22c:	80 81       	ld	r24, Z
     22e:	88 23       	and	r24, r24
     230:	ec f7       	brge	.-6      	; 0x22c <i2c_write_n_bytes+0xa2>

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     232:	e8 01       	movw	r28, r16
     234:	88 81       	ld	r24, Y
     236:	88 7f       	andi	r24, 0xF8	; 248
     238:	88 32       	cpi	r24, 0x28	; 40
     23a:	b1 f4       	brne	.+44     	; 0x268 <i2c_write_n_bytes+0xde>
		{
			break;
		}
	}

	for(i=0; i<n; i++)
     23c:	a4 17       	cp	r26, r20
     23e:	b5 07       	cpc	r27, r21
     240:	89 f7       	brne	.-30     	; 0x224 <i2c_write_n_bytes+0x9a>
	}
	
	//----------------------------------
	// send STOP condition
	//----------------------------------
	if(with_stop)
     242:	23 2b       	or	r18, r19
     244:	a1 f0       	breq	.+40     	; 0x26e <i2c_write_n_bytes+0xe4>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     246:	84 e9       	ldi	r24, 0x94	; 148
     248:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
		while((TWCR & (1<<TWSTO)));				// wait until STOP condition is sent.
     24c:	e4 e7       	ldi	r30, 0x74	; 116
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	84 fd       	sbrc	r24, 4
     254:	fd cf       	rjmp	.-6      	; 0x250 <i2c_write_n_bytes+0xc6>
	}

	return 0;
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0b c0       	rjmp	.+22     	; 0x272 <i2c_write_n_bytes+0xe8>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	9f ef       	ldi	r25, 0xFF	; 255
     260:	08 c0       	rjmp	.+16     	; 0x272 <i2c_write_n_bytes+0xe8>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     262:	8e ef       	ldi	r24, 0xFE	; 254
     264:	9f ef       	ldi	r25, 0xFF	; 255
     266:	05 c0       	rjmp	.+10     	; 0x272 <i2c_write_n_bytes+0xe8>
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
			return -3;
     268:	8d ef       	ldi	r24, 0xFD	; 253
     26a:	9f ef       	ldi	r25, 0xFF	; 255
     26c:	02 c0       	rjmp	.+4      	; 0x272 <i2c_write_n_bytes+0xe8>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
		while((TWCR & (1<<TWSTO)));				// wait until STOP condition is sent.
	}

	return 0;
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	bf 90       	pop	r11
     282:	af 90       	pop	r10
     284:	08 95       	ret

00000286 <i2c_read_n_bytes>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_read_n_bytes(uint8_t i2c_addr, uint8_t *data, int n)
{
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     292:	88 0f       	add	r24, r24
     294:	81 60       	ori	r24, 0x01	; 1
     296:	2a e0       	ldi	r18, 0x0A	; 10
     298:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
     29a:	e4 e7       	ldi	r30, 0x74	; 116
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	14 ea       	ldi	r17, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     2a0:	a1 e7       	ldi	r26, 0x71	; 113
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     2a4:	c3 e7       	ldi	r28, 0x73	; 115
     2a6:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
     2a8:	04 e8       	ldi	r16, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     2aa:	0f 2e       	mov	r0, r31
     2ac:	f4 e9       	ldi	r31, 0x94	; 148
     2ae:	ff 2e       	mov	r15, r31
     2b0:	f0 2d       	mov	r31, r0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
     2b2:	10 83       	st	Z, r17
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     2b4:	90 81       	ld	r25, Z
     2b6:	99 23       	and	r25, r25
     2b8:	ec f7       	brge	.-6      	; 0x2b4 <i2c_read_n_bytes+0x2e>
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     2ba:	9c 91       	ld	r25, X
     2bc:	98 7f       	andi	r25, 0xF8	; 248
     2be:	98 30       	cpi	r25, 0x08	; 8
     2c0:	29 f0       	breq	.+10     	; 0x2cc <i2c_read_n_bytes+0x46>
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
     2c2:	9c 91       	ld	r25, X
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     2c4:	98 7f       	andi	r25, 0xF8	; 248
     2c6:	90 31       	cpi	r25, 0x10	; 16
     2c8:	09 f0       	breq	.+2      	; 0x2cc <i2c_read_n_bytes+0x46>
     2ca:	5a c0       	rjmp	.+180    	; 0x380 <i2c_read_n_bytes+0xfa>
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     2cc:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
     2ce:	00 83       	st	Z, r16
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
     2d0:	90 81       	ld	r25, Z
     2d2:	99 23       	and	r25, r25
     2d4:	ec f7       	brge	.-6      	; 0x2d0 <i2c_read_n_bytes+0x4a>
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
     2d6:	9c 91       	ld	r25, X
     2d8:	98 7f       	andi	r25, 0xF8	; 248
     2da:	90 34       	cpi	r25, 0x40	; 64
     2dc:	41 f4       	brne	.+16     	; 0x2ee <i2c_read_n_bytes+0x68>
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     2de:	41 50       	subi	r20, 0x01	; 1
     2e0:	51 09       	sbc	r21, r1
     2e2:	14 16       	cp	r1, r20
     2e4:	15 06       	cpc	r1, r21
     2e6:	84 f0       	brlt	.+32     	; 0x308 <i2c_read_n_bytes+0x82>
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	2b c0       	rjmp	.+86     	; 0x344 <i2c_read_n_bytes+0xbe>
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     2ee:	f0 82       	st	Z, r15
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     2f0:	90 81       	ld	r25, Z
     2f2:	94 fd       	sbrc	r25, 4
     2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <i2c_read_n_bytes+0x6a>
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	31 09       	sbc	r19, r1

			time_out--;
			if(time_out <= 0) return -2;
     2fa:	09 f4       	brne	.+2      	; 0x2fe <i2c_read_n_bytes+0x78>
     2fc:	44 c0       	rjmp	.+136    	; 0x386 <i2c_read_n_bytes+0x100>
     2fe:	95 e3       	ldi	r25, 0x35	; 53
     300:	9a 95       	dec	r25
     302:	f1 f7       	brne	.-4      	; 0x300 <i2c_read_n_bytes+0x7a>
     304:	00 00       	nop
     306:	d5 cf       	rjmp	.-86     	; 0x2b2 <i2c_read_n_bytes+0x2c>
     308:	db 01       	movw	r26, r22
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
	{
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
     30e:	e4 e7       	ldi	r30, 0x74	; 116
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
     314:	0f 2e       	mov	r0, r31
     316:	f1 e7       	ldi	r31, 0x71	; 113
     318:	ef 2e       	mov	r14, r31
     31a:	f1 2c       	mov	r15, r1
     31c:	f0 2d       	mov	r31, r0
			return -6;
		
		data[i] = TWDR;								// read data.
     31e:	03 e7       	ldi	r16, 0x73	; 115
     320:	10 e0       	ldi	r17, 0x00	; 0
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
	{
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
     322:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
     324:	80 81       	ld	r24, Z
     326:	88 23       	and	r24, r24
     328:	ec f7       	brge	.-6      	; 0x324 <i2c_read_n_bytes+0x9e>
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
     32a:	e7 01       	movw	r28, r14
     32c:	88 81       	ld	r24, Y
     32e:	88 7f       	andi	r24, 0xF8	; 248
     330:	80 35       	cpi	r24, 0x50	; 80
     332:	61 f5       	brne	.+88     	; 0x38c <i2c_read_n_bytes+0x106>
			return -6;
		
		data[i] = TWDR;								// read data.
     334:	e8 01       	movw	r28, r16
     336:	88 81       	ld	r24, Y
     338:	8d 93       	st	X+, r24
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     33a:	2f 5f       	subi	r18, 0xFF	; 255
     33c:	3f 4f       	sbci	r19, 0xFF	; 255
     33e:	24 17       	cp	r18, r20
     340:	35 07       	cpc	r19, r21
     342:	7c f3       	brlt	.-34     	; 0x322 <i2c_read_n_bytes+0x9c>
		data[i] = TWDR;								// read data.
	}

	// if read the last byte, send NACK.

	TWCR = (1<<TWINT) | (1<<TWEN);					// after receiving data, do end NACK
     344:	84 e8       	ldi	r24, 0x84	; 132
     346:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));					// wait until receiving data.
     34a:	e4 e7       	ldi	r30, 0x74	; 116
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	88 23       	and	r24, r24
     352:	ec f7       	brge	.-6      	; 0x34e <i2c_read_n_bytes+0xc8>
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK)
     354:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     358:	88 7f       	andi	r24, 0xF8	; 248
     35a:	88 35       	cpi	r24, 0x58	; 88
     35c:	d1 f4       	brne	.+52     	; 0x392 <i2c_read_n_bytes+0x10c>
		return -7;
	
	data[i] = TWDR;									// read the last data
     35e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     362:	fb 01       	movw	r30, r22
     364:	e2 0f       	add	r30, r18
     366:	f3 1f       	adc	r31, r19
     368:	80 83       	st	Z, r24

	//-----------------------------
	// send STOP condition.
	//-----------------------------

	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     36a:	84 e9       	ldi	r24, 0x94	; 148
     36c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(TWCR & (1<<TWSTO));						// wait until STOP condition is sent
     370:	e4 e7       	ldi	r30, 0x74	; 116
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	84 fd       	sbrc	r24, 4
     378:	fd cf       	rjmp	.-6      	; 0x374 <i2c_read_n_bytes+0xee>
	
	return 0;
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0b c0       	rjmp	.+22     	; 0x396 <i2c_read_n_bytes+0x110>
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	08 c0       	rjmp	.+16     	; 0x396 <i2c_read_n_bytes+0x110>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     386:	8e ef       	ldi	r24, 0xFE	; 254
     388:	9f ef       	ldi	r25, 0xFF	; 255
     38a:	05 c0       	rjmp	.+10     	; 0x396 <i2c_read_n_bytes+0x110>
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
			return -6;
     38c:	8a ef       	ldi	r24, 0xFA	; 250
     38e:	9f ef       	ldi	r25, 0xFF	; 255
     390:	02 c0       	rjmp	.+4      	; 0x396 <i2c_read_n_bytes+0x110>

	TWCR = (1<<TWINT) | (1<<TWEN);					// after receiving data, do end NACK
	while(!(TWCR & (1<<TWINT)));					// wait until receiving data.
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK)
		return -7;
     392:	89 ef       	ldi	r24, 0xF9	; 249
     394:	9f ef       	ldi	r25, 0xFF	; 255

	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
	while(TWCR & (1<<TWSTO));						// wait until STOP condition is sent
	
	return 0;
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	08 95       	ret

000003a4 <UART1_init>:

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );         //데이터 수신 대기
	return UDR1;
}
     3a4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     3a8:	80 e1       	ldi	r24, 0x10	; 16
     3aa:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     3ae:	eb e9       	ldi	r30, 0x9B	; 155
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	82 60       	ori	r24, 0x02	; 2
     3b6:	80 83       	st	Z, r24
     3b8:	ed e9       	ldi	r30, 0x9D	; 157
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	86 60       	ori	r24, 0x06	; 6
     3c0:	80 83       	st	Z, r24
     3c2:	ea e9       	ldi	r30, 0x9A	; 154
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	80 61       	ori	r24, 0x10	; 16
     3ca:	80 83       	st	Z, r24
     3cc:	80 81       	ld	r24, Z
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	80 83       	st	Z, r24
     3d2:	08 95       	ret

000003d4 <UART1_transmit>:
     3d4:	eb e9       	ldi	r30, 0x9B	; 155
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	90 81       	ld	r25, Z
     3da:	95 ff       	sbrs	r25, 5
     3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <UART1_transmit+0x4>
     3de:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     3e2:	08 95       	ret

000003e4 <UART1_print16b>:

void UART1_print16b(int16_t no)
{
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <UART1_print16b+0xe>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <UART1_print16b+0x10>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <UART1_print16b+0x12>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	char numStr[6]="0";
     3fa:	20 e3       	ldi	r18, 0x30	; 48
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	3a 83       	std	Y+2, r19	; 0x02
     400:	29 83       	std	Y+1, r18	; 0x01
     402:	fe 01       	movw	r30, r28
     404:	33 96       	adiw	r30, 0x03	; 3
     406:	24 e0       	ldi	r18, 0x04	; 4
     408:	df 01       	movw	r26, r30
     40a:	1d 92       	st	X+, r1
     40c:	2a 95       	dec	r18
     40e:	e9 f7       	brne	.-6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	int mino=0;
	int index=0;
	
	int i=0;
	if(no>0)
     410:	18 16       	cp	r1, r24
     412:	19 06       	cpc	r1, r25
     414:	0c f0       	brlt	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	4b c0       	rjmp	.+150    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     418:	32 97       	sbiw	r30, 0x02	; 2
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0;no!=0;i++)
		{
			numStr[i]=no%10+48;
     41e:	0f 2e       	mov	r0, r31
     420:	fa e0       	ldi	r31, 0x0A	; 10
     422:	ef 2e       	mov	r14, r31
     424:	f1 2c       	mov	r15, r1
     426:	f0 2d       	mov	r31, r0
     428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	int index=0;
	
	int i=0;
	if(no>0)
	{
		for(i=0;no!=0;i++)
     42a:	89 01       	movw	r16, r18
		{
			numStr[i]=no%10+48;
     42c:	b7 01       	movw	r22, r14
     42e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divmodhi4>
     432:	80 5d       	subi	r24, 0xD0	; 208
     434:	81 93       	st	Z+, r24
			no=no/10;
     436:	86 2f       	mov	r24, r22
     438:	97 2f       	mov	r25, r23
	int index=0;
	
	int i=0;
	if(no>0)
	{
		for(i=0;no!=0;i++)
     43a:	98 01       	movw	r18, r16
     43c:	2f 5f       	subi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	00 97       	sbiw	r24, 0x00	; 0
     442:	99 f7       	brne	.-26     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			numStr[i]=no%10+48;
			no=no/10;
			
		}
		numStr[i]='\0';
     444:	fe 01       	movw	r30, r28
     446:	e2 0f       	add	r30, r18
     448:	f3 1f       	adc	r31, r19
     44a:	11 82       	std	Z+1, r1	; 0x01
     44c:	20 c0       	rjmp	.+64     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		index=i-1;
	}if(no<0)
	{
		mino=0-no;
     44e:	91 95       	neg	r25
     450:	81 95       	neg	r24
     452:	91 09       	sbc	r25, r1
		for(i=0;mino!=0;i++)
     454:	91 f0       	breq	.+36     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     456:	fe 01       	movw	r30, r28
     458:	31 96       	adiw	r30, 0x01	; 1
     45a:	00 e0       	ldi	r16, 0x00	; 0
     45c:	10 e0       	ldi	r17, 0x00	; 0
		{
			numStr[i]=mino%10+48;
     45e:	2a e0       	ldi	r18, 0x0A	; 10
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	b9 01       	movw	r22, r18
     464:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__divmodhi4>
     468:	80 5d       	subi	r24, 0xD0	; 208
     46a:	81 93       	st	Z+, r24
			mino=mino/10;
     46c:	86 2f       	mov	r24, r22
     46e:	97 2f       	mov	r25, r23
		numStr[i]='\0';
		index=i-1;
	}if(no<0)
	{
		mino=0-no;
		for(i=0;mino!=0;i++)
     470:	0f 5f       	subi	r16, 0xFF	; 255
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	00 97       	sbiw	r24, 0x00	; 0
     476:	a9 f7       	brne	.-22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47a:	00 e0       	ldi	r16, 0x00	; 0
     47c:	10 e0       	ldi	r17, 0x00	; 0
		{
			numStr[i]=mino%10+48;
			mino=mino/10;
		}
		numStr[i]='\0';
     47e:	fe 01       	movw	r30, r28
     480:	e0 0f       	add	r30, r16
     482:	f1 1f       	adc	r31, r17
     484:	11 82       	std	Z+1, r1	; 0x01
		index=i-1;
     486:	01 50       	subi	r16, 0x01	; 1
     488:	11 09       	sbc	r17, r1
		UART1_transmit('-');
     48a:	8d e2       	ldi	r24, 0x2D	; 45
     48c:	a3 df       	rcall	.-186    	; 0x3d4 <UART1_transmit>
	}
	for(int j=index;j>=0;j--)
     48e:	11 23       	and	r17, r17
     490:	9c f0       	brlt	.+38     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     492:	ce 01       	movw	r24, r28
     494:	80 0f       	add	r24, r16
     496:	91 1f       	adc	r25, r17
     498:	fc 01       	movw	r30, r24
     49a:	32 96       	adiw	r30, 0x02	; 2
     49c:	7f 01       	movw	r14, r30
	{
		UART1_transmit(numStr[j]);
     49e:	d7 01       	movw	r26, r14
     4a0:	8e 91       	ld	r24, -X
     4a2:	7d 01       	movw	r14, r26
     4a4:	97 df       	rcall	.-210    	; 0x3d4 <UART1_transmit>
		}
		numStr[i]='\0';
		index=i-1;
		UART1_transmit('-');
	}
	for(int j=index;j>=0;j--)
     4a6:	01 50       	subi	r16, 0x01	; 1
     4a8:	11 09       	sbc	r17, r1
     4aa:	ca f7       	brpl	.-14     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
			no=no/10;
			
		}
		numStr[i]='\0';
		index=i-1;
	}if(no<0)
     4ae:	99 23       	and	r25, r25
     4b0:	74 f2       	brlt	.-100    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>

void UART1_print16b(int16_t no)
{
	char numStr[6]="0";
	int mino=0;
	int index=0;
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	ed cf       	rjmp	.-38     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	for(int j=index;j>=0;j--)
	{
		UART1_transmit(numStr[j]);
	}
	return;
}
     4b8:	26 96       	adiw	r28, 0x06	; 6
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	08 95       	ret

000004d2 <__vector_16>:

double orient_x_init[3] = {1, 0, 0};
double orient_x[3];

ISR(TIMER0_OVF_vect) 				// 타이머0 오버플로 인터럽트 서비스루틴
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	0b b6       	in	r0, 0x3b	; 59
     4de:	0f 92       	push	r0
     4e0:	4f 92       	push	r4
     4e2:	5f 92       	push	r5
     4e4:	6f 92       	push	r6
     4e6:	7f 92       	push	r7
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	2f 93       	push	r18
     4fe:	3f 93       	push	r19
     500:	4f 93       	push	r20
     502:	5f 93       	push	r21
     504:	6f 93       	push	r22
     506:	7f 93       	push	r23
     508:	8f 93       	push	r24
     50a:	9f 93       	push	r25
     50c:	af 93       	push	r26
     50e:	bf 93       	push	r27
     510:	ef 93       	push	r30
     512:	ff 93       	push	r31
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	64 97       	sbiw	r28, 0x14	; 20
     51e:	de bf       	out	0x3e, r29	; 62
     520:	cd bf       	out	0x3d, r28	; 61

	TCNT0 = 6;					    // 16msec 후에 인터럽트발생
     522:	86 e0       	ldi	r24, 0x06	; 6
     524:	82 bf       	out	0x32, r24	; 50
	n_enter++;						// 인터럽트 횟수 증가
     526:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <n_enter>
     52a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <n_enter+0x1>
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <n_enter+0x1>
     534:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <n_enter>
	MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
     538:	66 e9       	ldi	r22, 0x96	; 150
     53a:	71 e0       	ldi	r23, 0x01	; 1
     53c:	82 eb       	ldi	r24, 0xB2	; 178
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	bf d4       	rcall	.+2430   	; 0xec0 <MPU9250I2CReadIMU_f>
	gyroxx=-(gyro2_f[0]-avgxx);
     542:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <avgxx>
     546:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <avgxx+0x1>
     54a:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <avgxx+0x2>
     54e:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <avgxx+0x3>
     552:	a6 e9       	ldi	r26, 0x96	; 150
     554:	b1 e0       	ldi	r27, 0x01	; 1
     556:	6d 91       	ld	r22, X+
     558:	7d 91       	ld	r23, X+
     55a:	8d 91       	ld	r24, X+
     55c:	9c 91       	ld	r25, X
     55e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     562:	2b 01       	movw	r4, r22
     564:	3c 01       	movw	r6, r24
     566:	77 fa       	bst	r7, 7
     568:	70 94       	com	r7
     56a:	77 f8       	bld	r7, 7
     56c:	70 94       	com	r7
     56e:	40 92 80 01 	sts	0x0180, r4	; 0x800180 <gyroxx>
     572:	50 92 81 01 	sts	0x0181, r5	; 0x800181 <gyroxx+0x1>
     576:	60 92 82 01 	sts	0x0182, r6	; 0x800182 <gyroxx+0x2>
     57a:	70 92 83 01 	sts	0x0183, r7	; 0x800183 <gyroxx+0x3>
	gyroyy=-(gyro2_f[1]-avgyy);
     57e:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <avgyy>
     582:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <avgyy+0x1>
     586:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <avgyy+0x2>
     58a:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <avgyy+0x3>
     58e:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <gyro2_f+0x4>
     592:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <gyro2_f+0x5>
     596:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <gyro2_f+0x6>
     59a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <gyro2_f+0x7>
     59e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     5a2:	4b 01       	movw	r8, r22
     5a4:	5c 01       	movw	r10, r24
     5a6:	b7 fa       	bst	r11, 7
     5a8:	b0 94       	com	r11
     5aa:	b7 f8       	bld	r11, 7
     5ac:	b0 94       	com	r11
     5ae:	80 92 7c 01 	sts	0x017C, r8	; 0x80017c <gyroyy>
     5b2:	90 92 7d 01 	sts	0x017D, r9	; 0x80017d <gyroyy+0x1>
     5b6:	a0 92 7e 01 	sts	0x017E, r10	; 0x80017e <gyroyy+0x2>
     5ba:	b0 92 7f 01 	sts	0x017F, r11	; 0x80017f <gyroyy+0x3>
	gyrozz=-(gyro2_f[2]-avgzz);
     5be:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <avgzz>
     5c2:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <avgzz+0x1>
     5c6:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <avgzz+0x2>
     5ca:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <avgzz+0x3>
     5ce:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <gyro2_f+0x8>
     5d2:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <gyro2_f+0x9>
     5d6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <gyro2_f+0xa>
     5da:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <gyro2_f+0xb>
     5de:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     5e2:	6b 01       	movw	r12, r22
     5e4:	7c 01       	movw	r14, r24
     5e6:	f7 fa       	bst	r15, 7
     5e8:	f0 94       	com	r15
     5ea:	f7 f8       	bld	r15, 7
     5ec:	f0 94       	com	r15
     5ee:	c0 92 78 01 	sts	0x0178, r12	; 0x800178 <gyrozz>
     5f2:	d0 92 79 01 	sts	0x0179, r13	; 0x800179 <gyrozz+0x1>
     5f6:	e0 92 7a 01 	sts	0x017A, r14	; 0x80017a <gyrozz+0x2>
     5fa:	f0 92 7b 01 	sts	0x017B, r15	; 0x80017b <gyrozz+0x3>
	
	f_gx_now=gyroxx-alpha*(gyroxx-f_gx_last);
     5fe:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <alpha>
     602:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <alpha+0x1>
     606:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <alpha+0x2>
     60a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <alpha+0x3>
     60e:	29 83       	std	Y+1, r18	; 0x01
     610:	3a 83       	std	Y+2, r19	; 0x02
     612:	4b 83       	std	Y+3, r20	; 0x03
     614:	5c 83       	std	Y+4, r21	; 0x04
     616:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <f_gx_last>
     61a:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <f_gx_last+0x1>
     61e:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <f_gx_last+0x2>
     622:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <f_gx_last+0x3>
     626:	c3 01       	movw	r24, r6
     628:	b2 01       	movw	r22, r4
     62a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     62e:	29 81       	ldd	r18, Y+1	; 0x01
     630:	3a 81       	ldd	r19, Y+2	; 0x02
     632:	4b 81       	ldd	r20, Y+3	; 0x03
     634:	5c 81       	ldd	r21, Y+4	; 0x04
     636:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	c3 01       	movw	r24, r6
     640:	b2 01       	movw	r22, r4
     642:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     646:	2b 01       	movw	r4, r22
     648:	3c 01       	movw	r6, r24
     64a:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <f_gx_now>
     64e:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <f_gx_now+0x1>
     652:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <f_gx_now+0x2>
     656:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <f_gx_now+0x3>
	f_gy_now=gyroyy-alpha*(gyroyy-f_gy_last);
     65a:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <f_gy_last>
     65e:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <f_gy_last+0x1>
     662:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <f_gy_last+0x2>
     666:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <f_gy_last+0x3>
     66a:	c5 01       	movw	r24, r10
     66c:	b4 01       	movw	r22, r8
     66e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     672:	29 81       	ldd	r18, Y+1	; 0x01
     674:	3a 81       	ldd	r19, Y+2	; 0x02
     676:	4b 81       	ldd	r20, Y+3	; 0x03
     678:	5c 81       	ldd	r21, Y+4	; 0x04
     67a:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c5 01       	movw	r24, r10
     684:	b4 01       	movw	r22, r8
     686:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     68a:	6d 87       	std	Y+13, r22	; 0x0d
     68c:	7e 87       	std	Y+14, r23	; 0x0e
     68e:	8f 87       	std	Y+15, r24	; 0x0f
     690:	98 8b       	std	Y+16, r25	; 0x10
     692:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <f_gy_now>
     696:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <f_gy_now+0x1>
     69a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <f_gy_now+0x2>
     69e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <f_gy_now+0x3>
	f_gz_now=gyrozz-alpha*(gyrozz-f_gz_last);
     6a2:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <f_gz_last>
     6a6:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <f_gz_last+0x1>
     6aa:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <f_gz_last+0x2>
     6ae:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <f_gz_last+0x3>
     6b2:	c7 01       	movw	r24, r14
     6b4:	b6 01       	movw	r22, r12
     6b6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     6ba:	29 81       	ldd	r18, Y+1	; 0x01
     6bc:	3a 81       	ldd	r19, Y+2	; 0x02
     6be:	4b 81       	ldd	r20, Y+3	; 0x03
     6c0:	5c 81       	ldd	r21, Y+4	; 0x04
     6c2:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     6c6:	9b 01       	movw	r18, r22
     6c8:	ac 01       	movw	r20, r24
     6ca:	c7 01       	movw	r24, r14
     6cc:	b6 01       	movw	r22, r12
     6ce:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     6d2:	5b 01       	movw	r10, r22
     6d4:	6c 01       	movw	r12, r24
     6d6:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <f_gz_now>
     6da:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <f_gz_now+0x1>
     6de:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <f_gz_now+0x2>
     6e2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <f_gz_now+0x3>
	f_gx_last=f_gx_now;
     6e6:	40 92 5c 01 	sts	0x015C, r4	; 0x80015c <f_gx_last>
     6ea:	50 92 5d 01 	sts	0x015D, r5	; 0x80015d <f_gx_last+0x1>
     6ee:	60 92 5e 01 	sts	0x015E, r6	; 0x80015e <f_gx_last+0x2>
     6f2:	70 92 5f 01 	sts	0x015F, r7	; 0x80015f <f_gx_last+0x3>
	f_gy_last=f_gy_now;
     6f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     6f8:	9e 85       	ldd	r25, Y+14	; 0x0e
     6fa:	af 85       	ldd	r26, Y+15	; 0x0f
     6fc:	b8 89       	ldd	r27, Y+16	; 0x10
     6fe:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <f_gy_last>
     702:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <f_gy_last+0x1>
     706:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <f_gy_last+0x2>
     70a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <f_gy_last+0x3>
	f_gz_last=f_gz_now;	
     70e:	a0 92 54 01 	sts	0x0154, r10	; 0x800154 <f_gz_last>
     712:	b0 92 55 01 	sts	0x0155, r11	; 0x800155 <f_gz_last+0x1>
     716:	c0 92 56 01 	sts	0x0156, r12	; 0x800156 <f_gz_last+0x2>
     71a:	d0 92 57 01 	sts	0x0157, r13	; 0x800157 <f_gz_last+0x3>

	accelxx = acc2_f[0]-avgax;
     71e:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <avgax>
     722:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <avgax+0x1>
     726:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <avgax+0x2>
     72a:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <avgax+0x3>
     72e:	a2 eb       	ldi	r26, 0xB2	; 178
     730:	b1 e0       	ldi	r27, 0x01	; 1
     732:	6d 91       	ld	r22, X+
     734:	7d 91       	ld	r23, X+
     736:	8d 91       	ld	r24, X+
     738:	9c 91       	ld	r25, X
     73a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     73e:	6d 83       	std	Y+5, r22	; 0x05
     740:	7e 83       	std	Y+6, r23	; 0x06
     742:	8f 83       	std	Y+7, r24	; 0x07
     744:	98 87       	std	Y+8, r25	; 0x08
     746:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <accelxx>
     74a:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <accelxx+0x1>
     74e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <accelxx+0x2>
     752:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <accelxx+0x3>
	accelyy = acc2_f[1]-avgay;
     756:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <avgay>
     75a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <avgay+0x1>
     75e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <avgay+0x2>
     762:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <avgay+0x3>
     766:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <acc2_f+0x4>
     76a:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <acc2_f+0x5>
     76e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <acc2_f+0x6>
     772:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <acc2_f+0x7>
     776:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     77a:	69 87       	std	Y+9, r22	; 0x09
     77c:	7a 87       	std	Y+10, r23	; 0x0a
     77e:	8b 87       	std	Y+11, r24	; 0x0b
     780:	9c 87       	std	Y+12, r25	; 0x0c
     782:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <accelyy>
     786:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <accelyy+0x1>
     78a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <accelyy+0x2>
     78e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <accelyy+0x3>
	accelzz = acc2_f[2]-avgaz;		
     792:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <avgaz>
     796:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <avgaz+0x1>
     79a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <avgaz+0x2>
     79e:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <avgaz+0x3>
     7a2:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <acc2_f+0x8>
     7a6:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <acc2_f+0x9>
     7aa:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <acc2_f+0xa>
     7ae:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <acc2_f+0xb>
     7b2:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     7b6:	69 8b       	std	Y+17, r22	; 0x11
     7b8:	7a 8b       	std	Y+18, r23	; 0x12
     7ba:	8b 8b       	std	Y+19, r24	; 0x13
     7bc:	9c 8b       	std	Y+20, r25	; 0x14
     7be:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <accelzz>
     7c2:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <accelzz+0x1>
     7c6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <accelzz+0x2>
     7ca:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <accelzz+0x3>
	f_ax_now=accelxx-alpha*(accelxx-f_ax_last);
     7ce:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <f_ax_last>
     7d2:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <f_ax_last+0x1>
     7d6:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <f_ax_last+0x2>
     7da:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <f_ax_last+0x3>
     7de:	6d 81       	ldd	r22, Y+5	; 0x05
     7e0:	7e 81       	ldd	r23, Y+6	; 0x06
     7e2:	8f 81       	ldd	r24, Y+7	; 0x07
     7e4:	98 85       	ldd	r25, Y+8	; 0x08
     7e6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     7ea:	29 81       	ldd	r18, Y+1	; 0x01
     7ec:	3a 81       	ldd	r19, Y+2	; 0x02
     7ee:	4b 81       	ldd	r20, Y+3	; 0x03
     7f0:	5c 81       	ldd	r21, Y+4	; 0x04
     7f2:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	6d 81       	ldd	r22, Y+5	; 0x05
     7fc:	7e 81       	ldd	r23, Y+6	; 0x06
     7fe:	8f 81       	ldd	r24, Y+7	; 0x07
     800:	98 85       	ldd	r25, Y+8	; 0x08
     802:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     806:	6d 83       	std	Y+5, r22	; 0x05
     808:	7e 83       	std	Y+6, r23	; 0x06
     80a:	8f 83       	std	Y+7, r24	; 0x07
     80c:	98 87       	std	Y+8, r25	; 0x08
     80e:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <f_ax_now>
     812:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <f_ax_now+0x1>
     816:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <f_ax_now+0x2>
     81a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <f_ax_now+0x3>
	f_ay_now=accelyy-alpha*(accelyy-f_ay_last);
     81e:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <f_ay_last>
     822:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <f_ay_last+0x1>
     826:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <f_ay_last+0x2>
     82a:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <f_ay_last+0x3>
     82e:	69 85       	ldd	r22, Y+9	; 0x09
     830:	7a 85       	ldd	r23, Y+10	; 0x0a
     832:	8b 85       	ldd	r24, Y+11	; 0x0b
     834:	9c 85       	ldd	r25, Y+12	; 0x0c
     836:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     83a:	29 81       	ldd	r18, Y+1	; 0x01
     83c:	3a 81       	ldd	r19, Y+2	; 0x02
     83e:	4b 81       	ldd	r20, Y+3	; 0x03
     840:	5c 81       	ldd	r21, Y+4	; 0x04
     842:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     846:	9b 01       	movw	r18, r22
     848:	ac 01       	movw	r20, r24
     84a:	69 85       	ldd	r22, Y+9	; 0x09
     84c:	7a 85       	ldd	r23, Y+10	; 0x0a
     84e:	8b 85       	ldd	r24, Y+11	; 0x0b
     850:	9c 85       	ldd	r25, Y+12	; 0x0c
     852:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     856:	69 87       	std	Y+9, r22	; 0x09
     858:	7a 87       	std	Y+10, r23	; 0x0a
     85a:	8b 87       	std	Y+11, r24	; 0x0b
     85c:	9c 87       	std	Y+12, r25	; 0x0c
     85e:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <f_ay_now>
     862:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <f_ay_now+0x1>
     866:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <f_ay_now+0x2>
     86a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <f_ay_now+0x3>
	f_az_now=accelzz-alpha*(accelzz-f_az_last);
     86e:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <f_az_last>
     872:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <f_az_last+0x1>
     876:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <f_az_last+0x2>
     87a:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <f_az_last+0x3>
     87e:	69 89       	ldd	r22, Y+17	; 0x11
     880:	7a 89       	ldd	r23, Y+18	; 0x12
     882:	8b 89       	ldd	r24, Y+19	; 0x13
     884:	9c 89       	ldd	r25, Y+20	; 0x14
     886:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     88a:	29 81       	ldd	r18, Y+1	; 0x01
     88c:	3a 81       	ldd	r19, Y+2	; 0x02
     88e:	4b 81       	ldd	r20, Y+3	; 0x03
     890:	5c 81       	ldd	r21, Y+4	; 0x04
     892:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	69 89       	ldd	r22, Y+17	; 0x11
     89c:	7a 89       	ldd	r23, Y+18	; 0x12
     89e:	8b 89       	ldd	r24, Y+19	; 0x13
     8a0:	9c 89       	ldd	r25, Y+20	; 0x14
     8a2:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__subsf3>
     8a6:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
     8aa:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
     8ae:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
     8b2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	f_ax_last=f_ax_now;
     8b6:	2d 81       	ldd	r18, Y+5	; 0x05
     8b8:	3e 81       	ldd	r19, Y+6	; 0x06
     8ba:	4f 81       	ldd	r20, Y+7	; 0x07
     8bc:	58 85       	ldd	r21, Y+8	; 0x08
     8be:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <f_ax_last>
     8c2:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <f_ax_last+0x1>
     8c6:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <f_ax_last+0x2>
     8ca:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <f_ax_last+0x3>
	f_ay_last=f_ay_now;
     8ce:	29 85       	ldd	r18, Y+9	; 0x09
     8d0:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d2:	4b 85       	ldd	r20, Y+11	; 0x0b
     8d4:	5c 85       	ldd	r21, Y+12	; 0x0c
     8d6:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <f_ay_last>
     8da:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <f_ay_last+0x1>
     8de:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <f_ay_last+0x2>
     8e2:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <f_ay_last+0x3>
	f_az_last=f_az_now;
     8e6:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <f_az_last>
     8ea:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <f_az_last+0x1>
     8ee:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <f_az_last+0x2>
     8f2:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <f_az_last+0x3>
	UART1_transmit('\t');
	UART1_print16b((uint16_t) (f_gy_now * 1000));
	UART1_transmit('\t');
	UART1_print16b((uint16_t) (f_gz_now * 1000));
	UART1_transmit('\n');	*/
	Quaternion_set(0, f_gx_now, f_gy_now, f_gz_now, &omega);
     8f6:	0f 2e       	mov	r0, r31
     8f8:	fe eb       	ldi	r31, 0xBE	; 190
     8fa:	8f 2e       	mov	r8, r31
     8fc:	f1 e0       	ldi	r31, 0x01	; 1
     8fe:	9f 2e       	mov	r9, r31
     900:	f0 2d       	mov	r31, r0
     902:	ed 84       	ldd	r14, Y+13	; 0x0d
     904:	fe 84       	ldd	r15, Y+14	; 0x0e
     906:	0f 85       	ldd	r16, Y+15	; 0x0f
     908:	18 89       	ldd	r17, Y+16	; 0x10
     90a:	a3 01       	movw	r20, r6
     90c:	92 01       	movw	r18, r4
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	cb 01       	movw	r24, r22
     914:	13 d4       	rcall	.+2086   	; 0x113c <Quaternion_set>
	Quaternion_multiply(&omega, &orientation, &delta);
     916:	42 ea       	ldi	r20, 0xA2	; 162
     918:	51 e0       	ldi	r21, 0x01	; 1
     91a:	66 e8       	ldi	r22, 0x86	; 134
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	c4 01       	movw	r24, r8
     920:	66 d5       	rcall	.+2764   	; 0x13ee <Quaternion_multiply>
	Quaternion_ratio(&delta, 0.5 * 16 / 1000, &delta);
     922:	22 ea       	ldi	r18, 0xA2	; 162
     924:	31 e0       	ldi	r19, 0x01	; 1
     926:	4f e6       	ldi	r20, 0x6F	; 111
     928:	52 e1       	ldi	r21, 0x12	; 18
     92a:	63 e0       	ldi	r22, 0x03	; 3
     92c:	7c e3       	ldi	r23, 0x3C	; 60
     92e:	c9 01       	movw	r24, r18
     930:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <Quaternion_ratio>
	Quaternion_addition(&orientation, &delta, &orientation);
     934:	46 e8       	ldi	r20, 0x86	; 134
     936:	51 e0       	ldi	r21, 0x01	; 1
     938:	62 ea       	ldi	r22, 0xA2	; 162
     93a:	71 e0       	ldi	r23, 0x01	; 1
     93c:	ca 01       	movw	r24, r20
     93e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <Quaternion_addition>
	Quaternion_normalize(&orientation, &orientation);
     942:	66 e8       	ldi	r22, 0x86	; 134
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	cb 01       	movw	r24, r22
     948:	dd d4       	rcall	.+2490   	; 0x1304 <Quaternion_normalize>
	
	Quaternion_rotate(&orientation, orient_x_init, orient_x);
     94a:	4e ec       	ldi	r20, 0xCE	; 206
     94c:	51 e0       	ldi	r21, 0x01	; 1
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	86 e8       	ldi	r24, 0x86	; 134
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	a8 d6       	rcall	.+3408   	; 0x16a8 <Quaternion_rotate>
	
	UART1_print16b((uint16_t) (orient_x[0] * 1000));
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	4a e7       	ldi	r20, 0x7A	; 122
     95e:	54 e4       	ldi	r21, 0x44	; 68
     960:	ae ec       	ldi	r26, 0xCE	; 206
     962:	b1 e0       	ldi	r27, 0x01	; 1
     964:	6d 91       	ld	r22, X+
     966:	7d 91       	ld	r23, X+
     968:	8d 91       	ld	r24, X+
     96a:	9c 91       	ld	r25, X
     96c:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     970:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__fixunssfsi>
     974:	cb 01       	movw	r24, r22
	UART1_transmit('\t');
     976:	36 dd       	rcall	.-1428   	; 0x3e4 <UART1_print16b>
     978:	89 e0       	ldi	r24, 0x09	; 9
     97a:	2c dd       	rcall	.-1448   	; 0x3d4 <UART1_transmit>
	UART1_print16b((uint16_t) (orient_x[1] * 1000));
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	4a e7       	ldi	r20, 0x7A	; 122
     982:	54 e4       	ldi	r21, 0x44	; 68
     984:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <orient_x+0x4>
     988:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <orient_x+0x5>
     98c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <orient_x+0x6>
     990:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <orient_x+0x7>
     994:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     998:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__fixunssfsi>
     99c:	cb 01       	movw	r24, r22
	UART1_transmit('\t');
     99e:	22 dd       	rcall	.-1468   	; 0x3e4 <UART1_print16b>
     9a0:	89 e0       	ldi	r24, 0x09	; 9
     9a2:	18 dd       	rcall	.-1488   	; 0x3d4 <UART1_transmit>
	UART1_print16b((uint16_t) (orient_x[2] * 1000));
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	4a e7       	ldi	r20, 0x7A	; 122
     9aa:	54 e4       	ldi	r21, 0x44	; 68
     9ac:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <orient_x+0x8>
     9b0:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <orient_x+0x9>
     9b4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <orient_x+0xa>
     9b8:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <orient_x+0xb>
     9bc:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     9c0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__fixunssfsi>
	UART1_transmit('\n');
     9c4:	cb 01       	movw	r24, r22
     9c6:	0e dd       	rcall	.-1508   	; 0x3e4 <UART1_print16b>
     9c8:	8a e0       	ldi	r24, 0x0A	; 10

	AK8963I2CReadMAGNETO_2(mag);
     9ca:	04 dd       	rcall	.-1528   	; 0x3d4 <UART1_transmit>
     9cc:	8a ed       	ldi	r24, 0xDA	; 218
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	7f d3       	rcall	.+1790   	; 0x10d0 <AK8963I2CReadMAGNETO_2>

	if(n_enter>=25){
     9d2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <n_enter>
     9d6:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <n_enter+0x1>
     9da:	49 97       	sbiw	r24, 0x19	; 25
     9dc:	24 f0       	brlt	.+8      	; 0x9e6 <__vector_16+0x514>

		n_enter=0;
     9de:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <n_enter+0x1>
     9e2:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <n_enter>

	}

	
	 
}
     9e6:	64 96       	adiw	r28, 0x14	; 20
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	bf 91       	pop	r27
     9fc:	af 91       	pop	r26
     9fe:	9f 91       	pop	r25
     a00:	8f 91       	pop	r24
     a02:	7f 91       	pop	r23
     a04:	6f 91       	pop	r22
     a06:	5f 91       	pop	r21
     a08:	4f 91       	pop	r20
     a0a:	3f 91       	pop	r19
     a0c:	2f 91       	pop	r18
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	9f 90       	pop	r9
     a20:	8f 90       	pop	r8
     a22:	7f 90       	pop	r7
     a24:	6f 90       	pop	r6
     a26:	5f 90       	pop	r5
     a28:	4f 90       	pop	r4
     a2a:	0f 90       	pop	r0
     a2c:	0b be       	out	0x3b, r0	; 59
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti

00000a38 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a38:	2f ef       	ldi	r18, 0xFF	; 255
     a3a:	83 ed       	ldi	r24, 0xD3	; 211
     a3c:	90 e3       	ldi	r25, 0x30	; 48
     a3e:	21 50       	subi	r18, 0x01	; 1
     a40:	80 40       	sbci	r24, 0x00	; 0
     a42:	90 40       	sbci	r25, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <main+0x6>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <main+0x10>
     a48:	00 00       	nop

int main(void)
{

	_delay_ms(1000);
	UART1_init();
     a4a:	ac dc       	rcall	.-1704   	; 0x3a4 <UART1_init>
	MPU9250I2CInit(400000);		
     a4c:	60 e8       	ldi	r22, 0x80	; 128
     a4e:	7a e1       	ldi	r23, 0x1A	; 26
     a50:	86 e0       	ldi	r24, 0x06	; 6
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	4d d1       	rcall	.+666    	; 0xcf0 <MPU9250I2CInit>
     a56:	2f ef       	ldi	r18, 0xFF	; 255
     a58:	83 ed       	ldi	r24, 0xD3	; 211
     a5a:	90 e3       	ldi	r25, 0x30	; 48
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	80 40       	sbci	r24, 0x00	; 0
     a60:	90 40       	sbci	r25, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <main+0x24>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <main+0x2e>
     a66:	00 00       	nop
	_delay_ms(1000);		
	
	TCCR0 = 0x00;
     a68:	13 be       	out	0x33, r1	; 51
	//TCCR2 = 0x68;				        // 표준모드, 타이머 정지
	//TCCR2 = 0x00;						// 함수 소요시간 계산
	TCNT0 = 6;
     a6a:	86 e0       	ldi	r24, 0x06	; 6
     a6c:	82 bf       	out	0x32, r24	; 50
	//TCNT2 = 6;					        // 타이머 초기 값 설정
	//OCR2 = 250;
	
	//DDRB |= (1<<DDB7);
	// 인터럽트 설정
	TIMSK = (1<<TOIE0); 	// 타이머0,2 오버플로 인터럽트 허용
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x07;
     a72:	83 b7       	in	r24, 0x33	; 51
     a74:	87 60       	ori	r24, 0x07	; 7
     a76:	83 bf       	out	0x33, r24	; 51
     a78:	02 e0       	ldi	r16, 0x02	; 2
     a7a:	18 e0       	ldi	r17, 0x08	; 8
    int i = 0;

	for( i = 0 ; i<2050 ; i++ )
	{
		
		MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
     a7c:	66 e9       	ldi	r22, 0x96	; 150
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	82 eb       	ldi	r24, 0xB2	; 178
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	1d d2       	rcall	.+1082   	; 0xec0 <MPU9250I2CReadIMU_f>
		gyrosumxx += gyro2_f[0];
     a86:	c6 e9       	ldi	r28, 0x96	; 150
     a88:	d1 e0       	ldi	r29, 0x01	; 1
     a8a:	28 81       	ld	r18, Y
     a8c:	39 81       	ldd	r19, Y+1	; 0x01
     a8e:	4a 81       	ldd	r20, Y+2	; 0x02
     a90:	5b 81       	ldd	r21, Y+3	; 0x03
     a92:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <gyrosumxx>
     a96:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <gyrosumxx+0x1>
     a9a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <gyrosumxx+0x2>
     a9e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <gyrosumxx+0x3>
     aa2:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     aa6:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <gyrosumxx>
     aaa:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <gyrosumxx+0x1>
     aae:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <gyrosumxx+0x2>
     ab2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <gyrosumxx+0x3>
		gyrosumyy += gyro2_f[1];
     ab6:	2c 81       	ldd	r18, Y+4	; 0x04
     ab8:	3d 81       	ldd	r19, Y+5	; 0x05
     aba:	4e 81       	ldd	r20, Y+6	; 0x06
     abc:	5f 81       	ldd	r21, Y+7	; 0x07
     abe:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <gyrosumyy>
     ac2:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <gyrosumyy+0x1>
     ac6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <gyrosumyy+0x2>
     aca:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <gyrosumyy+0x3>
     ace:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     ad2:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <gyrosumyy>
     ad6:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <gyrosumyy+0x1>
     ada:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <gyrosumyy+0x2>
     ade:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <gyrosumyy+0x3>
		gyrosumzz += gyro2_f[2];
     ae2:	28 85       	ldd	r18, Y+8	; 0x08
     ae4:	39 85       	ldd	r19, Y+9	; 0x09
     ae6:	4a 85       	ldd	r20, Y+10	; 0x0a
     ae8:	5b 85       	ldd	r21, Y+11	; 0x0b
     aea:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <gyrosumzz>
     aee:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <gyrosumzz+0x1>
     af2:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <gyrosumzz+0x2>
     af6:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <gyrosumzz+0x3>
     afa:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__addsf3>
     afe:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <gyrosumzz>
     b02:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <gyrosumzz+0x1>
     b06:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <gyrosumzz+0x2>
     b0a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <gyrosumzz+0x3>
     b0e:	8f e3       	ldi	r24, 0x3F	; 63
     b10:	9c e9       	ldi	r25, 0x9C	; 156
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <main+0xda>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <main+0xe0>
     b18:	00 00       	nop
     b1a:	01 50       	subi	r16, 0x01	; 1
     b1c:	11 09       	sbc	r17, r1
	TCCR0 |= 0x07;
	//TCCR2 |= 0x03;						//1ms(16000tic) , duty 64

    int i = 0;

	for( i = 0 ; i<2050 ; i++ )
     b1e:	09 f0       	breq	.+2      	; 0xb22 <main+0xea>
     b20:	ad cf       	rjmp	.-166    	; 0xa7c <main+0x44>
		gyrosumyy += gyro2_f[1];
		gyrosumzz += gyro2_f[2];
		_delay_ms(10);
		
	}
    avgxx = gyrosumxx / 2050.0;
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e2       	ldi	r19, 0x20	; 32
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	55 e4       	ldi	r21, 0x45	; 69
     b2a:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <gyrosumxx>
     b2e:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <gyrosumxx+0x1>
     b32:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <gyrosumxx+0x2>
     b36:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <gyrosumxx+0x3>
     b3a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__divsf3>
     b3e:	6b 01       	movw	r12, r22
     b40:	7c 01       	movw	r14, r24
     b42:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <avgxx>
     b46:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <avgxx+0x1>
     b4a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <avgxx+0x2>
     b4e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <avgxx+0x3>
    avgyy = gyrosumyy / 2050.0;
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e2       	ldi	r19, 0x20	; 32
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	55 e4       	ldi	r21, 0x45	; 69
     b5a:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <gyrosumyy>
     b5e:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <gyrosumyy+0x1>
     b62:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <gyrosumyy+0x2>
     b66:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <gyrosumyy+0x3>
     b6a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__divsf3>
     b6e:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <avgyy>
     b72:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <avgyy+0x1>
     b76:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <avgyy+0x2>
     b7a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <avgyy+0x3>
    avgzz = gyrosumzz / 2050.0;
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e2       	ldi	r19, 0x20	; 32
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	55 e4       	ldi	r21, 0x45	; 69
     b86:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <gyrosumzz>
     b8a:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <gyrosumzz+0x1>
     b8e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <gyrosumzz+0x2>
     b92:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <gyrosumzz+0x3>
     b96:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__divsf3>
     b9a:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <avgzz>
     b9e:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <avgzz+0x1>
     ba2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <avgzz+0x2>
     ba6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <avgzz+0x3>
	UART1_print16b((int16_t)(avgxx*1000));	
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a e7       	ldi	r20, 0x7A	; 122
     bb0:	54 e4       	ldi	r21, 0x44	; 68
     bb2:	c7 01       	movw	r24, r14
     bb4:	b6 01       	movw	r22, r12
     bb6:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     bba:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fixsfsi>
     bbe:	cb 01       	movw	r24, r22
	UART1_transmit('\t');
     bc0:	11 dc       	rcall	.-2014   	; 0x3e4 <UART1_print16b>
     bc2:	89 e0       	ldi	r24, 0x09	; 9
     bc4:	07 dc       	rcall	.-2034   	; 0x3d4 <UART1_transmit>
	UART1_print16b((int16_t)(avgyy*1000));
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	4a e7       	ldi	r20, 0x7A	; 122
     bcc:	54 e4       	ldi	r21, 0x44	; 68
     bce:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <avgyy>
     bd2:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <avgyy+0x1>
     bd6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <avgyy+0x2>
     bda:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <avgyy+0x3>
     bde:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     be2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fixsfsi>
     be6:	cb 01       	movw	r24, r22
	UART1_transmit('\t');
     be8:	fd db       	rcall	.-2054   	; 0x3e4 <UART1_print16b>
     bea:	89 e0       	ldi	r24, 0x09	; 9
     bec:	f3 db       	rcall	.-2074   	; 0x3d4 <UART1_transmit>
	UART1_print16b((int16_t)(avgzz*1000));
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	4a e7       	ldi	r20, 0x7A	; 122
     bf4:	54 e4       	ldi	r21, 0x44	; 68
     bf6:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <avgzz>
     bfa:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <avgzz+0x1>
     bfe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <avgzz+0x2>
     c02:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <avgzz+0x3>
     c06:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     c0a:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fixsfsi>
	UART1_transmit('\n');	
     c0e:	cb 01       	movw	r24, r22
     c10:	e9 db       	rcall	.-2094   	; 0x3e4 <UART1_print16b>
	UART1_transmit('\n');
     c12:	8a e0       	ldi	r24, 0x0A	; 10
     c14:	df db       	rcall	.-2114   	; 0x3d4 <UART1_transmit>
     c16:	8a e0       	ldi	r24, 0x0A	; 10
	
	MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
     c18:	dd db       	rcall	.-2118   	; 0x3d4 <UART1_transmit>
     c1a:	be 01       	movw	r22, r28
     c1c:	82 eb       	ldi	r24, 0xB2	; 178
	AK8963I2CReadMAGNETO(mag);
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	4f d1       	rcall	.+670    	; 0xec0 <MPU9250I2CReadIMU_f>
     c22:	8a ed       	ldi	r24, 0xDA	; 218
	UART1_print16b(mag[0]);
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	0c d2       	rcall	.+1048   	; 0x1040 <AK8963I2CReadMAGNETO>
     c28:	ca ed       	ldi	r28, 0xDA	; 218
     c2a:	d1 e0       	ldi	r29, 0x01	; 1
	UART1_transmit('\t');
     c2c:	88 81       	ld	r24, Y
     c2e:	99 81       	ldd	r25, Y+1	; 0x01
     c30:	d9 db       	rcall	.-2126   	; 0x3e4 <UART1_print16b>
	UART1_print16b(mag[1]);
     c32:	89 e0       	ldi	r24, 0x09	; 9
     c34:	cf db       	rcall	.-2146   	; 0x3d4 <UART1_transmit>
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	9b 81       	ldd	r25, Y+3	; 0x03
	UART1_transmit('\t');
     c3a:	d4 db       	rcall	.-2136   	; 0x3e4 <UART1_print16b>
     c3c:	89 e0       	ldi	r24, 0x09	; 9
	UART1_print16b(mag[2]);
     c3e:	ca db       	rcall	.-2156   	; 0x3d4 <UART1_transmit>
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
	UART1_transmit('\n');		
     c44:	cf db       	rcall	.-2146   	; 0x3e4 <UART1_print16b>
     c46:	8a e0       	ldi	r24, 0x0A	; 10
     c48:	c5 db       	rcall	.-2166   	; 0x3d4 <UART1_transmit>
     c4a:	8f e3       	ldi	r24, 0x3F	; 63
     c4c:	9c e9       	ldi	r25, 0x9C	; 156
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <main+0x216>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <main+0x21c>
	_delay_ms(10);
	Quaternion_setIdentity(&orientation); 
     c54:	00 00       	nop
     c56:	86 e8       	ldi	r24, 0x86	; 134
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	a0 d2       	rcall	.+1344   	; 0x119c <Quaternion_setIdentity>
	sei();							    // 전역 인터럽트 허용
     c5c:	78 94       	sei

	UART1_print16b((int16_t)n_enter);
     c5e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <n_enter>
     c62:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <n_enter+0x1>
     c66:	be db       	rcall	.-2180   	; 0x3e4 <UART1_print16b>
     c68:	8a e0       	ldi	r24, 0x0A	; 10
	UART1_transmit('\n');
     c6a:	b4 db       	rcall	.-2200   	; 0x3d4 <UART1_transmit>
     c6c:	9f ef       	ldi	r25, 0xFF	; 255
     c6e:	27 e8       	ldi	r18, 0x87	; 135
     c70:	83 e1       	ldi	r24, 0x13	; 19
     c72:	91 50       	subi	r25, 0x01	; 1
     c74:	20 40       	sbci	r18, 0x00	; 0
     c76:	80 40       	sbci	r24, 0x00	; 0
     c78:	e1 f7       	brne	.-8      	; 0xc72 <main+0x23a>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <main+0x244>
     c7c:	00 00       	nop
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
     c80:	21 ee       	ldi	r18, 0xE1	; 225
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	91 50       	subi	r25, 0x01	; 1
     c86:	20 40       	sbci	r18, 0x00	; 0
     c88:	80 40       	sbci	r24, 0x00	; 0
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <main+0x24c>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <main+0x256>
     c8e:	00 00       	nop
     c90:	f6 cf       	rjmp	.-20     	; 0xc7e <main+0x246>

00000c92 <write_a_byte>:
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
	
	if(read_n_bytes(EXT_SENS_DATA_00, (uint8_t *) &me, 1) < 0)
		return -1;
	
	return me;
}
     c96:	00 d0       	rcall	.+0      	; 0xc98 <write_a_byte+0x6>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	42 e0       	ldi	r20, 0x02	; 2
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	be 01       	movw	r22, r28
     caa:	6f 5f       	subi	r22, 0xFF	; 255
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	88 e6       	ldi	r24, 0x68	; 104
     cb0:	6c da       	rcall	.-2856   	; 0x18a <i2c_write_n_bytes>
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <read_n_bytes>:
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	eb 01       	movw	r28, r22
     cc6:	8a 01       	movw	r16, r20
     cc8:	68 2f       	mov	r22, r24
     cca:	60 68       	ori	r22, 0x80	; 128
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	88 e6       	ldi	r24, 0x68	; 104
     cd2:	01 da       	rcall	.-3070   	; 0xd6 <i2c_write_a_byte>
     cd4:	99 23       	and	r25, r25
     cd6:	2c f0       	brlt	.+10     	; 0xce2 <read_n_bytes+0x26>
     cd8:	a8 01       	movw	r20, r16
     cda:	be 01       	movw	r22, r28
     cdc:	88 e6       	ldi	r24, 0x68	; 104
     cde:	d3 da       	rcall	.-2650   	; 0x286 <i2c_read_n_bytes>
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <read_n_bytes+0x2a>
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	08 95       	ret

00000cf0 <MPU9250I2CInit>:
     cf0:	ec d9       	rcall	.-3112   	; 0xca <i2c_init>
     cf2:	60 e8       	ldi	r22, 0x80	; 128
     cf4:	8b e6       	ldi	r24, 0x6B	; 107
     cf6:	cd df       	rcall	.-102    	; 0xc92 <write_a_byte>
     cf8:	8f e3       	ldi	r24, 0x3F	; 63
     cfa:	9c e9       	ldi	r25, 0x9C	; 156
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <MPU9250I2CInit+0xc>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <MPU9250I2CInit+0x12>
     d02:	00 00       	nop
     d04:	8f e3       	ldi	r24, 0x3F	; 63
     d06:	9c e9       	ldi	r25, 0x9C	; 156
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <MPU9250I2CInit+0x18>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <MPU9250I2CInit+0x1e>
     d0e:	00 00       	nop
     d10:	8f e3       	ldi	r24, 0x3F	; 63
     d12:	9c e9       	ldi	r25, 0x9C	; 156
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <MPU9250I2CInit+0x24>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <MPU9250I2CInit+0x2a>
     d1a:	00 00       	nop
     d1c:	8f e3       	ldi	r24, 0x3F	; 63
     d1e:	9c e9       	ldi	r25, 0x9C	; 156
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <MPU9250I2CInit+0x30>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <MPU9250I2CInit+0x36>
     d26:	00 00       	nop
     d28:	8f e3       	ldi	r24, 0x3F	; 63
     d2a:	9c e9       	ldi	r25, 0x9C	; 156
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <MPU9250I2CInit+0x3c>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <MPU9250I2CInit+0x42>
     d32:	00 00       	nop
     d34:	8f e3       	ldi	r24, 0x3F	; 63
     d36:	9c e9       	ldi	r25, 0x9C	; 156
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <MPU9250I2CInit+0x48>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <MPU9250I2CInit+0x4e>
     d3e:	00 00       	nop
     d40:	8f e3       	ldi	r24, 0x3F	; 63
     d42:	9c e9       	ldi	r25, 0x9C	; 156
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <MPU9250I2CInit+0x54>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <MPU9250I2CInit+0x5a>
     d4a:	00 00       	nop
     d4c:	8f e3       	ldi	r24, 0x3F	; 63
     d4e:	9c e9       	ldi	r25, 0x9C	; 156
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <MPU9250I2CInit+0x60>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <MPU9250I2CInit+0x66>
     d56:	00 00       	nop
     d58:	8f e3       	ldi	r24, 0x3F	; 63
     d5a:	9c e9       	ldi	r25, 0x9C	; 156
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <MPU9250I2CInit+0x6c>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <MPU9250I2CInit+0x72>
     d62:	00 00       	nop
     d64:	8f e3       	ldi	r24, 0x3F	; 63
     d66:	9c e9       	ldi	r25, 0x9C	; 156
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <MPU9250I2CInit+0x78>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <MPU9250I2CInit+0x7e>
     d6e:	00 00       	nop
     d70:	67 e0       	ldi	r22, 0x07	; 7
     d72:	88 e6       	ldi	r24, 0x68	; 104
     d74:	8e df       	rcall	.-228    	; 0xc92 <write_a_byte>
     d76:	8f e3       	ldi	r24, 0x3F	; 63
     d78:	9c e9       	ldi	r25, 0x9C	; 156
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <MPU9250I2CInit+0x8a>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <MPU9250I2CInit+0x90>
     d80:	00 00       	nop
     d82:	8f e3       	ldi	r24, 0x3F	; 63
     d84:	9c e9       	ldi	r25, 0x9C	; 156
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <MPU9250I2CInit+0x96>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <MPU9250I2CInit+0x9c>
     d8c:	00 00       	nop
     d8e:	8f e3       	ldi	r24, 0x3F	; 63
     d90:	9c e9       	ldi	r25, 0x9C	; 156
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <MPU9250I2CInit+0xa2>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <MPU9250I2CInit+0xa8>
     d98:	00 00       	nop
     d9a:	8f e3       	ldi	r24, 0x3F	; 63
     d9c:	9c e9       	ldi	r25, 0x9C	; 156
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <MPU9250I2CInit+0xae>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <MPU9250I2CInit+0xb4>
     da4:	00 00       	nop
     da6:	8f e3       	ldi	r24, 0x3F	; 63
     da8:	9c e9       	ldi	r25, 0x9C	; 156
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <MPU9250I2CInit+0xba>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <MPU9250I2CInit+0xc0>
     db0:	00 00       	nop
     db2:	8f e3       	ldi	r24, 0x3F	; 63
     db4:	9c e9       	ldi	r25, 0x9C	; 156
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <MPU9250I2CInit+0xc6>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <MPU9250I2CInit+0xcc>
     dbc:	00 00       	nop
     dbe:	8f e3       	ldi	r24, 0x3F	; 63
     dc0:	9c e9       	ldi	r25, 0x9C	; 156
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <MPU9250I2CInit+0xd2>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <MPU9250I2CInit+0xd8>
     dc8:	00 00       	nop
     dca:	8f e3       	ldi	r24, 0x3F	; 63
     dcc:	9c e9       	ldi	r25, 0x9C	; 156
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <MPU9250I2CInit+0xde>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <MPU9250I2CInit+0xe4>
     dd4:	00 00       	nop
     dd6:	8f e3       	ldi	r24, 0x3F	; 63
     dd8:	9c e9       	ldi	r25, 0x9C	; 156
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <MPU9250I2CInit+0xea>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <MPU9250I2CInit+0xf0>
     de0:	00 00       	nop
     de2:	8f e3       	ldi	r24, 0x3F	; 63
     de4:	9c e9       	ldi	r25, 0x9C	; 156
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <MPU9250I2CInit+0xf6>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <MPU9250I2CInit+0xfc>
     dec:	00 00       	nop
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	88 e6       	ldi	r24, 0x68	; 104
     df2:	4f df       	rcall	.-354    	; 0xc92 <write_a_byte>
     df4:	8f e3       	ldi	r24, 0x3F	; 63
     df6:	9c e9       	ldi	r25, 0x9C	; 156
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <MPU9250I2CInit+0x108>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <MPU9250I2CInit+0x10e>
     dfe:	00 00       	nop
     e00:	60 e2       	ldi	r22, 0x20	; 32
     e02:	8a e6       	ldi	r24, 0x6A	; 106
     e04:	46 df       	rcall	.-372    	; 0xc92 <write_a_byte>
     e06:	6d e0       	ldi	r22, 0x0D	; 13
     e08:	84 e2       	ldi	r24, 0x24	; 36
     e0a:	43 df       	rcall	.-378    	; 0xc92 <write_a_byte>
     e0c:	8f e3       	ldi	r24, 0x3F	; 63
     e0e:	9c e9       	ldi	r25, 0x9C	; 156
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <MPU9250I2CInit+0x120>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <MPU9250I2CInit+0x126>
     e16:	00 00       	nop
     e18:	6c e0       	ldi	r22, 0x0C	; 12
     e1a:	85 e2       	ldi	r24, 0x25	; 37
     e1c:	3a df       	rcall	.-396    	; 0xc92 <write_a_byte>
     e1e:	6b e0       	ldi	r22, 0x0B	; 11
     e20:	86 e2       	ldi	r24, 0x26	; 38
     e22:	37 df       	rcall	.-402    	; 0xc92 <write_a_byte>
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	83 e6       	ldi	r24, 0x63	; 99
     e28:	34 df       	rcall	.-408    	; 0xc92 <write_a_byte>
     e2a:	61 e8       	ldi	r22, 0x81	; 129
     e2c:	87 e2       	ldi	r24, 0x27	; 39
     e2e:	31 df       	rcall	.-414    	; 0xc92 <write_a_byte>
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	20 e7       	ldi	r18, 0x70	; 112
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	91 50       	subi	r25, 0x01	; 1
     e38:	20 40       	sbci	r18, 0x00	; 0
     e3a:	80 40       	sbci	r24, 0x00	; 0
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <MPU9250I2CInit+0x146>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <MPU9250I2CInit+0x150>
     e40:	00 00       	nop
     e42:	6c e0       	ldi	r22, 0x0C	; 12
     e44:	85 e2       	ldi	r24, 0x25	; 37
     e46:	25 df       	rcall	.-438    	; 0xc92 <write_a_byte>
     e48:	6a e0       	ldi	r22, 0x0A	; 10
     e4a:	86 e2       	ldi	r24, 0x26	; 38
     e4c:	22 df       	rcall	.-444    	; 0xc92 <write_a_byte>
     e4e:	60 e1       	ldi	r22, 0x10	; 16
     e50:	83 e6       	ldi	r24, 0x63	; 99
     e52:	1f df       	rcall	.-450    	; 0xc92 <write_a_byte>
     e54:	61 e8       	ldi	r22, 0x81	; 129
     e56:	87 e2       	ldi	r24, 0x27	; 39
     e58:	1c df       	rcall	.-456    	; 0xc92 <write_a_byte>
     e5a:	9f ef       	ldi	r25, 0xFF	; 255
     e5c:	20 e7       	ldi	r18, 0x70	; 112
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	20 40       	sbci	r18, 0x00	; 0
     e64:	80 40       	sbci	r24, 0x00	; 0
     e66:	e1 f7       	brne	.-8      	; 0xe60 <MPU9250I2CInit+0x170>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <MPU9250I2CInit+0x17a>
     e6a:	00 00       	nop
     e6c:	6c e0       	ldi	r22, 0x0C	; 12
     e6e:	85 e2       	ldi	r24, 0x25	; 37
     e70:	10 df       	rcall	.-480    	; 0xc92 <write_a_byte>
     e72:	6a e0       	ldi	r22, 0x0A	; 10
     e74:	86 e2       	ldi	r24, 0x26	; 38
     e76:	0d df       	rcall	.-486    	; 0xc92 <write_a_byte>
     e78:	66 e1       	ldi	r22, 0x16	; 22
     e7a:	83 e6       	ldi	r24, 0x63	; 99
     e7c:	0a df       	rcall	.-492    	; 0xc92 <write_a_byte>
     e7e:	61 e8       	ldi	r22, 0x81	; 129
     e80:	87 e2       	ldi	r24, 0x27	; 39
     e82:	07 df       	rcall	.-498    	; 0xc92 <write_a_byte>
     e84:	9f ef       	ldi	r25, 0xFF	; 255
     e86:	20 e7       	ldi	r18, 0x70	; 112
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	91 50       	subi	r25, 0x01	; 1
     e8c:	20 40       	sbci	r18, 0x00	; 0
     e8e:	80 40       	sbci	r24, 0x00	; 0
     e90:	e1 f7       	brne	.-8      	; 0xe8a <MPU9250I2CInit+0x19a>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <MPU9250I2CInit+0x1a4>
     e94:	00 00       	nop
     e96:	6c e8       	ldi	r22, 0x8C	; 140
     e98:	85 e2       	ldi	r24, 0x25	; 37
     e9a:	fb de       	rcall	.-522    	; 0xc92 <write_a_byte>
     e9c:	63 e0       	ldi	r22, 0x03	; 3
     e9e:	86 e2       	ldi	r24, 0x26	; 38
     ea0:	f8 de       	rcall	.-528    	; 0xc92 <write_a_byte>
     ea2:	67 e8       	ldi	r22, 0x87	; 135
     ea4:	87 e2       	ldi	r24, 0x27	; 39
     ea6:	f5 de       	rcall	.-534    	; 0xc92 <write_a_byte>
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	20 e7       	ldi	r18, 0x70	; 112
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	91 50       	subi	r25, 0x01	; 1
     eb0:	20 40       	sbci	r18, 0x00	; 0
     eb2:	80 40       	sbci	r24, 0x00	; 0
     eb4:	e1 f7       	brne	.-8      	; 0xeae <MPU9250I2CInit+0x1be>
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <MPU9250I2CInit+0x1c8>
     eb8:	00 00       	nop
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	08 95       	ret

00000ec0 <MPU9250I2CReadIMU_f>:
     ec0:	8f 92       	push	r8
     ec2:	9f 92       	push	r9
     ec4:	af 92       	push	r10
     ec6:	bf 92       	push	r11
     ec8:	cf 92       	push	r12
     eca:	df 92       	push	r13
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	6a 97       	sbiw	r28, 0x1a	; 26
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	7c 01       	movw	r14, r24
     eea:	8b 01       	movw	r16, r22
     eec:	4e e0       	ldi	r20, 0x0E	; 14
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	be 01       	movw	r22, r28
     ef2:	6f 5f       	subi	r22, 0xFF	; 255
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8b e3       	ldi	r24, 0x3B	; 59
     ef8:	e1 de       	rcall	.-574    	; 0xcbc <read_n_bytes>
     efa:	99 23       	and	r25, r25
     efc:	0c f4       	brge	.+2      	; 0xf00 <MPU9250I2CReadIMU_f+0x40>
     efe:	8b c0       	rjmp	.+278    	; 0x1016 <__DATA_REGION_LENGTH__+0x16>
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	8f 87       	std	Y+15, r24	; 0x0f
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 8b       	std	Y+16, r24	; 0x10
     f08:	8a 85       	ldd	r24, Y+10	; 0x0a
     f0a:	8d 8b       	std	Y+21, r24	; 0x15
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	8e 8b       	std	Y+22, r24	; 0x16
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	89 8b       	std	Y+17, r24	; 0x11
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	8a 8b       	std	Y+18, r24	; 0x12
     f18:	8c 85       	ldd	r24, Y+12	; 0x0c
     f1a:	8f 8b       	std	Y+23, r24	; 0x17
     f1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f1e:	88 8f       	std	Y+24, r24	; 0x18
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	8b 8b       	std	Y+19, r24	; 0x13
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	8c 8b       	std	Y+20, r24	; 0x14
     f28:	8e 85       	ldd	r24, Y+14	; 0x0e
     f2a:	89 8f       	std	Y+25, r24	; 0x19
     f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2e:	8a 8f       	std	Y+26, r24	; 0x1a
     f30:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <acc_scale>
     f34:	90 90 2d 01 	lds	r9, 0x012D	; 0x80012d <acc_scale+0x1>
     f38:	a0 90 2e 01 	lds	r10, 0x012E	; 0x80012e <acc_scale+0x2>
     f3c:	b0 90 2f 01 	lds	r11, 0x012F	; 0x80012f <acc_scale+0x3>
     f40:	6f 85       	ldd	r22, Y+15	; 0x0f
     f42:	78 89       	ldd	r23, Y+16	; 0x10
     f44:	07 2e       	mov	r0, r23
     f46:	00 0c       	add	r0, r0
     f48:	88 0b       	sbc	r24, r24
     f4a:	99 0b       	sbc	r25, r25
     f4c:	eb d7       	rcall	.+4054   	; 0x1f24 <__floatsisf>
     f4e:	a5 01       	movw	r20, r10
     f50:	94 01       	movw	r18, r8
     f52:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     f56:	f7 01       	movw	r30, r14
     f58:	60 83       	st	Z, r22
     f5a:	71 83       	std	Z+1, r23	; 0x01
     f5c:	82 83       	std	Z+2, r24	; 0x02
     f5e:	93 83       	std	Z+3, r25	; 0x03
     f60:	69 89       	ldd	r22, Y+17	; 0x11
     f62:	7a 89       	ldd	r23, Y+18	; 0x12
     f64:	07 2e       	mov	r0, r23
     f66:	00 0c       	add	r0, r0
     f68:	88 0b       	sbc	r24, r24
     f6a:	99 0b       	sbc	r25, r25
     f6c:	db d7       	rcall	.+4022   	; 0x1f24 <__floatsisf>
     f6e:	a5 01       	movw	r20, r10
     f70:	94 01       	movw	r18, r8
     f72:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     f76:	f7 01       	movw	r30, r14
     f78:	64 83       	std	Z+4, r22	; 0x04
     f7a:	75 83       	std	Z+5, r23	; 0x05
     f7c:	86 83       	std	Z+6, r24	; 0x06
     f7e:	97 83       	std	Z+7, r25	; 0x07
     f80:	6b 89       	ldd	r22, Y+19	; 0x13
     f82:	7c 89       	ldd	r23, Y+20	; 0x14
     f84:	07 2e       	mov	r0, r23
     f86:	00 0c       	add	r0, r0
     f88:	88 0b       	sbc	r24, r24
     f8a:	99 0b       	sbc	r25, r25
     f8c:	cb d7       	rcall	.+3990   	; 0x1f24 <__floatsisf>
     f8e:	a5 01       	movw	r20, r10
     f90:	94 01       	movw	r18, r8
     f92:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     f96:	f7 01       	movw	r30, r14
     f98:	60 87       	std	Z+8, r22	; 0x08
     f9a:	71 87       	std	Z+9, r23	; 0x09
     f9c:	82 87       	std	Z+10, r24	; 0x0a
     f9e:	93 87       	std	Z+11, r25	; 0x0b
     fa0:	c0 90 28 01 	lds	r12, 0x0128	; 0x800128 <gyro_scale>
     fa4:	d0 90 29 01 	lds	r13, 0x0129	; 0x800129 <gyro_scale+0x1>
     fa8:	e0 90 2a 01 	lds	r14, 0x012A	; 0x80012a <gyro_scale+0x2>
     fac:	f0 90 2b 01 	lds	r15, 0x012B	; 0x80012b <gyro_scale+0x3>
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	7e 89       	ldd	r23, Y+22	; 0x16
     fb4:	07 2e       	mov	r0, r23
     fb6:	00 0c       	add	r0, r0
     fb8:	88 0b       	sbc	r24, r24
     fba:	99 0b       	sbc	r25, r25
     fbc:	b3 d7       	rcall	.+3942   	; 0x1f24 <__floatsisf>
     fbe:	a7 01       	movw	r20, r14
     fc0:	96 01       	movw	r18, r12
     fc2:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     fc6:	f8 01       	movw	r30, r16
     fc8:	60 83       	st	Z, r22
     fca:	71 83       	std	Z+1, r23	; 0x01
     fcc:	82 83       	std	Z+2, r24	; 0x02
     fce:	93 83       	std	Z+3, r25	; 0x03
     fd0:	6f 89       	ldd	r22, Y+23	; 0x17
     fd2:	78 8d       	ldd	r23, Y+24	; 0x18
     fd4:	07 2e       	mov	r0, r23
     fd6:	00 0c       	add	r0, r0
     fd8:	88 0b       	sbc	r24, r24
     fda:	99 0b       	sbc	r25, r25
     fdc:	a3 d7       	rcall	.+3910   	; 0x1f24 <__floatsisf>
     fde:	a7 01       	movw	r20, r14
     fe0:	96 01       	movw	r18, r12
     fe2:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     fe6:	f8 01       	movw	r30, r16
     fe8:	64 83       	std	Z+4, r22	; 0x04
     fea:	75 83       	std	Z+5, r23	; 0x05
     fec:	86 83       	std	Z+6, r24	; 0x06
     fee:	97 83       	std	Z+7, r25	; 0x07
     ff0:	69 8d       	ldd	r22, Y+25	; 0x19
     ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff4:	07 2e       	mov	r0, r23
     ff6:	00 0c       	add	r0, r0
     ff8:	88 0b       	sbc	r24, r24
     ffa:	99 0b       	sbc	r25, r25
     ffc:	93 d7       	rcall	.+3878   	; 0x1f24 <__floatsisf>
     ffe:	a7 01       	movw	r20, r14
    1000:	96 01       	movw	r18, r12
    1002:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
    1006:	f8 01       	movw	r30, r16
    1008:	60 87       	std	Z+8, r22	; 0x08
    100a:	71 87       	std	Z+9, r23	; 0x09
    100c:	82 87       	std	Z+10, r24	; 0x0a
    100e:	93 87       	std	Z+11, r25	; 0x0b
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	6a 96       	adiw	r28, 0x1a	; 26
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	08 95       	ret

00001040 <AK8963I2CReadMAGNETO>:


int AK8963I2CReadMAGNETO(int16_t mag[]){
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	00 d0       	rcall	.+0      	; 0x104a <AK8963I2CReadMAGNETO+0xa>
    104a:	00 d0       	rcall	.+0      	; 0x104c <AK8963I2CReadMAGNETO+0xc>
    104c:	00 d0       	rcall	.+0      	; 0x104e <AK8963I2CReadMAGNETO+0xe>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	08 2f       	mov	r16, r24
    1054:	19 2f       	mov	r17, r25
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;
	write_a_byte(I2C_SLV0_ADDR, 0x8c); //set the i2c slave address of ak8963(0x0c) read mode
    1056:	6c e8       	ldi	r22, 0x8C	; 140
    1058:	85 e2       	ldi	r24, 0x25	; 37
    105a:	1b de       	rcall	.-970    	; 0xc92 <write_a_byte>
	write_a_byte(I2C_SLV0_REG, 0x03); //i2c slave 0 register address from where to begin data transfer
    105c:	63 e0       	ldi	r22, 0x03	; 3
    105e:	86 e2       	ldi	r24, 0x26	; 38
    1060:	18 de       	rcall	.-976    	; 0xc92 <write_a_byte>
	write_a_byte(I2C_SLV0_CTRL, 0x87); //enable i2c and read 6 byte
    1062:	67 e8       	ldi	r22, 0x87	; 135
    1064:	87 e2       	ldi	r24, 0x27	; 39
    1066:	15 de       	rcall	.-982    	; 0xc92 <write_a_byte>
    1068:	2f ef       	ldi	r18, 0xFF	; 255
    106a:	80 e7       	ldi	r24, 0x70	; 112
    106c:	92 e0       	ldi	r25, 0x02	; 2
    106e:	21 50       	subi	r18, 0x01	; 1
    1070:	80 40       	sbci	r24, 0x00	; 0
    1072:	90 40       	sbci	r25, 0x00	; 0
    1074:	e1 f7       	brne	.-8      	; 0x106e <AK8963I2CReadMAGNETO+0x2e>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <AK8963I2CReadMAGNETO+0x38>
    1078:	00 00       	nop
	_delay_ms(50);	

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
    107a:	46 e0       	ldi	r20, 0x06	; 6
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	be 01       	movw	r22, r28
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	89 e4       	ldi	r24, 0x49	; 73
    1086:	1a de       	rcall	.-972    	; 0xcbc <read_n_bytes>
    1088:	99 23       	and	r25, r25
    108a:	ac f0       	brlt	.+42     	; 0x10b6 <AK8963I2CReadMAGNETO+0x76>
    108c:	fe 01       	movw	r30, r28
    108e:	31 96       	adiw	r30, 0x01	; 1
    1090:	a0 2f       	mov	r26, r16
    1092:	b1 2f       	mov	r27, r17
    1094:	9e 01       	movw	r18, r28
    1096:	29 5f       	subi	r18, 0xF9	; 249
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
	{
		ptr_mag[i]   = buf[i];
    109a:	80 81       	ld	r24, Z
    109c:	8c 93       	st	X, r24
		ptr_mag[i+1] = buf[i+1];
    109e:	81 81       	ldd	r24, Z+1	; 0x01
    10a0:	11 96       	adiw	r26, 0x01	; 1
    10a2:	8c 93       	st	X, r24
    10a4:	11 97       	sbiw	r26, 0x01	; 1
    10a6:	32 96       	adiw	r30, 0x02	; 2
    10a8:	12 96       	adiw	r26, 0x02	; 2
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
		return -1;
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
    10aa:	e2 17       	cp	r30, r18
    10ac:	f3 07       	cpc	r31, r19
    10ae:	a9 f7       	brne	.-22     	; 0x109a <AK8963I2CReadMAGNETO+0x5a>
	{
		ptr_mag[i]   = buf[i];
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <AK8963I2CReadMAGNETO+0x7a>
	write_a_byte(I2C_SLV0_REG, 0x03); //i2c slave 0 register address from where to begin data transfer
	write_a_byte(I2C_SLV0_CTRL, 0x87); //enable i2c and read 6 byte
	_delay_ms(50);	

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
		return -1;
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;

}
    10ba:	26 96       	adiw	r28, 0x06	; 6
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <AK8963I2CReadMAGNETO_2>:
int AK8963I2CReadMAGNETO_2(int16_t mag[]){
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	00 d0       	rcall	.+0      	; 0x10da <AK8963I2CReadMAGNETO_2+0xa>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <AK8963I2CReadMAGNETO_2+0xc>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <AK8963I2CReadMAGNETO_2+0xe>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	08 2f       	mov	r16, r24
    10e4:	19 2f       	mov	r17, r25
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
    10e6:	46 e0       	ldi	r20, 0x06	; 6
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	be 01       	movw	r22, r28
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	89 e4       	ldi	r24, 0x49	; 73
    10f2:	e4 dd       	rcall	.-1080   	; 0xcbc <read_n_bytes>
    10f4:	99 23       	and	r25, r25
    10f6:	ac f0       	brlt	.+42     	; 0x1122 <__stack+0x23>
    10f8:	fe 01       	movw	r30, r28
    10fa:	31 96       	adiw	r30, 0x01	; 1
    10fc:	a0 2f       	mov	r26, r16
    10fe:	b1 2f       	mov	r27, r17
    1100:	9e 01       	movw	r18, r28
    1102:	29 5f       	subi	r18, 0xF9	; 249
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
	{
		ptr_mag[i]   = buf[i];
    1106:	80 81       	ld	r24, Z
    1108:	8c 93       	st	X, r24
		ptr_mag[i+1] = buf[i+1];
    110a:	81 81       	ldd	r24, Z+1	; 0x01
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	8c 93       	st	X, r24
    1110:	11 97       	sbiw	r26, 0x01	; 1
    1112:	32 96       	adiw	r30, 0x02	; 2
    1114:	12 96       	adiw	r26, 0x02	; 2
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
	return -1;
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
    1116:	e2 17       	cp	r30, r18
    1118:	f3 07       	cpc	r31, r19
    111a:	a9 f7       	brne	.-22     	; 0x1106 <__stack+0x7>
	{
		ptr_mag[i]   = buf[i];
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <__stack+0x27>
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
	return -1;
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	9f ef       	ldi	r25, 0xFF	; 255
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;

}
    1126:	26 96       	adiw	r28, 0x06	; 6
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <Quaternion_set>:
        result.v[0] = (q1->v[0] * ratioA + q2->v[0] * ratioB);
        result.v[1] = (q1->v[1] * ratioA + q2->v[1] * ratioB);
        result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);
    }
    *output = result;
}
    113c:	8f 92       	push	r8
    113e:	9f 92       	push	r9
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	f4 01       	movw	r30, r8
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	11 f4       	brne	.+4      	; 0x1162 <Quaternion_set+0x26>
    115e:	0e 94 ff 10 	call	0x21fe	; 0x21fe <abort>
    1162:	60 83       	st	Z, r22
    1164:	71 83       	std	Z+1, r23	; 0x01
    1166:	82 83       	std	Z+2, r24	; 0x02
    1168:	93 83       	std	Z+3, r25	; 0x03
    116a:	24 83       	std	Z+4, r18	; 0x04
    116c:	35 83       	std	Z+5, r19	; 0x05
    116e:	46 83       	std	Z+6, r20	; 0x06
    1170:	57 83       	std	Z+7, r21	; 0x07
    1172:	e0 86       	std	Z+8, r14	; 0x08
    1174:	f1 86       	std	Z+9, r15	; 0x09
    1176:	02 87       	std	Z+10, r16	; 0x0a
    1178:	13 87       	std	Z+11, r17	; 0x0b
    117a:	a4 86       	std	Z+12, r10	; 0x0c
    117c:	b5 86       	std	Z+13, r11	; 0x0d
    117e:	c6 86       	std	Z+14, r12	; 0x0e
    1180:	d7 86       	std	Z+15, r13	; 0x0f
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	08 95       	ret

0000119c <Quaternion_setIdentity>:
    119c:	fc 01       	movw	r30, r24
    119e:	89 2b       	or	r24, r25
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <Quaternion_setIdentity+0xa>
    11a2:	0e 94 ff 10 	call	0x21fe	; 0x21fe <abort>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e8       	ldi	r26, 0x80	; 128
    11ac:	bf e3       	ldi	r27, 0x3F	; 63
    11ae:	80 83       	st	Z, r24
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	a2 83       	std	Z+2, r26	; 0x02
    11b4:	b3 83       	std	Z+3, r27	; 0x03
    11b6:	14 82       	std	Z+4, r1	; 0x04
    11b8:	15 82       	std	Z+5, r1	; 0x05
    11ba:	16 82       	std	Z+6, r1	; 0x06
    11bc:	17 82       	std	Z+7, r1	; 0x07
    11be:	10 86       	std	Z+8, r1	; 0x08
    11c0:	11 86       	std	Z+9, r1	; 0x09
    11c2:	12 86       	std	Z+10, r1	; 0x0a
    11c4:	13 86       	std	Z+11, r1	; 0x0b
    11c6:	14 86       	std	Z+12, r1	; 0x0c
    11c8:	15 86       	std	Z+13, r1	; 0x0d
    11ca:	16 86       	std	Z+14, r1	; 0x0e
    11cc:	17 86       	std	Z+15, r1	; 0x0f
    11ce:	08 95       	ret

000011d0 <Quaternion_norm>:
    11d0:	4f 92       	push	r4
    11d2:	5f 92       	push	r5
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	28 97       	sbiw	r28, 0x08	; 8
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	fc 01       	movw	r30, r24
    11fe:	89 2b       	or	r24, r25
    1200:	09 f4       	brne	.+2      	; 0x1204 <Quaternion_norm+0x34>
    1202:	fd d7       	rcall	.+4090   	; 0x21fe <abort>
    1204:	80 80       	ld	r8, Z
    1206:	91 80       	ldd	r9, Z+1	; 0x01
    1208:	a2 80       	ldd	r10, Z+2	; 0x02
    120a:	b3 80       	ldd	r11, Z+3	; 0x03
    120c:	c4 80       	ldd	r12, Z+4	; 0x04
    120e:	d5 80       	ldd	r13, Z+5	; 0x05
    1210:	e6 80       	ldd	r14, Z+6	; 0x06
    1212:	f7 80       	ldd	r15, Z+7	; 0x07
    1214:	80 85       	ldd	r24, Z+8	; 0x08
    1216:	91 85       	ldd	r25, Z+9	; 0x09
    1218:	a2 85       	ldd	r26, Z+10	; 0x0a
    121a:	b3 85       	ldd	r27, Z+11	; 0x0b
    121c:	8d 83       	std	Y+5, r24	; 0x05
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	af 83       	std	Y+7, r26	; 0x07
    1222:	b8 87       	std	Y+8, r27	; 0x08
    1224:	44 84       	ldd	r4, Z+12	; 0x0c
    1226:	55 84       	ldd	r5, Z+13	; 0x0d
    1228:	66 84       	ldd	r6, Z+14	; 0x0e
    122a:	77 84       	ldd	r7, Z+15	; 0x0f
    122c:	a5 01       	movw	r20, r10
    122e:	94 01       	movw	r18, r8
    1230:	c5 01       	movw	r24, r10
    1232:	b4 01       	movw	r22, r8
    1234:	03 d7       	rcall	.+3590   	; 0x203c <__mulsf3>
    1236:	69 83       	std	Y+1, r22	; 0x01
    1238:	7a 83       	std	Y+2, r23	; 0x02
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	a7 01       	movw	r20, r14
    1240:	96 01       	movw	r18, r12
    1242:	c7 01       	movw	r24, r14
    1244:	b6 01       	movw	r22, r12
    1246:	fa d6       	rcall	.+3572   	; 0x203c <__mulsf3>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	69 81       	ldd	r22, Y+1	; 0x01
    124e:	7a 81       	ldd	r23, Y+2	; 0x02
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	68 d5       	rcall	.+2768   	; 0x1d26 <__addsf3>
    1256:	69 83       	std	Y+1, r22	; 0x01
    1258:	7a 83       	std	Y+2, r23	; 0x02
    125a:	8b 83       	std	Y+3, r24	; 0x03
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	2d 81       	ldd	r18, Y+5	; 0x05
    1260:	3e 81       	ldd	r19, Y+6	; 0x06
    1262:	4f 81       	ldd	r20, Y+7	; 0x07
    1264:	58 85       	ldd	r21, Y+8	; 0x08
    1266:	ca 01       	movw	r24, r20
    1268:	b9 01       	movw	r22, r18
    126a:	e8 d6       	rcall	.+3536   	; 0x203c <__mulsf3>
    126c:	9b 01       	movw	r18, r22
    126e:	ac 01       	movw	r20, r24
    1270:	69 81       	ldd	r22, Y+1	; 0x01
    1272:	7a 81       	ldd	r23, Y+2	; 0x02
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	56 d5       	rcall	.+2732   	; 0x1d26 <__addsf3>
    127a:	69 83       	std	Y+1, r22	; 0x01
    127c:	7a 83       	std	Y+2, r23	; 0x02
    127e:	8b 83       	std	Y+3, r24	; 0x03
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	a5 01       	movw	r20, r10
    1284:	94 01       	movw	r18, r8
    1286:	c5 01       	movw	r24, r10
    1288:	b4 01       	movw	r22, r8
    128a:	d8 d6       	rcall	.+3504   	; 0x203c <__mulsf3>
    128c:	4b 01       	movw	r8, r22
    128e:	5c 01       	movw	r10, r24
    1290:	a7 01       	movw	r20, r14
    1292:	96 01       	movw	r18, r12
    1294:	c7 01       	movw	r24, r14
    1296:	b6 01       	movw	r22, r12
    1298:	d1 d6       	rcall	.+3490   	; 0x203c <__mulsf3>
    129a:	9b 01       	movw	r18, r22
    129c:	ac 01       	movw	r20, r24
    129e:	c5 01       	movw	r24, r10
    12a0:	b4 01       	movw	r22, r8
    12a2:	41 d5       	rcall	.+2690   	; 0x1d26 <__addsf3>
    12a4:	6b 01       	movw	r12, r22
    12a6:	7c 01       	movw	r14, r24
    12a8:	2d 81       	ldd	r18, Y+5	; 0x05
    12aa:	3e 81       	ldd	r19, Y+6	; 0x06
    12ac:	4f 81       	ldd	r20, Y+7	; 0x07
    12ae:	58 85       	ldd	r21, Y+8	; 0x08
    12b0:	ca 01       	movw	r24, r20
    12b2:	b9 01       	movw	r22, r18
    12b4:	c3 d6       	rcall	.+3462   	; 0x203c <__mulsf3>
    12b6:	9b 01       	movw	r18, r22
    12b8:	ac 01       	movw	r20, r24
    12ba:	c7 01       	movw	r24, r14
    12bc:	b6 01       	movw	r22, r12
    12be:	33 d5       	rcall	.+2662   	; 0x1d26 <__addsf3>
    12c0:	6b 01       	movw	r12, r22
    12c2:	7c 01       	movw	r14, r24
    12c4:	a3 01       	movw	r20, r6
    12c6:	92 01       	movw	r18, r4
    12c8:	c3 01       	movw	r24, r6
    12ca:	b2 01       	movw	r22, r4
    12cc:	b7 d6       	rcall	.+3438   	; 0x203c <__mulsf3>
    12ce:	9b 01       	movw	r18, r22
    12d0:	ac 01       	movw	r20, r24
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	27 d5       	rcall	.+2638   	; 0x1d26 <__addsf3>
    12d8:	18 d7       	rcall	.+3632   	; 0x210a <sqrt>
    12da:	28 96       	adiw	r28, 0x08	; 8
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	bf 90       	pop	r11
    12f4:	af 90       	pop	r10
    12f6:	9f 90       	pop	r9
    12f8:	8f 90       	pop	r8
    12fa:	7f 90       	pop	r7
    12fc:	6f 90       	pop	r6
    12fe:	5f 90       	pop	r5
    1300:	4f 90       	pop	r4
    1302:	08 95       	ret

00001304 <Quaternion_normalize>:
    1304:	4f 92       	push	r4
    1306:	5f 92       	push	r5
    1308:	6f 92       	push	r6
    130a:	7f 92       	push	r7
    130c:	8f 92       	push	r8
    130e:	9f 92       	push	r9
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	00 d0       	rcall	.+0      	; 0x1326 <Quaternion_normalize+0x22>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <Quaternion_normalize+0x24>
    1328:	00 d0       	rcall	.+0      	; 0x132a <Quaternion_normalize+0x26>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	8c 01       	movw	r16, r24
    1330:	7e 83       	std	Y+6, r23	; 0x06
    1332:	6d 83       	std	Y+5, r22	; 0x05
    1334:	67 2b       	or	r22, r23
    1336:	09 f4       	brne	.+2      	; 0x133a <Quaternion_normalize+0x36>
    1338:	62 d7       	rcall	.+3780   	; 0x21fe <abort>
    133a:	4a df       	rcall	.-364    	; 0x11d0 <Quaternion_norm>
    133c:	69 83       	std	Y+1, r22	; 0x01
    133e:	7a 83       	std	Y+2, r23	; 0x02
    1340:	8b 83       	std	Y+3, r24	; 0x03
    1342:	9c 83       	std	Y+4, r25	; 0x04
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	f8 01       	movw	r30, r16
    134a:	64 85       	ldd	r22, Z+12	; 0x0c
    134c:	75 85       	ldd	r23, Z+13	; 0x0d
    134e:	86 85       	ldd	r24, Z+14	; 0x0e
    1350:	97 85       	ldd	r25, Z+15	; 0x0f
    1352:	4d d5       	rcall	.+2714   	; 0x1dee <__divsf3>
    1354:	6b 01       	movw	r12, r22
    1356:	7c 01       	movw	r14, r24
    1358:	29 81       	ldd	r18, Y+1	; 0x01
    135a:	3a 81       	ldd	r19, Y+2	; 0x02
    135c:	4b 81       	ldd	r20, Y+3	; 0x03
    135e:	5c 81       	ldd	r21, Y+4	; 0x04
    1360:	f8 01       	movw	r30, r16
    1362:	60 85       	ldd	r22, Z+8	; 0x08
    1364:	71 85       	ldd	r23, Z+9	; 0x09
    1366:	82 85       	ldd	r24, Z+10	; 0x0a
    1368:	93 85       	ldd	r25, Z+11	; 0x0b
    136a:	41 d5       	rcall	.+2690   	; 0x1dee <__divsf3>
    136c:	4b 01       	movw	r8, r22
    136e:	5c 01       	movw	r10, r24
    1370:	29 81       	ldd	r18, Y+1	; 0x01
    1372:	3a 81       	ldd	r19, Y+2	; 0x02
    1374:	4b 81       	ldd	r20, Y+3	; 0x03
    1376:	5c 81       	ldd	r21, Y+4	; 0x04
    1378:	f8 01       	movw	r30, r16
    137a:	64 81       	ldd	r22, Z+4	; 0x04
    137c:	75 81       	ldd	r23, Z+5	; 0x05
    137e:	86 81       	ldd	r24, Z+6	; 0x06
    1380:	97 81       	ldd	r25, Z+7	; 0x07
    1382:	35 d5       	rcall	.+2666   	; 0x1dee <__divsf3>
    1384:	2b 01       	movw	r4, r22
    1386:	3c 01       	movw	r6, r24
    1388:	29 81       	ldd	r18, Y+1	; 0x01
    138a:	3a 81       	ldd	r19, Y+2	; 0x02
    138c:	4b 81       	ldd	r20, Y+3	; 0x03
    138e:	5c 81       	ldd	r21, Y+4	; 0x04
    1390:	f8 01       	movw	r30, r16
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	29 d5       	rcall	.+2642   	; 0x1dee <__divsf3>
    139c:	ed 81       	ldd	r30, Y+5	; 0x05
    139e:	fe 81       	ldd	r31, Y+6	; 0x06
    13a0:	60 83       	st	Z, r22
    13a2:	71 83       	std	Z+1, r23	; 0x01
    13a4:	82 83       	std	Z+2, r24	; 0x02
    13a6:	93 83       	std	Z+3, r25	; 0x03
    13a8:	44 82       	std	Z+4, r4	; 0x04
    13aa:	55 82       	std	Z+5, r5	; 0x05
    13ac:	66 82       	std	Z+6, r6	; 0x06
    13ae:	77 82       	std	Z+7, r7	; 0x07
    13b0:	80 86       	std	Z+8, r8	; 0x08
    13b2:	91 86       	std	Z+9, r9	; 0x09
    13b4:	a2 86       	std	Z+10, r10	; 0x0a
    13b6:	b3 86       	std	Z+11, r11	; 0x0b
    13b8:	c4 86       	std	Z+12, r12	; 0x0c
    13ba:	d5 86       	std	Z+13, r13	; 0x0d
    13bc:	e6 86       	std	Z+14, r14	; 0x0e
    13be:	f7 86       	std	Z+15, r15	; 0x0f
    13c0:	26 96       	adiw	r28, 0x06	; 6
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	bf 90       	pop	r11
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	7f 90       	pop	r7
    13e6:	6f 90       	pop	r6
    13e8:	5f 90       	pop	r5
    13ea:	4f 90       	pop	r4
    13ec:	08 95       	ret

000013ee <Quaternion_multiply>:
    13ee:	4f 92       	push	r4
    13f0:	5f 92       	push	r5
    13f2:	6f 92       	push	r6
    13f4:	7f 92       	push	r7
    13f6:	8f 92       	push	r8
    13f8:	9f 92       	push	r9
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	6a 97       	sbiw	r28, 0x1a	; 26
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	dc 01       	movw	r26, r24
    141c:	fb 01       	movw	r30, r22
    141e:	5a 8f       	std	Y+26, r21	; 0x1a
    1420:	49 8f       	std	Y+25, r20	; 0x19
    1422:	45 2b       	or	r20, r21
    1424:	09 f4       	brne	.+2      	; 0x1428 <Quaternion_multiply+0x3a>
    1426:	eb d6       	rcall	.+3542   	; 0x21fe <abort>
    1428:	cd 90       	ld	r12, X+
    142a:	dd 90       	ld	r13, X+
    142c:	ed 90       	ld	r14, X+
    142e:	fc 90       	ld	r15, X
    1430:	13 97       	sbiw	r26, 0x03	; 3
    1432:	20 81       	ld	r18, Z
    1434:	31 81       	ldd	r19, Z+1	; 0x01
    1436:	42 81       	ldd	r20, Z+2	; 0x02
    1438:	53 81       	ldd	r21, Z+3	; 0x03
    143a:	29 83       	std	Y+1, r18	; 0x01
    143c:	3a 83       	std	Y+2, r19	; 0x02
    143e:	4b 83       	std	Y+3, r20	; 0x03
    1440:	5c 83       	std	Y+4, r21	; 0x04
    1442:	14 96       	adiw	r26, 0x04	; 4
    1444:	2d 91       	ld	r18, X+
    1446:	3d 91       	ld	r19, X+
    1448:	4d 91       	ld	r20, X+
    144a:	5c 91       	ld	r21, X
    144c:	17 97       	sbiw	r26, 0x07	; 7
    144e:	2d 83       	std	Y+5, r18	; 0x05
    1450:	3e 83       	std	Y+6, r19	; 0x06
    1452:	4f 83       	std	Y+7, r20	; 0x07
    1454:	58 87       	std	Y+8, r21	; 0x08
    1456:	24 81       	ldd	r18, Z+4	; 0x04
    1458:	35 81       	ldd	r19, Z+5	; 0x05
    145a:	46 81       	ldd	r20, Z+6	; 0x06
    145c:	57 81       	ldd	r21, Z+7	; 0x07
    145e:	29 87       	std	Y+9, r18	; 0x09
    1460:	3a 87       	std	Y+10, r19	; 0x0a
    1462:	4b 87       	std	Y+11, r20	; 0x0b
    1464:	5c 87       	std	Y+12, r21	; 0x0c
    1466:	18 96       	adiw	r26, 0x08	; 8
    1468:	2d 91       	ld	r18, X+
    146a:	3d 91       	ld	r19, X+
    146c:	4d 91       	ld	r20, X+
    146e:	5c 91       	ld	r21, X
    1470:	1b 97       	sbiw	r26, 0x0b	; 11
    1472:	2d 87       	std	Y+13, r18	; 0x0d
    1474:	3e 87       	std	Y+14, r19	; 0x0e
    1476:	4f 87       	std	Y+15, r20	; 0x0f
    1478:	58 8b       	std	Y+16, r21	; 0x10
    147a:	20 85       	ldd	r18, Z+8	; 0x08
    147c:	31 85       	ldd	r19, Z+9	; 0x09
    147e:	42 85       	ldd	r20, Z+10	; 0x0a
    1480:	53 85       	ldd	r21, Z+11	; 0x0b
    1482:	29 8b       	std	Y+17, r18	; 0x11
    1484:	3a 8b       	std	Y+18, r19	; 0x12
    1486:	4b 8b       	std	Y+19, r20	; 0x13
    1488:	5c 8b       	std	Y+20, r21	; 0x14
    148a:	1c 96       	adiw	r26, 0x0c	; 12
    148c:	2d 91       	ld	r18, X+
    148e:	3d 91       	ld	r19, X+
    1490:	4d 91       	ld	r20, X+
    1492:	5c 91       	ld	r21, X
    1494:	1f 97       	sbiw	r26, 0x0f	; 15
    1496:	2d 8b       	std	Y+21, r18	; 0x15
    1498:	3e 8b       	std	Y+22, r19	; 0x16
    149a:	4f 8b       	std	Y+23, r20	; 0x17
    149c:	58 8f       	std	Y+24, r21	; 0x18
    149e:	84 84       	ldd	r8, Z+12	; 0x0c
    14a0:	95 84       	ldd	r9, Z+13	; 0x0d
    14a2:	a6 84       	ldd	r10, Z+14	; 0x0e
    14a4:	b7 84       	ldd	r11, Z+15	; 0x0f
    14a6:	29 81       	ldd	r18, Y+1	; 0x01
    14a8:	3a 81       	ldd	r19, Y+2	; 0x02
    14aa:	4b 81       	ldd	r20, Y+3	; 0x03
    14ac:	5c 81       	ldd	r21, Y+4	; 0x04
    14ae:	c7 01       	movw	r24, r14
    14b0:	b6 01       	movw	r22, r12
    14b2:	c4 d5       	rcall	.+2952   	; 0x203c <__mulsf3>
    14b4:	2b 01       	movw	r4, r22
    14b6:	3c 01       	movw	r6, r24
    14b8:	29 85       	ldd	r18, Y+9	; 0x09
    14ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    14bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    14be:	5c 85       	ldd	r21, Y+12	; 0x0c
    14c0:	6d 81       	ldd	r22, Y+5	; 0x05
    14c2:	7e 81       	ldd	r23, Y+6	; 0x06
    14c4:	8f 81       	ldd	r24, Y+7	; 0x07
    14c6:	98 85       	ldd	r25, Y+8	; 0x08
    14c8:	b9 d5       	rcall	.+2930   	; 0x203c <__mulsf3>
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	c3 01       	movw	r24, r6
    14d0:	b2 01       	movw	r22, r4
    14d2:	28 d4       	rcall	.+2128   	; 0x1d24 <__subsf3>
    14d4:	2b 01       	movw	r4, r22
    14d6:	3c 01       	movw	r6, r24
    14d8:	29 89       	ldd	r18, Y+17	; 0x11
    14da:	3a 89       	ldd	r19, Y+18	; 0x12
    14dc:	4b 89       	ldd	r20, Y+19	; 0x13
    14de:	5c 89       	ldd	r21, Y+20	; 0x14
    14e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    14e2:	7e 85       	ldd	r23, Y+14	; 0x0e
    14e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e6:	98 89       	ldd	r25, Y+16	; 0x10
    14e8:	a9 d5       	rcall	.+2898   	; 0x203c <__mulsf3>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	c3 01       	movw	r24, r6
    14f0:	b2 01       	movw	r22, r4
    14f2:	18 d4       	rcall	.+2096   	; 0x1d24 <__subsf3>
    14f4:	2b 01       	movw	r4, r22
    14f6:	3c 01       	movw	r6, r24
    14f8:	a5 01       	movw	r20, r10
    14fa:	94 01       	movw	r18, r8
    14fc:	6d 89       	ldd	r22, Y+21	; 0x15
    14fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1500:	8f 89       	ldd	r24, Y+23	; 0x17
    1502:	98 8d       	ldd	r25, Y+24	; 0x18
    1504:	9b d5       	rcall	.+2870   	; 0x203c <__mulsf3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	c3 01       	movw	r24, r6
    150c:	b2 01       	movw	r22, r4
    150e:	0a d4       	rcall	.+2068   	; 0x1d24 <__subsf3>
    1510:	e9 8d       	ldd	r30, Y+25	; 0x19
    1512:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1514:	60 83       	st	Z, r22
    1516:	71 83       	std	Z+1, r23	; 0x01
    1518:	82 83       	std	Z+2, r24	; 0x02
    151a:	93 83       	std	Z+3, r25	; 0x03
    151c:	2d 81       	ldd	r18, Y+5	; 0x05
    151e:	3e 81       	ldd	r19, Y+6	; 0x06
    1520:	4f 81       	ldd	r20, Y+7	; 0x07
    1522:	58 85       	ldd	r21, Y+8	; 0x08
    1524:	69 81       	ldd	r22, Y+1	; 0x01
    1526:	7a 81       	ldd	r23, Y+2	; 0x02
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	87 d5       	rcall	.+2830   	; 0x203c <__mulsf3>
    152e:	2b 01       	movw	r4, r22
    1530:	3c 01       	movw	r6, r24
    1532:	29 85       	ldd	r18, Y+9	; 0x09
    1534:	3a 85       	ldd	r19, Y+10	; 0x0a
    1536:	4b 85       	ldd	r20, Y+11	; 0x0b
    1538:	5c 85       	ldd	r21, Y+12	; 0x0c
    153a:	c7 01       	movw	r24, r14
    153c:	b6 01       	movw	r22, r12
    153e:	7e d5       	rcall	.+2812   	; 0x203c <__mulsf3>
    1540:	9b 01       	movw	r18, r22
    1542:	ac 01       	movw	r20, r24
    1544:	c3 01       	movw	r24, r6
    1546:	b2 01       	movw	r22, r4
    1548:	ee d3       	rcall	.+2012   	; 0x1d26 <__addsf3>
    154a:	2b 01       	movw	r4, r22
    154c:	3c 01       	movw	r6, r24
    154e:	a5 01       	movw	r20, r10
    1550:	94 01       	movw	r18, r8
    1552:	6d 85       	ldd	r22, Y+13	; 0x0d
    1554:	7e 85       	ldd	r23, Y+14	; 0x0e
    1556:	8f 85       	ldd	r24, Y+15	; 0x0f
    1558:	98 89       	ldd	r25, Y+16	; 0x10
    155a:	70 d5       	rcall	.+2784   	; 0x203c <__mulsf3>
    155c:	9b 01       	movw	r18, r22
    155e:	ac 01       	movw	r20, r24
    1560:	c3 01       	movw	r24, r6
    1562:	b2 01       	movw	r22, r4
    1564:	e0 d3       	rcall	.+1984   	; 0x1d26 <__addsf3>
    1566:	2b 01       	movw	r4, r22
    1568:	3c 01       	movw	r6, r24
    156a:	2d 89       	ldd	r18, Y+21	; 0x15
    156c:	3e 89       	ldd	r19, Y+22	; 0x16
    156e:	4f 89       	ldd	r20, Y+23	; 0x17
    1570:	58 8d       	ldd	r21, Y+24	; 0x18
    1572:	69 89       	ldd	r22, Y+17	; 0x11
    1574:	7a 89       	ldd	r23, Y+18	; 0x12
    1576:	8b 89       	ldd	r24, Y+19	; 0x13
    1578:	9c 89       	ldd	r25, Y+20	; 0x14
    157a:	60 d5       	rcall	.+2752   	; 0x203c <__mulsf3>
    157c:	9b 01       	movw	r18, r22
    157e:	ac 01       	movw	r20, r24
    1580:	c3 01       	movw	r24, r6
    1582:	b2 01       	movw	r22, r4
    1584:	cf d3       	rcall	.+1950   	; 0x1d24 <__subsf3>
    1586:	e9 8d       	ldd	r30, Y+25	; 0x19
    1588:	fa 8d       	ldd	r31, Y+26	; 0x1a
    158a:	64 83       	std	Z+4, r22	; 0x04
    158c:	75 83       	std	Z+5, r23	; 0x05
    158e:	86 83       	std	Z+6, r24	; 0x06
    1590:	97 83       	std	Z+7, r25	; 0x07
    1592:	29 89       	ldd	r18, Y+17	; 0x11
    1594:	3a 89       	ldd	r19, Y+18	; 0x12
    1596:	4b 89       	ldd	r20, Y+19	; 0x13
    1598:	5c 89       	ldd	r21, Y+20	; 0x14
    159a:	c7 01       	movw	r24, r14
    159c:	b6 01       	movw	r22, r12
    159e:	4e d5       	rcall	.+2716   	; 0x203c <__mulsf3>
    15a0:	2b 01       	movw	r4, r22
    15a2:	3c 01       	movw	r6, r24
    15a4:	a5 01       	movw	r20, r10
    15a6:	94 01       	movw	r18, r8
    15a8:	6d 81       	ldd	r22, Y+5	; 0x05
    15aa:	7e 81       	ldd	r23, Y+6	; 0x06
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	45 d5       	rcall	.+2698   	; 0x203c <__mulsf3>
    15b2:	9b 01       	movw	r18, r22
    15b4:	ac 01       	movw	r20, r24
    15b6:	c3 01       	movw	r24, r6
    15b8:	b2 01       	movw	r22, r4
    15ba:	b4 d3       	rcall	.+1896   	; 0x1d24 <__subsf3>
    15bc:	2b 01       	movw	r4, r22
    15be:	3c 01       	movw	r6, r24
    15c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    15c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    15c4:	4f 85       	ldd	r20, Y+15	; 0x0f
    15c6:	58 89       	ldd	r21, Y+16	; 0x10
    15c8:	69 81       	ldd	r22, Y+1	; 0x01
    15ca:	7a 81       	ldd	r23, Y+2	; 0x02
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	35 d5       	rcall	.+2666   	; 0x203c <__mulsf3>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	c3 01       	movw	r24, r6
    15d8:	b2 01       	movw	r22, r4
    15da:	a5 d3       	rcall	.+1866   	; 0x1d26 <__addsf3>
    15dc:	2b 01       	movw	r4, r22
    15de:	3c 01       	movw	r6, r24
    15e0:	2d 89       	ldd	r18, Y+21	; 0x15
    15e2:	3e 89       	ldd	r19, Y+22	; 0x16
    15e4:	4f 89       	ldd	r20, Y+23	; 0x17
    15e6:	58 8d       	ldd	r21, Y+24	; 0x18
    15e8:	69 85       	ldd	r22, Y+9	; 0x09
    15ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f0:	25 d5       	rcall	.+2634   	; 0x203c <__mulsf3>
    15f2:	9b 01       	movw	r18, r22
    15f4:	ac 01       	movw	r20, r24
    15f6:	c3 01       	movw	r24, r6
    15f8:	b2 01       	movw	r22, r4
    15fa:	95 d3       	rcall	.+1834   	; 0x1d26 <__addsf3>
    15fc:	e9 8d       	ldd	r30, Y+25	; 0x19
    15fe:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1600:	60 87       	std	Z+8, r22	; 0x08
    1602:	71 87       	std	Z+9, r23	; 0x09
    1604:	82 87       	std	Z+10, r24	; 0x0a
    1606:	93 87       	std	Z+11, r25	; 0x0b
    1608:	a5 01       	movw	r20, r10
    160a:	94 01       	movw	r18, r8
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	15 d5       	rcall	.+2602   	; 0x203c <__mulsf3>
    1612:	6b 01       	movw	r12, r22
    1614:	7c 01       	movw	r14, r24
    1616:	29 89       	ldd	r18, Y+17	; 0x11
    1618:	3a 89       	ldd	r19, Y+18	; 0x12
    161a:	4b 89       	ldd	r20, Y+19	; 0x13
    161c:	5c 89       	ldd	r21, Y+20	; 0x14
    161e:	6d 81       	ldd	r22, Y+5	; 0x05
    1620:	7e 81       	ldd	r23, Y+6	; 0x06
    1622:	8f 81       	ldd	r24, Y+7	; 0x07
    1624:	98 85       	ldd	r25, Y+8	; 0x08
    1626:	0a d5       	rcall	.+2580   	; 0x203c <__mulsf3>
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	c7 01       	movw	r24, r14
    162e:	b6 01       	movw	r22, r12
    1630:	7a d3       	rcall	.+1780   	; 0x1d26 <__addsf3>
    1632:	6b 01       	movw	r12, r22
    1634:	7c 01       	movw	r14, r24
    1636:	2d 85       	ldd	r18, Y+13	; 0x0d
    1638:	3e 85       	ldd	r19, Y+14	; 0x0e
    163a:	4f 85       	ldd	r20, Y+15	; 0x0f
    163c:	58 89       	ldd	r21, Y+16	; 0x10
    163e:	69 85       	ldd	r22, Y+9	; 0x09
    1640:	7a 85       	ldd	r23, Y+10	; 0x0a
    1642:	8b 85       	ldd	r24, Y+11	; 0x0b
    1644:	9c 85       	ldd	r25, Y+12	; 0x0c
    1646:	fa d4       	rcall	.+2548   	; 0x203c <__mulsf3>
    1648:	9b 01       	movw	r18, r22
    164a:	ac 01       	movw	r20, r24
    164c:	c7 01       	movw	r24, r14
    164e:	b6 01       	movw	r22, r12
    1650:	69 d3       	rcall	.+1746   	; 0x1d24 <__subsf3>
    1652:	6b 01       	movw	r12, r22
    1654:	7c 01       	movw	r14, r24
    1656:	2d 89       	ldd	r18, Y+21	; 0x15
    1658:	3e 89       	ldd	r19, Y+22	; 0x16
    165a:	4f 89       	ldd	r20, Y+23	; 0x17
    165c:	58 8d       	ldd	r21, Y+24	; 0x18
    165e:	69 81       	ldd	r22, Y+1	; 0x01
    1660:	7a 81       	ldd	r23, Y+2	; 0x02
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	ea d4       	rcall	.+2516   	; 0x203c <__mulsf3>
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
    166c:	c7 01       	movw	r24, r14
    166e:	b6 01       	movw	r22, r12
    1670:	5a d3       	rcall	.+1716   	; 0x1d26 <__addsf3>
    1672:	e9 8d       	ldd	r30, Y+25	; 0x19
    1674:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1676:	64 87       	std	Z+12, r22	; 0x0c
    1678:	75 87       	std	Z+13, r23	; 0x0d
    167a:	86 87       	std	Z+14, r24	; 0x0e
    167c:	97 87       	std	Z+15, r25	; 0x0f
    167e:	6a 96       	adiw	r28, 0x1a	; 26
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	df 90       	pop	r13
    1694:	cf 90       	pop	r12
    1696:	bf 90       	pop	r11
    1698:	af 90       	pop	r10
    169a:	9f 90       	pop	r9
    169c:	8f 90       	pop	r8
    169e:	7f 90       	pop	r7
    16a0:	6f 90       	pop	r6
    16a2:	5f 90       	pop	r5
    16a4:	4f 90       	pop	r4
    16a6:	08 95       	ret

000016a8 <Quaternion_rotate>:
    16a8:	2f 92       	push	r2
    16aa:	3f 92       	push	r3
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	6f 92       	push	r6
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	e0 97       	sbiw	r28, 0x30	; 48
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	8b 01       	movw	r16, r22
    16e2:	1a 01       	movw	r2, r20
    16e4:	45 2b       	or	r20, r21
    16e6:	09 f4       	brne	.+2      	; 0x16ea <Quaternion_rotate+0x42>
    16e8:	8a d5       	rcall	.+2836   	; 0x21fe <abort>
    16ea:	a9 81       	ldd	r26, Y+1	; 0x01
    16ec:	ba 81       	ldd	r27, Y+2	; 0x02
    16ee:	cd 90       	ld	r12, X+
    16f0:	dd 90       	ld	r13, X+
    16f2:	ed 90       	ld	r14, X+
    16f4:	fc 90       	ld	r15, X
    16f6:	a7 01       	movw	r20, r14
    16f8:	96 01       	movw	r18, r12
    16fa:	c7 01       	movw	r24, r14
    16fc:	b6 01       	movw	r22, r12
    16fe:	9e d4       	rcall	.+2364   	; 0x203c <__mulsf3>
    1700:	69 8b       	std	Y+17, r22	; 0x11
    1702:	7a 8b       	std	Y+18, r23	; 0x12
    1704:	8b 8b       	std	Y+19, r24	; 0x13
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	a9 81       	ldd	r26, Y+1	; 0x01
    170a:	ba 81       	ldd	r27, Y+2	; 0x02
    170c:	14 96       	adiw	r26, 0x04	; 4
    170e:	8d 91       	ld	r24, X+
    1710:	9d 91       	ld	r25, X+
    1712:	0d 90       	ld	r0, X+
    1714:	bc 91       	ld	r27, X
    1716:	a0 2d       	mov	r26, r0
    1718:	8d 87       	std	Y+13, r24	; 0x0d
    171a:	9e 87       	std	Y+14, r25	; 0x0e
    171c:	af 87       	std	Y+15, r26	; 0x0f
    171e:	b8 8b       	std	Y+16, r27	; 0x10
    1720:	9c 01       	movw	r18, r24
    1722:	ad 01       	movw	r20, r26
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	89 d4       	rcall	.+2322   	; 0x203c <__mulsf3>
    172a:	6d 8b       	std	Y+21, r22	; 0x15
    172c:	7e 8b       	std	Y+22, r23	; 0x16
    172e:	8f 8b       	std	Y+23, r24	; 0x17
    1730:	98 8f       	std	Y+24, r25	; 0x18
    1732:	e9 81       	ldd	r30, Y+1	; 0x01
    1734:	fa 81       	ldd	r31, Y+2	; 0x02
    1736:	80 84       	ldd	r8, Z+8	; 0x08
    1738:	91 84       	ldd	r9, Z+9	; 0x09
    173a:	a2 84       	ldd	r10, Z+10	; 0x0a
    173c:	b3 84       	ldd	r11, Z+11	; 0x0b
    173e:	a5 01       	movw	r20, r10
    1740:	94 01       	movw	r18, r8
    1742:	c5 01       	movw	r24, r10
    1744:	b4 01       	movw	r22, r8
    1746:	7a d4       	rcall	.+2292   	; 0x203c <__mulsf3>
    1748:	69 8f       	std	Y+25, r22	; 0x19
    174a:	7a 8f       	std	Y+26, r23	; 0x1a
    174c:	8b 8f       	std	Y+27, r24	; 0x1b
    174e:	9c 8f       	std	Y+28, r25	; 0x1c
    1750:	a9 81       	ldd	r26, Y+1	; 0x01
    1752:	ba 81       	ldd	r27, Y+2	; 0x02
    1754:	1c 96       	adiw	r26, 0x0c	; 12
    1756:	4d 90       	ld	r4, X+
    1758:	5d 90       	ld	r5, X+
    175a:	6d 90       	ld	r6, X+
    175c:	7c 90       	ld	r7, X
    175e:	1f 97       	sbiw	r26, 0x0f	; 15
    1760:	a3 01       	movw	r20, r6
    1762:	92 01       	movw	r18, r4
    1764:	c3 01       	movw	r24, r6
    1766:	b2 01       	movw	r22, r4
    1768:	69 d4       	rcall	.+2258   	; 0x203c <__mulsf3>
    176a:	6d 8f       	std	Y+29, r22	; 0x1d
    176c:	7e 8f       	std	Y+30, r23	; 0x1e
    176e:	8f 8f       	std	Y+31, r24	; 0x1f
    1770:	98 a3       	std	Y+32, r25	; 0x20
    1772:	d8 01       	movw	r26, r16
    1774:	8d 91       	ld	r24, X+
    1776:	9d 91       	ld	r25, X+
    1778:	0d 90       	ld	r0, X+
    177a:	bc 91       	ld	r27, X
    177c:	a0 2d       	mov	r26, r0
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	ab 83       	std	Y+3, r26	; 0x03
    1784:	bc 83       	std	Y+4, r27	; 0x04
    1786:	a5 01       	movw	r20, r10
    1788:	94 01       	movw	r18, r8
    178a:	c7 01       	movw	r24, r14
    178c:	b6 01       	movw	r22, r12
    178e:	56 d4       	rcall	.+2220   	; 0x203c <__mulsf3>
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	c8 d2       	rcall	.+1424   	; 0x1d26 <__addsf3>
    1796:	69 a3       	std	Y+33, r22	; 0x21
    1798:	7a a3       	std	Y+34, r23	; 0x22
    179a:	8b a3       	std	Y+35, r24	; 0x23
    179c:	9c a3       	std	Y+36, r25	; 0x24
    179e:	d8 01       	movw	r26, r16
    17a0:	18 96       	adiw	r26, 0x08	; 8
    17a2:	8d 91       	ld	r24, X+
    17a4:	9d 91       	ld	r25, X+
    17a6:	0d 90       	ld	r0, X+
    17a8:	bc 91       	ld	r27, X
    17aa:	a0 2d       	mov	r26, r0
    17ac:	8d 83       	std	Y+5, r24	; 0x05
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	af 83       	std	Y+7, r26	; 0x07
    17b2:	b8 87       	std	Y+8, r27	; 0x08
    17b4:	a3 01       	movw	r20, r6
    17b6:	92 01       	movw	r18, r4
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	3f d4       	rcall	.+2174   	; 0x203c <__mulsf3>
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
    17c2:	b1 d2       	rcall	.+1378   	; 0x1d26 <__addsf3>
    17c4:	6d a3       	std	Y+37, r22	; 0x25
    17c6:	7e a3       	std	Y+38, r23	; 0x26
    17c8:	8f a3       	std	Y+39, r24	; 0x27
    17ca:	98 a7       	std	Y+40, r25	; 0x28
    17cc:	d8 01       	movw	r26, r16
    17ce:	14 96       	adiw	r26, 0x04	; 4
    17d0:	8d 91       	ld	r24, X+
    17d2:	9d 91       	ld	r25, X+
    17d4:	0d 90       	ld	r0, X+
    17d6:	bc 91       	ld	r27, X
    17d8:	a0 2d       	mov	r26, r0
    17da:	89 87       	std	Y+9, r24	; 0x09
    17dc:	9a 87       	std	Y+10, r25	; 0x0a
    17de:	ab 87       	std	Y+11, r26	; 0x0b
    17e0:	bc 87       	std	Y+12, r27	; 0x0c
    17e2:	a5 01       	movw	r20, r10
    17e4:	94 01       	movw	r18, r8
    17e6:	6d 85       	ldd	r22, Y+13	; 0x0d
    17e8:	7e 85       	ldd	r23, Y+14	; 0x0e
    17ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ec:	98 89       	ldd	r25, Y+16	; 0x10
    17ee:	26 d4       	rcall	.+2124   	; 0x203c <__mulsf3>
    17f0:	9b 01       	movw	r18, r22
    17f2:	ac 01       	movw	r20, r24
    17f4:	98 d2       	rcall	.+1328   	; 0x1d26 <__addsf3>
    17f6:	69 a7       	std	Y+41, r22	; 0x29
    17f8:	7a a7       	std	Y+42, r23	; 0x2a
    17fa:	8b a7       	std	Y+43, r24	; 0x2b
    17fc:	9c a7       	std	Y+44, r25	; 0x2c
    17fe:	a3 01       	movw	r20, r6
    1800:	92 01       	movw	r18, r4
    1802:	6d 85       	ldd	r22, Y+13	; 0x0d
    1804:	7e 85       	ldd	r23, Y+14	; 0x0e
    1806:	8f 85       	ldd	r24, Y+15	; 0x0f
    1808:	98 89       	ldd	r25, Y+16	; 0x10
    180a:	18 d4       	rcall	.+2096   	; 0x203c <__mulsf3>
    180c:	9b 01       	movw	r18, r22
    180e:	ac 01       	movw	r20, r24
    1810:	8a d2       	rcall	.+1300   	; 0x1d26 <__addsf3>
    1812:	6d a7       	std	Y+45, r22	; 0x2d
    1814:	7e a7       	std	Y+46, r23	; 0x2e
    1816:	8f a7       	std	Y+47, r24	; 0x2f
    1818:	98 ab       	std	Y+48, r25	; 0x30
    181a:	a3 01       	movw	r20, r6
    181c:	92 01       	movw	r18, r4
    181e:	c5 01       	movw	r24, r10
    1820:	b4 01       	movw	r22, r8
    1822:	0c d4       	rcall	.+2072   	; 0x203c <__mulsf3>
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	7e d2       	rcall	.+1276   	; 0x1d26 <__addsf3>
    182a:	4b 01       	movw	r8, r22
    182c:	5c 01       	movw	r10, r24
    182e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1830:	3e 85       	ldd	r19, Y+14	; 0x0e
    1832:	4f 85       	ldd	r20, Y+15	; 0x0f
    1834:	58 89       	ldd	r21, Y+16	; 0x10
    1836:	c7 01       	movw	r24, r14
    1838:	b6 01       	movw	r22, r12
    183a:	00 d4       	rcall	.+2048   	; 0x203c <__mulsf3>
    183c:	9b 01       	movw	r18, r22
    183e:	ac 01       	movw	r20, r24
    1840:	72 d2       	rcall	.+1252   	; 0x1d26 <__addsf3>
    1842:	2b 01       	movw	r4, r22
    1844:	3c 01       	movw	r6, r24
    1846:	29 81       	ldd	r18, Y+1	; 0x01
    1848:	3a 81       	ldd	r19, Y+2	; 0x02
    184a:	4b 81       	ldd	r20, Y+3	; 0x03
    184c:	5c 81       	ldd	r21, Y+4	; 0x04
    184e:	69 89       	ldd	r22, Y+17	; 0x11
    1850:	7a 89       	ldd	r23, Y+18	; 0x12
    1852:	8b 89       	ldd	r24, Y+19	; 0x13
    1854:	9c 89       	ldd	r25, Y+20	; 0x14
    1856:	f2 d3       	rcall	.+2020   	; 0x203c <__mulsf3>
    1858:	6b 01       	movw	r12, r22
    185a:	7c 01       	movw	r14, r24
    185c:	2d 81       	ldd	r18, Y+5	; 0x05
    185e:	3e 81       	ldd	r19, Y+6	; 0x06
    1860:	4f 81       	ldd	r20, Y+7	; 0x07
    1862:	58 85       	ldd	r21, Y+8	; 0x08
    1864:	69 a1       	ldd	r22, Y+33	; 0x21
    1866:	7a a1       	ldd	r23, Y+34	; 0x22
    1868:	8b a1       	ldd	r24, Y+35	; 0x23
    186a:	9c a1       	ldd	r25, Y+36	; 0x24
    186c:	e7 d3       	rcall	.+1998   	; 0x203c <__mulsf3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	c7 01       	movw	r24, r14
    1874:	b6 01       	movw	r22, r12
    1876:	57 d2       	rcall	.+1198   	; 0x1d26 <__addsf3>
    1878:	6b 01       	movw	r12, r22
    187a:	7c 01       	movw	r14, r24
    187c:	29 85       	ldd	r18, Y+9	; 0x09
    187e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1880:	4b 85       	ldd	r20, Y+11	; 0x0b
    1882:	5c 85       	ldd	r21, Y+12	; 0x0c
    1884:	6d a1       	ldd	r22, Y+37	; 0x25
    1886:	7e a1       	ldd	r23, Y+38	; 0x26
    1888:	8f a1       	ldd	r24, Y+39	; 0x27
    188a:	98 a5       	ldd	r25, Y+40	; 0x28
    188c:	d7 d3       	rcall	.+1966   	; 0x203c <__mulsf3>
    188e:	9b 01       	movw	r18, r22
    1890:	ac 01       	movw	r20, r24
    1892:	c7 01       	movw	r24, r14
    1894:	b6 01       	movw	r22, r12
    1896:	46 d2       	rcall	.+1164   	; 0x1d24 <__subsf3>
    1898:	6b 01       	movw	r12, r22
    189a:	7c 01       	movw	r14, r24
    189c:	29 81       	ldd	r18, Y+1	; 0x01
    189e:	3a 81       	ldd	r19, Y+2	; 0x02
    18a0:	4b 81       	ldd	r20, Y+3	; 0x03
    18a2:	5c 81       	ldd	r21, Y+4	; 0x04
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	c7 d3       	rcall	.+1934   	; 0x203c <__mulsf3>
    18ae:	9b 01       	movw	r18, r22
    18b0:	ac 01       	movw	r20, r24
    18b2:	c7 01       	movw	r24, r14
    18b4:	b6 01       	movw	r22, r12
    18b6:	37 d2       	rcall	.+1134   	; 0x1d26 <__addsf3>
    18b8:	6b 01       	movw	r12, r22
    18ba:	7c 01       	movw	r14, r24
    18bc:	29 a5       	ldd	r18, Y+41	; 0x29
    18be:	3a a5       	ldd	r19, Y+42	; 0x2a
    18c0:	4b a5       	ldd	r20, Y+43	; 0x2b
    18c2:	5c a5       	ldd	r21, Y+44	; 0x2c
    18c4:	69 85       	ldd	r22, Y+9	; 0x09
    18c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    18c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    18ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    18cc:	b7 d3       	rcall	.+1902   	; 0x203c <__mulsf3>
    18ce:	9b 01       	movw	r18, r22
    18d0:	ac 01       	movw	r20, r24
    18d2:	c7 01       	movw	r24, r14
    18d4:	b6 01       	movw	r22, r12
    18d6:	27 d2       	rcall	.+1102   	; 0x1d26 <__addsf3>
    18d8:	6b 01       	movw	r12, r22
    18da:	7c 01       	movw	r14, r24
    18dc:	2d a5       	ldd	r18, Y+45	; 0x2d
    18de:	3e a5       	ldd	r19, Y+46	; 0x2e
    18e0:	4f a5       	ldd	r20, Y+47	; 0x2f
    18e2:	58 a9       	ldd	r21, Y+48	; 0x30
    18e4:	6d 81       	ldd	r22, Y+5	; 0x05
    18e6:	7e 81       	ldd	r23, Y+6	; 0x06
    18e8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ea:	98 85       	ldd	r25, Y+8	; 0x08
    18ec:	a7 d3       	rcall	.+1870   	; 0x203c <__mulsf3>
    18ee:	9b 01       	movw	r18, r22
    18f0:	ac 01       	movw	r20, r24
    18f2:	c7 01       	movw	r24, r14
    18f4:	b6 01       	movw	r22, r12
    18f6:	17 d2       	rcall	.+1070   	; 0x1d26 <__addsf3>
    18f8:	6b 01       	movw	r12, r22
    18fa:	7c 01       	movw	r14, r24
    18fc:	29 81       	ldd	r18, Y+1	; 0x01
    18fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1900:	4b 81       	ldd	r20, Y+3	; 0x03
    1902:	5c 81       	ldd	r21, Y+4	; 0x04
    1904:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1906:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1908:	8f 8d       	ldd	r24, Y+31	; 0x1f
    190a:	98 a1       	ldd	r25, Y+32	; 0x20
    190c:	97 d3       	rcall	.+1838   	; 0x203c <__mulsf3>
    190e:	9b 01       	movw	r18, r22
    1910:	ac 01       	movw	r20, r24
    1912:	c7 01       	movw	r24, r14
    1914:	b6 01       	movw	r22, r12
    1916:	06 d2       	rcall	.+1036   	; 0x1d24 <__subsf3>
    1918:	6b 01       	movw	r12, r22
    191a:	7c 01       	movw	r14, r24
    191c:	29 81       	ldd	r18, Y+1	; 0x01
    191e:	3a 81       	ldd	r19, Y+2	; 0x02
    1920:	4b 81       	ldd	r20, Y+3	; 0x03
    1922:	5c 81       	ldd	r21, Y+4	; 0x04
    1924:	69 8d       	ldd	r22, Y+25	; 0x19
    1926:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1928:	8b 8d       	ldd	r24, Y+27	; 0x1b
    192a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192c:	87 d3       	rcall	.+1806   	; 0x203c <__mulsf3>
    192e:	9b 01       	movw	r18, r22
    1930:	ac 01       	movw	r20, r24
    1932:	c7 01       	movw	r24, r14
    1934:	b6 01       	movw	r22, r12
    1936:	f6 d1       	rcall	.+1004   	; 0x1d24 <__subsf3>
    1938:	f1 01       	movw	r30, r2
    193a:	60 83       	st	Z, r22
    193c:	71 83       	std	Z+1, r23	; 0x01
    193e:	82 83       	std	Z+2, r24	; 0x02
    1940:	93 83       	std	Z+3, r25	; 0x03
    1942:	29 a5       	ldd	r18, Y+41	; 0x29
    1944:	3a a5       	ldd	r19, Y+42	; 0x2a
    1946:	4b a5       	ldd	r20, Y+43	; 0x2b
    1948:	5c a5       	ldd	r21, Y+44	; 0x2c
    194a:	69 81       	ldd	r22, Y+1	; 0x01
    194c:	7a 81       	ldd	r23, Y+2	; 0x02
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	74 d3       	rcall	.+1768   	; 0x203c <__mulsf3>
    1954:	6b 01       	movw	r12, r22
    1956:	7c 01       	movw	r14, r24
    1958:	29 85       	ldd	r18, Y+9	; 0x09
    195a:	3a 85       	ldd	r19, Y+10	; 0x0a
    195c:	4b 85       	ldd	r20, Y+11	; 0x0b
    195e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1960:	69 8d       	ldd	r22, Y+25	; 0x19
    1962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1968:	69 d3       	rcall	.+1746   	; 0x203c <__mulsf3>
    196a:	9b 01       	movw	r18, r22
    196c:	ac 01       	movw	r20, r24
    196e:	c7 01       	movw	r24, r14
    1970:	b6 01       	movw	r22, r12
    1972:	d9 d1       	rcall	.+946    	; 0x1d26 <__addsf3>
    1974:	6b 01       	movw	r12, r22
    1976:	7c 01       	movw	r14, r24
    1978:	a5 01       	movw	r20, r10
    197a:	94 01       	movw	r18, r8
    197c:	6d 81       	ldd	r22, Y+5	; 0x05
    197e:	7e 81       	ldd	r23, Y+6	; 0x06
    1980:	8f 81       	ldd	r24, Y+7	; 0x07
    1982:	98 85       	ldd	r25, Y+8	; 0x08
    1984:	5b d3       	rcall	.+1718   	; 0x203c <__mulsf3>
    1986:	9b 01       	movw	r18, r22
    1988:	ac 01       	movw	r20, r24
    198a:	c7 01       	movw	r24, r14
    198c:	b6 01       	movw	r22, r12
    198e:	cb d1       	rcall	.+918    	; 0x1d26 <__addsf3>
    1990:	6b 01       	movw	r12, r22
    1992:	7c 01       	movw	r14, r24
    1994:	2d a1       	ldd	r18, Y+37	; 0x25
    1996:	3e a1       	ldd	r19, Y+38	; 0x26
    1998:	4f a1       	ldd	r20, Y+39	; 0x27
    199a:	58 a5       	ldd	r21, Y+40	; 0x28
    199c:	69 81       	ldd	r22, Y+1	; 0x01
    199e:	7a 81       	ldd	r23, Y+2	; 0x02
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	4b d3       	rcall	.+1686   	; 0x203c <__mulsf3>
    19a6:	9b 01       	movw	r18, r22
    19a8:	ac 01       	movw	r20, r24
    19aa:	c7 01       	movw	r24, r14
    19ac:	b6 01       	movw	r22, r12
    19ae:	bb d1       	rcall	.+886    	; 0x1d26 <__addsf3>
    19b0:	6b 01       	movw	r12, r22
    19b2:	7c 01       	movw	r14, r24
    19b4:	29 85       	ldd	r18, Y+9	; 0x09
    19b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    19b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    19ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    19bc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19be:	7e 8d       	ldd	r23, Y+30	; 0x1e
    19c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19c2:	98 a1       	ldd	r25, Y+32	; 0x20
    19c4:	3b d3       	rcall	.+1654   	; 0x203c <__mulsf3>
    19c6:	9b 01       	movw	r18, r22
    19c8:	ac 01       	movw	r20, r24
    19ca:	c7 01       	movw	r24, r14
    19cc:	b6 01       	movw	r22, r12
    19ce:	aa d1       	rcall	.+852    	; 0x1d24 <__subsf3>
    19d0:	6b 01       	movw	r12, r22
    19d2:	7c 01       	movw	r14, r24
    19d4:	29 85       	ldd	r18, Y+9	; 0x09
    19d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    19d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    19da:	5c 85       	ldd	r21, Y+12	; 0x0c
    19dc:	69 89       	ldd	r22, Y+17	; 0x11
    19de:	7a 89       	ldd	r23, Y+18	; 0x12
    19e0:	8b 89       	ldd	r24, Y+19	; 0x13
    19e2:	9c 89       	ldd	r25, Y+20	; 0x14
    19e4:	2b d3       	rcall	.+1622   	; 0x203c <__mulsf3>
    19e6:	9b 01       	movw	r18, r22
    19e8:	ac 01       	movw	r20, r24
    19ea:	c7 01       	movw	r24, r14
    19ec:	b6 01       	movw	r22, r12
    19ee:	9b d1       	rcall	.+822    	; 0x1d26 <__addsf3>
    19f0:	6b 01       	movw	r12, r22
    19f2:	7c 01       	movw	r14, r24
    19f4:	a3 01       	movw	r20, r6
    19f6:	92 01       	movw	r18, r4
    19f8:	6d 81       	ldd	r22, Y+5	; 0x05
    19fa:	7e 81       	ldd	r23, Y+6	; 0x06
    19fc:	8f 81       	ldd	r24, Y+7	; 0x07
    19fe:	98 85       	ldd	r25, Y+8	; 0x08
    1a00:	1d d3       	rcall	.+1594   	; 0x203c <__mulsf3>
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	c7 01       	movw	r24, r14
    1a08:	b6 01       	movw	r22, r12
    1a0a:	8c d1       	rcall	.+792    	; 0x1d24 <__subsf3>
    1a0c:	6b 01       	movw	r12, r22
    1a0e:	7c 01       	movw	r14, r24
    1a10:	29 85       	ldd	r18, Y+9	; 0x09
    1a12:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a14:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a16:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	0d d3       	rcall	.+1562   	; 0x203c <__mulsf3>
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	c7 01       	movw	r24, r14
    1a28:	b6 01       	movw	r22, r12
    1a2a:	7c d1       	rcall	.+760    	; 0x1d24 <__subsf3>
    1a2c:	d1 01       	movw	r26, r2
    1a2e:	14 96       	adiw	r26, 0x04	; 4
    1a30:	6d 93       	st	X+, r22
    1a32:	7d 93       	st	X+, r23
    1a34:	8d 93       	st	X+, r24
    1a36:	9c 93       	st	X, r25
    1a38:	17 97       	sbiw	r26, 0x07	; 7
    1a3a:	2d a5       	ldd	r18, Y+45	; 0x2d
    1a3c:	3e a5       	ldd	r19, Y+46	; 0x2e
    1a3e:	4f a5       	ldd	r20, Y+47	; 0x2f
    1a40:	58 a9       	ldd	r21, Y+48	; 0x30
    1a42:	69 81       	ldd	r22, Y+1	; 0x01
    1a44:	7a 81       	ldd	r23, Y+2	; 0x02
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	f8 d2       	rcall	.+1520   	; 0x203c <__mulsf3>
    1a4c:	6b 01       	movw	r12, r22
    1a4e:	7c 01       	movw	r14, r24
    1a50:	a5 01       	movw	r20, r10
    1a52:	94 01       	movw	r18, r8
    1a54:	69 85       	ldd	r22, Y+9	; 0x09
    1a56:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a58:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a5c:	ef d2       	rcall	.+1502   	; 0x203c <__mulsf3>
    1a5e:	9b 01       	movw	r18, r22
    1a60:	ac 01       	movw	r20, r24
    1a62:	c7 01       	movw	r24, r14
    1a64:	b6 01       	movw	r22, r12
    1a66:	5f d1       	rcall	.+702    	; 0x1d26 <__addsf3>
    1a68:	6b 01       	movw	r12, r22
    1a6a:	7c 01       	movw	r14, r24
    1a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a70:	4f 81       	ldd	r20, Y+7	; 0x07
    1a72:	58 85       	ldd	r21, Y+8	; 0x08
    1a74:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a76:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a7a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a7c:	df d2       	rcall	.+1470   	; 0x203c <__mulsf3>
    1a7e:	9b 01       	movw	r18, r22
    1a80:	ac 01       	movw	r20, r24
    1a82:	c7 01       	movw	r24, r14
    1a84:	b6 01       	movw	r22, r12
    1a86:	4f d1       	rcall	.+670    	; 0x1d26 <__addsf3>
    1a88:	6b 01       	movw	r12, r22
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	29 a1       	ldd	r18, Y+33	; 0x21
    1a8e:	3a a1       	ldd	r19, Y+34	; 0x22
    1a90:	4b a1       	ldd	r20, Y+35	; 0x23
    1a92:	5c a1       	ldd	r21, Y+36	; 0x24
    1a94:	69 81       	ldd	r22, Y+1	; 0x01
    1a96:	7a 81       	ldd	r23, Y+2	; 0x02
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	cf d2       	rcall	.+1438   	; 0x203c <__mulsf3>
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	3e d1       	rcall	.+636    	; 0x1d24 <__subsf3>
    1aa8:	6b 01       	movw	r12, r22
    1aaa:	7c 01       	movw	r14, r24
    1aac:	2d 81       	ldd	r18, Y+5	; 0x05
    1aae:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab0:	4f 81       	ldd	r20, Y+7	; 0x07
    1ab2:	58 85       	ldd	r21, Y+8	; 0x08
    1ab4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1abc:	bf d2       	rcall	.+1406   	; 0x203c <__mulsf3>
    1abe:	9b 01       	movw	r18, r22
    1ac0:	ac 01       	movw	r20, r24
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	b6 01       	movw	r22, r12
    1ac6:	2e d1       	rcall	.+604    	; 0x1d24 <__subsf3>
    1ac8:	6b 01       	movw	r12, r22
    1aca:	7c 01       	movw	r14, r24
    1acc:	a3 01       	movw	r20, r6
    1ace:	92 01       	movw	r18, r4
    1ad0:	69 85       	ldd	r22, Y+9	; 0x09
    1ad2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ad4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ad8:	b1 d2       	rcall	.+1378   	; 0x203c <__mulsf3>
    1ada:	9b 01       	movw	r18, r22
    1adc:	ac 01       	movw	r20, r24
    1ade:	c7 01       	movw	r24, r14
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	21 d1       	rcall	.+578    	; 0x1d26 <__addsf3>
    1ae4:	6b 01       	movw	r12, r22
    1ae6:	7c 01       	movw	r14, r24
    1ae8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aea:	3e 81       	ldd	r19, Y+6	; 0x06
    1aec:	4f 81       	ldd	r20, Y+7	; 0x07
    1aee:	58 85       	ldd	r21, Y+8	; 0x08
    1af0:	6d 89       	ldd	r22, Y+21	; 0x15
    1af2:	7e 89       	ldd	r23, Y+22	; 0x16
    1af4:	8f 89       	ldd	r24, Y+23	; 0x17
    1af6:	98 8d       	ldd	r25, Y+24	; 0x18
    1af8:	a1 d2       	rcall	.+1346   	; 0x203c <__mulsf3>
    1afa:	9b 01       	movw	r18, r22
    1afc:	ac 01       	movw	r20, r24
    1afe:	c7 01       	movw	r24, r14
    1b00:	b6 01       	movw	r22, r12
    1b02:	10 d1       	rcall	.+544    	; 0x1d24 <__subsf3>
    1b04:	6b 01       	movw	r12, r22
    1b06:	7c 01       	movw	r14, r24
    1b08:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0c:	4f 81       	ldd	r20, Y+7	; 0x07
    1b0e:	58 85       	ldd	r21, Y+8	; 0x08
    1b10:	69 89       	ldd	r22, Y+17	; 0x11
    1b12:	7a 89       	ldd	r23, Y+18	; 0x12
    1b14:	8b 89       	ldd	r24, Y+19	; 0x13
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	91 d2       	rcall	.+1314   	; 0x203c <__mulsf3>
    1b1a:	9b 01       	movw	r18, r22
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	c7 01       	movw	r24, r14
    1b20:	b6 01       	movw	r22, r12
    1b22:	01 d1       	rcall	.+514    	; 0x1d26 <__addsf3>
    1b24:	f1 01       	movw	r30, r2
    1b26:	60 87       	std	Z+8, r22	; 0x08
    1b28:	71 87       	std	Z+9, r23	; 0x09
    1b2a:	82 87       	std	Z+10, r24	; 0x0a
    1b2c:	93 87       	std	Z+11, r25	; 0x0b
    1b2e:	e0 96       	adiw	r28, 0x30	; 48
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	bf 90       	pop	r11
    1b4c:	af 90       	pop	r10
    1b4e:	9f 90       	pop	r9
    1b50:	8f 90       	pop	r8
    1b52:	7f 90       	pop	r7
    1b54:	6f 90       	pop	r6
    1b56:	5f 90       	pop	r5
    1b58:	4f 90       	pop	r4
    1b5a:	3f 90       	pop	r3
    1b5c:	2f 90       	pop	r2
    1b5e:	08 95       	ret

00001b60 <Quaternion_addition>:

void Quaternion_addition(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
    1b60:	2f 92       	push	r2
    1b62:	3f 92       	push	r3
    1b64:	4f 92       	push	r4
    1b66:	5f 92       	push	r5
    1b68:	6f 92       	push	r6
    1b6a:	7f 92       	push	r7
    1b6c:	8f 92       	push	r8
    1b6e:	9f 92       	push	r9
    1b70:	af 92       	push	r10
    1b72:	bf 92       	push	r11
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	1c 01       	movw	r2, r24
    1b86:	8b 01       	movw	r16, r22
    1b88:	ea 01       	movw	r28, r20
    assert(output != NULL);
    1b8a:	20 97       	sbiw	r28, 0x00	; 0
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <Quaternion_addition+0x30>
    1b8e:	37 d3       	rcall	.+1646   	; 0x21fe <abort>
    Quaternion result;

    result.w =    q1->w + q2->w;
    result.v[0] = q1->v[0] + q2->v[0];
    1b90:	fb 01       	movw	r30, r22
    1b92:	24 81       	ldd	r18, Z+4	; 0x04
    1b94:	35 81       	ldd	r19, Z+5	; 0x05
    1b96:	46 81       	ldd	r20, Z+6	; 0x06
    1b98:	57 81       	ldd	r21, Z+7	; 0x07
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	64 81       	ldd	r22, Z+4	; 0x04
    1b9e:	75 81       	ldd	r23, Z+5	; 0x05
    1ba0:	86 81       	ldd	r24, Z+6	; 0x06
    1ba2:	97 81       	ldd	r25, Z+7	; 0x07
    1ba4:	c0 d0       	rcall	.+384    	; 0x1d26 <__addsf3>
    1ba6:	2b 01       	movw	r4, r22
    1ba8:	3c 01       	movw	r6, r24
    result.v[1] = q1->v[1] + q2->v[1];
    1baa:	f8 01       	movw	r30, r16
    1bac:	20 85       	ldd	r18, Z+8	; 0x08
    1bae:	31 85       	ldd	r19, Z+9	; 0x09
    1bb0:	42 85       	ldd	r20, Z+10	; 0x0a
    1bb2:	53 85       	ldd	r21, Z+11	; 0x0b
    1bb4:	f1 01       	movw	r30, r2
    1bb6:	60 85       	ldd	r22, Z+8	; 0x08
    1bb8:	71 85       	ldd	r23, Z+9	; 0x09
    1bba:	82 85       	ldd	r24, Z+10	; 0x0a
    1bbc:	93 85       	ldd	r25, Z+11	; 0x0b
    1bbe:	b3 d0       	rcall	.+358    	; 0x1d26 <__addsf3>
    1bc0:	4b 01       	movw	r8, r22
    1bc2:	5c 01       	movw	r10, r24
    result.v[2] = q1->v[2] + q2->v[2];
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	24 85       	ldd	r18, Z+12	; 0x0c
    1bc8:	35 85       	ldd	r19, Z+13	; 0x0d
    1bca:	46 85       	ldd	r20, Z+14	; 0x0e
    1bcc:	57 85       	ldd	r21, Z+15	; 0x0f
    1bce:	f1 01       	movw	r30, r2
    1bd0:	64 85       	ldd	r22, Z+12	; 0x0c
    1bd2:	75 85       	ldd	r23, Z+13	; 0x0d
    1bd4:	86 85       	ldd	r24, Z+14	; 0x0e
    1bd6:	97 85       	ldd	r25, Z+15	; 0x0f
    1bd8:	a6 d0       	rcall	.+332    	; 0x1d26 <__addsf3>
    1bda:	6b 01       	movw	r12, r22
    1bdc:	7c 01       	movw	r14, r24

    *output = result;
    1bde:	f8 01       	movw	r30, r16
    1be0:	20 81       	ld	r18, Z
    1be2:	31 81       	ldd	r19, Z+1	; 0x01
    1be4:	42 81       	ldd	r20, Z+2	; 0x02
    1be6:	53 81       	ldd	r21, Z+3	; 0x03
    1be8:	f1 01       	movw	r30, r2
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	99 d0       	rcall	.+306    	; 0x1d26 <__addsf3>
    1bf4:	68 83       	st	Y, r22
    1bf6:	79 83       	std	Y+1, r23	; 0x01
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
    1bfa:	9b 83       	std	Y+3, r25	; 0x03
    1bfc:	4c 82       	std	Y+4, r4	; 0x04
    1bfe:	5d 82       	std	Y+5, r5	; 0x05
    1c00:	6e 82       	std	Y+6, r6	; 0x06
    1c02:	7f 82       	std	Y+7, r7	; 0x07
    1c04:	88 86       	std	Y+8, r8	; 0x08
    1c06:	99 86       	std	Y+9, r9	; 0x09
    1c08:	aa 86       	std	Y+10, r10	; 0x0a
    1c0a:	bb 86       	std	Y+11, r11	; 0x0b
    1c0c:	cc 86       	std	Y+12, r12	; 0x0c
    1c0e:	dd 86       	std	Y+13, r13	; 0x0d
    1c10:	ee 86       	std	Y+14, r14	; 0x0e
    1c12:	ff 86       	std	Y+15, r15	; 0x0f
}
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	df 90       	pop	r13
    1c22:	cf 90       	pop	r12
    1c24:	bf 90       	pop	r11
    1c26:	af 90       	pop	r10
    1c28:	9f 90       	pop	r9
    1c2a:	8f 90       	pop	r8
    1c2c:	7f 90       	pop	r7
    1c2e:	6f 90       	pop	r6
    1c30:	5f 90       	pop	r5
    1c32:	4f 90       	pop	r4
    1c34:	3f 90       	pop	r3
    1c36:	2f 90       	pop	r2
    1c38:	08 95       	ret

00001c3a <Quaternion_ratio>:

void Quaternion_ratio(Quaternion* q, double ratio, Quaternion* output)
{
    1c3a:	4f 92       	push	r4
    1c3c:	5f 92       	push	r5
    1c3e:	6f 92       	push	r6
    1c40:	7f 92       	push	r7
    1c42:	8f 92       	push	r8
    1c44:	9f 92       	push	r9
    1c46:	af 92       	push	r10
    1c48:	bf 92       	push	r11
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <Quaternion_ratio+0x22>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <Quaternion_ratio+0x24>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <Quaternion_ratio+0x26>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	49 83       	std	Y+1, r20	; 0x01
    1c6a:	5a 83       	std	Y+2, r21	; 0x02
    1c6c:	6b 83       	std	Y+3, r22	; 0x03
    1c6e:	7c 83       	std	Y+4, r23	; 0x04
    1c70:	89 01       	movw	r16, r18
	Quaternion result;

	result.w =    q->w * ratio;
	result.v[0] = q->v[0] * ratio;
    1c72:	fc 01       	movw	r30, r24
    1c74:	24 81       	ldd	r18, Z+4	; 0x04
    1c76:	35 81       	ldd	r19, Z+5	; 0x05
    1c78:	46 81       	ldd	r20, Z+6	; 0x06
    1c7a:	57 81       	ldd	r21, Z+7	; 0x07
    1c7c:	69 81       	ldd	r22, Y+1	; 0x01
    1c7e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	db d1       	rcall	.+950    	; 0x203c <__mulsf3>
    1c86:	2b 01       	movw	r4, r22
    1c88:	3c 01       	movw	r6, r24
	result.v[1] = q->v[1] * ratio;
    1c8a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c8c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c8e:	20 85       	ldd	r18, Z+8	; 0x08
    1c90:	31 85       	ldd	r19, Z+9	; 0x09
    1c92:	42 85       	ldd	r20, Z+10	; 0x0a
    1c94:	53 85       	ldd	r21, Z+11	; 0x0b
    1c96:	69 81       	ldd	r22, Y+1	; 0x01
    1c98:	7a 81       	ldd	r23, Y+2	; 0x02
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	ce d1       	rcall	.+924    	; 0x203c <__mulsf3>
    1ca0:	4b 01       	movw	r8, r22
    1ca2:	5c 01       	movw	r10, r24
	result.v[2] = q->v[2] * ratio;
    1ca4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ca6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ca8:	24 85       	ldd	r18, Z+12	; 0x0c
    1caa:	35 85       	ldd	r19, Z+13	; 0x0d
    1cac:	46 85       	ldd	r20, Z+14	; 0x0e
    1cae:	57 85       	ldd	r21, Z+15	; 0x0f
    1cb0:	69 81       	ldd	r22, Y+1	; 0x01
    1cb2:	7a 81       	ldd	r23, Y+2	; 0x02
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	c1 d1       	rcall	.+898    	; 0x203c <__mulsf3>
    1cba:	6b 01       	movw	r12, r22
    1cbc:	7c 01       	movw	r14, r24

	*output = result;
    1cbe:	29 81       	ldd	r18, Y+1	; 0x01
    1cc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cc2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cc4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cc6:	ed 81       	ldd	r30, Y+5	; 0x05
    1cc8:	fe 81       	ldd	r31, Y+6	; 0x06
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	b4 d1       	rcall	.+872    	; 0x203c <__mulsf3>
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	60 83       	st	Z, r22
    1cd8:	71 83       	std	Z+1, r23	; 0x01
    1cda:	82 83       	std	Z+2, r24	; 0x02
    1cdc:	93 83       	std	Z+3, r25	; 0x03
    1cde:	44 82       	std	Z+4, r4	; 0x04
    1ce0:	55 82       	std	Z+5, r5	; 0x05
    1ce2:	66 82       	std	Z+6, r6	; 0x06
    1ce4:	77 82       	std	Z+7, r7	; 0x07
    1ce6:	80 86       	std	Z+8, r8	; 0x08
    1ce8:	91 86       	std	Z+9, r9	; 0x09
    1cea:	a2 86       	std	Z+10, r10	; 0x0a
    1cec:	b3 86       	std	Z+11, r11	; 0x0b
    1cee:	c4 86       	std	Z+12, r12	; 0x0c
    1cf0:	d5 86       	std	Z+13, r13	; 0x0d
    1cf2:	e6 86       	std	Z+14, r14	; 0x0e
    1cf4:	f7 86       	std	Z+15, r15	; 0x0f
    1cf6:	26 96       	adiw	r28, 0x06	; 6
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	cf 90       	pop	r12
    1d12:	bf 90       	pop	r11
    1d14:	af 90       	pop	r10
    1d16:	9f 90       	pop	r9
    1d18:	8f 90       	pop	r8
    1d1a:	7f 90       	pop	r7
    1d1c:	6f 90       	pop	r6
    1d1e:	5f 90       	pop	r5
    1d20:	4f 90       	pop	r4
    1d22:	08 95       	ret

00001d24 <__subsf3>:
    1d24:	50 58       	subi	r21, 0x80	; 128

00001d26 <__addsf3>:
    1d26:	bb 27       	eor	r27, r27
    1d28:	aa 27       	eor	r26, r26
    1d2a:	0e d0       	rcall	.+28     	; 0x1d48 <__addsf3x>
    1d2c:	4d c1       	rjmp	.+666    	; 0x1fc8 <__fp_round>
    1d2e:	3e d1       	rcall	.+636    	; 0x1fac <__fp_pscA>
    1d30:	30 f0       	brcs	.+12     	; 0x1d3e <__addsf3+0x18>
    1d32:	43 d1       	rcall	.+646    	; 0x1fba <__fp_pscB>
    1d34:	20 f0       	brcs	.+8      	; 0x1d3e <__addsf3+0x18>
    1d36:	31 f4       	brne	.+12     	; 0x1d44 <__addsf3+0x1e>
    1d38:	9f 3f       	cpi	r25, 0xFF	; 255
    1d3a:	11 f4       	brne	.+4      	; 0x1d40 <__addsf3+0x1a>
    1d3c:	1e f4       	brtc	.+6      	; 0x1d44 <__addsf3+0x1e>
    1d3e:	33 c1       	rjmp	.+614    	; 0x1fa6 <__fp_nan>
    1d40:	0e f4       	brtc	.+2      	; 0x1d44 <__addsf3+0x1e>
    1d42:	e0 95       	com	r30
    1d44:	e7 fb       	bst	r30, 7
    1d46:	29 c1       	rjmp	.+594    	; 0x1f9a <__fp_inf>

00001d48 <__addsf3x>:
    1d48:	e9 2f       	mov	r30, r25
    1d4a:	4f d1       	rcall	.+670    	; 0x1fea <__fp_split3>
    1d4c:	80 f3       	brcs	.-32     	; 0x1d2e <__addsf3+0x8>
    1d4e:	ba 17       	cp	r27, r26
    1d50:	62 07       	cpc	r22, r18
    1d52:	73 07       	cpc	r23, r19
    1d54:	84 07       	cpc	r24, r20
    1d56:	95 07       	cpc	r25, r21
    1d58:	18 f0       	brcs	.+6      	; 0x1d60 <__addsf3x+0x18>
    1d5a:	71 f4       	brne	.+28     	; 0x1d78 <__addsf3x+0x30>
    1d5c:	9e f5       	brtc	.+102    	; 0x1dc4 <__addsf3x+0x7c>
    1d5e:	67 c1       	rjmp	.+718    	; 0x202e <__fp_zero>
    1d60:	0e f4       	brtc	.+2      	; 0x1d64 <__addsf3x+0x1c>
    1d62:	e0 95       	com	r30
    1d64:	0b 2e       	mov	r0, r27
    1d66:	ba 2f       	mov	r27, r26
    1d68:	a0 2d       	mov	r26, r0
    1d6a:	0b 01       	movw	r0, r22
    1d6c:	b9 01       	movw	r22, r18
    1d6e:	90 01       	movw	r18, r0
    1d70:	0c 01       	movw	r0, r24
    1d72:	ca 01       	movw	r24, r20
    1d74:	a0 01       	movw	r20, r0
    1d76:	11 24       	eor	r1, r1
    1d78:	ff 27       	eor	r31, r31
    1d7a:	59 1b       	sub	r21, r25
    1d7c:	99 f0       	breq	.+38     	; 0x1da4 <__addsf3x+0x5c>
    1d7e:	59 3f       	cpi	r21, 0xF9	; 249
    1d80:	50 f4       	brcc	.+20     	; 0x1d96 <__addsf3x+0x4e>
    1d82:	50 3e       	cpi	r21, 0xE0	; 224
    1d84:	68 f1       	brcs	.+90     	; 0x1de0 <__addsf3x+0x98>
    1d86:	1a 16       	cp	r1, r26
    1d88:	f0 40       	sbci	r31, 0x00	; 0
    1d8a:	a2 2f       	mov	r26, r18
    1d8c:	23 2f       	mov	r18, r19
    1d8e:	34 2f       	mov	r19, r20
    1d90:	44 27       	eor	r20, r20
    1d92:	58 5f       	subi	r21, 0xF8	; 248
    1d94:	f3 cf       	rjmp	.-26     	; 0x1d7c <__addsf3x+0x34>
    1d96:	46 95       	lsr	r20
    1d98:	37 95       	ror	r19
    1d9a:	27 95       	ror	r18
    1d9c:	a7 95       	ror	r26
    1d9e:	f0 40       	sbci	r31, 0x00	; 0
    1da0:	53 95       	inc	r21
    1da2:	c9 f7       	brne	.-14     	; 0x1d96 <__addsf3x+0x4e>
    1da4:	7e f4       	brtc	.+30     	; 0x1dc4 <__addsf3x+0x7c>
    1da6:	1f 16       	cp	r1, r31
    1da8:	ba 0b       	sbc	r27, r26
    1daa:	62 0b       	sbc	r22, r18
    1dac:	73 0b       	sbc	r23, r19
    1dae:	84 0b       	sbc	r24, r20
    1db0:	ba f0       	brmi	.+46     	; 0x1de0 <__addsf3x+0x98>
    1db2:	91 50       	subi	r25, 0x01	; 1
    1db4:	a1 f0       	breq	.+40     	; 0x1dde <__addsf3x+0x96>
    1db6:	ff 0f       	add	r31, r31
    1db8:	bb 1f       	adc	r27, r27
    1dba:	66 1f       	adc	r22, r22
    1dbc:	77 1f       	adc	r23, r23
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	c2 f7       	brpl	.-16     	; 0x1db2 <__addsf3x+0x6a>
    1dc2:	0e c0       	rjmp	.+28     	; 0x1de0 <__addsf3x+0x98>
    1dc4:	ba 0f       	add	r27, r26
    1dc6:	62 1f       	adc	r22, r18
    1dc8:	73 1f       	adc	r23, r19
    1dca:	84 1f       	adc	r24, r20
    1dcc:	48 f4       	brcc	.+18     	; 0x1de0 <__addsf3x+0x98>
    1dce:	87 95       	ror	r24
    1dd0:	77 95       	ror	r23
    1dd2:	67 95       	ror	r22
    1dd4:	b7 95       	ror	r27
    1dd6:	f7 95       	ror	r31
    1dd8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dda:	08 f0       	brcs	.+2      	; 0x1dde <__addsf3x+0x96>
    1ddc:	b3 cf       	rjmp	.-154    	; 0x1d44 <__addsf3+0x1e>
    1dde:	93 95       	inc	r25
    1de0:	88 0f       	add	r24, r24
    1de2:	08 f0       	brcs	.+2      	; 0x1de6 <__addsf3x+0x9e>
    1de4:	99 27       	eor	r25, r25
    1de6:	ee 0f       	add	r30, r30
    1de8:	97 95       	ror	r25
    1dea:	87 95       	ror	r24
    1dec:	08 95       	ret

00001dee <__divsf3>:
    1dee:	0c d0       	rcall	.+24     	; 0x1e08 <__divsf3x>
    1df0:	eb c0       	rjmp	.+470    	; 0x1fc8 <__fp_round>
    1df2:	e3 d0       	rcall	.+454    	; 0x1fba <__fp_pscB>
    1df4:	40 f0       	brcs	.+16     	; 0x1e06 <__divsf3+0x18>
    1df6:	da d0       	rcall	.+436    	; 0x1fac <__fp_pscA>
    1df8:	30 f0       	brcs	.+12     	; 0x1e06 <__divsf3+0x18>
    1dfa:	21 f4       	brne	.+8      	; 0x1e04 <__divsf3+0x16>
    1dfc:	5f 3f       	cpi	r21, 0xFF	; 255
    1dfe:	19 f0       	breq	.+6      	; 0x1e06 <__divsf3+0x18>
    1e00:	cc c0       	rjmp	.+408    	; 0x1f9a <__fp_inf>
    1e02:	51 11       	cpse	r21, r1
    1e04:	15 c1       	rjmp	.+554    	; 0x2030 <__fp_szero>
    1e06:	cf c0       	rjmp	.+414    	; 0x1fa6 <__fp_nan>

00001e08 <__divsf3x>:
    1e08:	f0 d0       	rcall	.+480    	; 0x1fea <__fp_split3>
    1e0a:	98 f3       	brcs	.-26     	; 0x1df2 <__divsf3+0x4>

00001e0c <__divsf3_pse>:
    1e0c:	99 23       	and	r25, r25
    1e0e:	c9 f3       	breq	.-14     	; 0x1e02 <__divsf3+0x14>
    1e10:	55 23       	and	r21, r21
    1e12:	b1 f3       	breq	.-20     	; 0x1e00 <__divsf3+0x12>
    1e14:	95 1b       	sub	r25, r21
    1e16:	55 0b       	sbc	r21, r21
    1e18:	bb 27       	eor	r27, r27
    1e1a:	aa 27       	eor	r26, r26
    1e1c:	62 17       	cp	r22, r18
    1e1e:	73 07       	cpc	r23, r19
    1e20:	84 07       	cpc	r24, r20
    1e22:	38 f0       	brcs	.+14     	; 0x1e32 <__divsf3_pse+0x26>
    1e24:	9f 5f       	subi	r25, 0xFF	; 255
    1e26:	5f 4f       	sbci	r21, 0xFF	; 255
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	44 1f       	adc	r20, r20
    1e2e:	aa 1f       	adc	r26, r26
    1e30:	a9 f3       	breq	.-22     	; 0x1e1c <__divsf3_pse+0x10>
    1e32:	33 d0       	rcall	.+102    	; 0x1e9a <__divsf3_pse+0x8e>
    1e34:	0e 2e       	mov	r0, r30
    1e36:	3a f0       	brmi	.+14     	; 0x1e46 <__divsf3_pse+0x3a>
    1e38:	e0 e8       	ldi	r30, 0x80	; 128
    1e3a:	30 d0       	rcall	.+96     	; 0x1e9c <__divsf3_pse+0x90>
    1e3c:	91 50       	subi	r25, 0x01	; 1
    1e3e:	50 40       	sbci	r21, 0x00	; 0
    1e40:	e6 95       	lsr	r30
    1e42:	00 1c       	adc	r0, r0
    1e44:	ca f7       	brpl	.-14     	; 0x1e38 <__divsf3_pse+0x2c>
    1e46:	29 d0       	rcall	.+82     	; 0x1e9a <__divsf3_pse+0x8e>
    1e48:	fe 2f       	mov	r31, r30
    1e4a:	27 d0       	rcall	.+78     	; 0x1e9a <__divsf3_pse+0x8e>
    1e4c:	66 0f       	add	r22, r22
    1e4e:	77 1f       	adc	r23, r23
    1e50:	88 1f       	adc	r24, r24
    1e52:	bb 1f       	adc	r27, r27
    1e54:	26 17       	cp	r18, r22
    1e56:	37 07       	cpc	r19, r23
    1e58:	48 07       	cpc	r20, r24
    1e5a:	ab 07       	cpc	r26, r27
    1e5c:	b0 e8       	ldi	r27, 0x80	; 128
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <__divsf3_pse+0x56>
    1e60:	bb 0b       	sbc	r27, r27
    1e62:	80 2d       	mov	r24, r0
    1e64:	bf 01       	movw	r22, r30
    1e66:	ff 27       	eor	r31, r31
    1e68:	93 58       	subi	r25, 0x83	; 131
    1e6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6c:	2a f0       	brmi	.+10     	; 0x1e78 <__divsf3_pse+0x6c>
    1e6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e70:	51 05       	cpc	r21, r1
    1e72:	68 f0       	brcs	.+26     	; 0x1e8e <__divsf3_pse+0x82>
    1e74:	92 c0       	rjmp	.+292    	; 0x1f9a <__fp_inf>
    1e76:	dc c0       	rjmp	.+440    	; 0x2030 <__fp_szero>
    1e78:	5f 3f       	cpi	r21, 0xFF	; 255
    1e7a:	ec f3       	brlt	.-6      	; 0x1e76 <__divsf3_pse+0x6a>
    1e7c:	98 3e       	cpi	r25, 0xE8	; 232
    1e7e:	dc f3       	brlt	.-10     	; 0x1e76 <__divsf3_pse+0x6a>
    1e80:	86 95       	lsr	r24
    1e82:	77 95       	ror	r23
    1e84:	67 95       	ror	r22
    1e86:	b7 95       	ror	r27
    1e88:	f7 95       	ror	r31
    1e8a:	9f 5f       	subi	r25, 0xFF	; 255
    1e8c:	c9 f7       	brne	.-14     	; 0x1e80 <__divsf3_pse+0x74>
    1e8e:	88 0f       	add	r24, r24
    1e90:	91 1d       	adc	r25, r1
    1e92:	96 95       	lsr	r25
    1e94:	87 95       	ror	r24
    1e96:	97 f9       	bld	r25, 7
    1e98:	08 95       	ret
    1e9a:	e1 e0       	ldi	r30, 0x01	; 1
    1e9c:	66 0f       	add	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	62 17       	cp	r22, r18
    1ea6:	73 07       	cpc	r23, r19
    1ea8:	84 07       	cpc	r24, r20
    1eaa:	ba 07       	cpc	r27, r26
    1eac:	20 f0       	brcs	.+8      	; 0x1eb6 <__divsf3_pse+0xaa>
    1eae:	62 1b       	sub	r22, r18
    1eb0:	73 0b       	sbc	r23, r19
    1eb2:	84 0b       	sbc	r24, r20
    1eb4:	ba 0b       	sbc	r27, r26
    1eb6:	ee 1f       	adc	r30, r30
    1eb8:	88 f7       	brcc	.-30     	; 0x1e9c <__divsf3_pse+0x90>
    1eba:	e0 95       	com	r30
    1ebc:	08 95       	ret

00001ebe <__fixsfsi>:
    1ebe:	04 d0       	rcall	.+8      	; 0x1ec8 <__fixunssfsi>
    1ec0:	68 94       	set
    1ec2:	b1 11       	cpse	r27, r1
    1ec4:	b5 c0       	rjmp	.+362    	; 0x2030 <__fp_szero>
    1ec6:	08 95       	ret

00001ec8 <__fixunssfsi>:
    1ec8:	98 d0       	rcall	.+304    	; 0x1ffa <__fp_splitA>
    1eca:	88 f0       	brcs	.+34     	; 0x1eee <__fixunssfsi+0x26>
    1ecc:	9f 57       	subi	r25, 0x7F	; 127
    1ece:	90 f0       	brcs	.+36     	; 0x1ef4 <__fixunssfsi+0x2c>
    1ed0:	b9 2f       	mov	r27, r25
    1ed2:	99 27       	eor	r25, r25
    1ed4:	b7 51       	subi	r27, 0x17	; 23
    1ed6:	a0 f0       	brcs	.+40     	; 0x1f00 <__fixunssfsi+0x38>
    1ed8:	d1 f0       	breq	.+52     	; 0x1f0e <__fixunssfsi+0x46>
    1eda:	66 0f       	add	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	1a f0       	brmi	.+6      	; 0x1eea <__fixunssfsi+0x22>
    1ee4:	ba 95       	dec	r27
    1ee6:	c9 f7       	brne	.-14     	; 0x1eda <__fixunssfsi+0x12>
    1ee8:	12 c0       	rjmp	.+36     	; 0x1f0e <__fixunssfsi+0x46>
    1eea:	b1 30       	cpi	r27, 0x01	; 1
    1eec:	81 f0       	breq	.+32     	; 0x1f0e <__fixunssfsi+0x46>
    1eee:	9f d0       	rcall	.+318    	; 0x202e <__fp_zero>
    1ef0:	b1 e0       	ldi	r27, 0x01	; 1
    1ef2:	08 95       	ret
    1ef4:	9c c0       	rjmp	.+312    	; 0x202e <__fp_zero>
    1ef6:	67 2f       	mov	r22, r23
    1ef8:	78 2f       	mov	r23, r24
    1efa:	88 27       	eor	r24, r24
    1efc:	b8 5f       	subi	r27, 0xF8	; 248
    1efe:	39 f0       	breq	.+14     	; 0x1f0e <__fixunssfsi+0x46>
    1f00:	b9 3f       	cpi	r27, 0xF9	; 249
    1f02:	cc f3       	brlt	.-14     	; 0x1ef6 <__fixunssfsi+0x2e>
    1f04:	86 95       	lsr	r24
    1f06:	77 95       	ror	r23
    1f08:	67 95       	ror	r22
    1f0a:	b3 95       	inc	r27
    1f0c:	d9 f7       	brne	.-10     	; 0x1f04 <__fixunssfsi+0x3c>
    1f0e:	3e f4       	brtc	.+14     	; 0x1f1e <__fixunssfsi+0x56>
    1f10:	90 95       	com	r25
    1f12:	80 95       	com	r24
    1f14:	70 95       	com	r23
    1f16:	61 95       	neg	r22
    1f18:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	08 95       	ret

00001f20 <__floatunsisf>:
    1f20:	e8 94       	clt
    1f22:	09 c0       	rjmp	.+18     	; 0x1f36 <__floatsisf+0x12>

00001f24 <__floatsisf>:
    1f24:	97 fb       	bst	r25, 7
    1f26:	3e f4       	brtc	.+14     	; 0x1f36 <__floatsisf+0x12>
    1f28:	90 95       	com	r25
    1f2a:	80 95       	com	r24
    1f2c:	70 95       	com	r23
    1f2e:	61 95       	neg	r22
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	8f 4f       	sbci	r24, 0xFF	; 255
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	99 23       	and	r25, r25
    1f38:	a9 f0       	breq	.+42     	; 0x1f64 <__floatsisf+0x40>
    1f3a:	f9 2f       	mov	r31, r25
    1f3c:	96 e9       	ldi	r25, 0x96	; 150
    1f3e:	bb 27       	eor	r27, r27
    1f40:	93 95       	inc	r25
    1f42:	f6 95       	lsr	r31
    1f44:	87 95       	ror	r24
    1f46:	77 95       	ror	r23
    1f48:	67 95       	ror	r22
    1f4a:	b7 95       	ror	r27
    1f4c:	f1 11       	cpse	r31, r1
    1f4e:	f8 cf       	rjmp	.-16     	; 0x1f40 <__floatsisf+0x1c>
    1f50:	fa f4       	brpl	.+62     	; 0x1f90 <__floatsisf+0x6c>
    1f52:	bb 0f       	add	r27, r27
    1f54:	11 f4       	brne	.+4      	; 0x1f5a <__floatsisf+0x36>
    1f56:	60 ff       	sbrs	r22, 0
    1f58:	1b c0       	rjmp	.+54     	; 0x1f90 <__floatsisf+0x6c>
    1f5a:	6f 5f       	subi	r22, 0xFF	; 255
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	16 c0       	rjmp	.+44     	; 0x1f90 <__floatsisf+0x6c>
    1f64:	88 23       	and	r24, r24
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <__floatsisf+0x48>
    1f68:	96 e9       	ldi	r25, 0x96	; 150
    1f6a:	11 c0       	rjmp	.+34     	; 0x1f8e <__floatsisf+0x6a>
    1f6c:	77 23       	and	r23, r23
    1f6e:	21 f0       	breq	.+8      	; 0x1f78 <__floatsisf+0x54>
    1f70:	9e e8       	ldi	r25, 0x8E	; 142
    1f72:	87 2f       	mov	r24, r23
    1f74:	76 2f       	mov	r23, r22
    1f76:	05 c0       	rjmp	.+10     	; 0x1f82 <__floatsisf+0x5e>
    1f78:	66 23       	and	r22, r22
    1f7a:	71 f0       	breq	.+28     	; 0x1f98 <__floatsisf+0x74>
    1f7c:	96 e8       	ldi	r25, 0x86	; 134
    1f7e:	86 2f       	mov	r24, r22
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	2a f0       	brmi	.+10     	; 0x1f90 <__floatsisf+0x6c>
    1f86:	9a 95       	dec	r25
    1f88:	66 0f       	add	r22, r22
    1f8a:	77 1f       	adc	r23, r23
    1f8c:	88 1f       	adc	r24, r24
    1f8e:	da f7       	brpl	.-10     	; 0x1f86 <__floatsisf+0x62>
    1f90:	88 0f       	add	r24, r24
    1f92:	96 95       	lsr	r25
    1f94:	87 95       	ror	r24
    1f96:	97 f9       	bld	r25, 7
    1f98:	08 95       	ret

00001f9a <__fp_inf>:
    1f9a:	97 f9       	bld	r25, 7
    1f9c:	9f 67       	ori	r25, 0x7F	; 127
    1f9e:	80 e8       	ldi	r24, 0x80	; 128
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	08 95       	ret

00001fa6 <__fp_nan>:
    1fa6:	9f ef       	ldi	r25, 0xFF	; 255
    1fa8:	80 ec       	ldi	r24, 0xC0	; 192
    1faa:	08 95       	ret

00001fac <__fp_pscA>:
    1fac:	00 24       	eor	r0, r0
    1fae:	0a 94       	dec	r0
    1fb0:	16 16       	cp	r1, r22
    1fb2:	17 06       	cpc	r1, r23
    1fb4:	18 06       	cpc	r1, r24
    1fb6:	09 06       	cpc	r0, r25
    1fb8:	08 95       	ret

00001fba <__fp_pscB>:
    1fba:	00 24       	eor	r0, r0
    1fbc:	0a 94       	dec	r0
    1fbe:	12 16       	cp	r1, r18
    1fc0:	13 06       	cpc	r1, r19
    1fc2:	14 06       	cpc	r1, r20
    1fc4:	05 06       	cpc	r0, r21
    1fc6:	08 95       	ret

00001fc8 <__fp_round>:
    1fc8:	09 2e       	mov	r0, r25
    1fca:	03 94       	inc	r0
    1fcc:	00 0c       	add	r0, r0
    1fce:	11 f4       	brne	.+4      	; 0x1fd4 <__fp_round+0xc>
    1fd0:	88 23       	and	r24, r24
    1fd2:	52 f0       	brmi	.+20     	; 0x1fe8 <__fp_round+0x20>
    1fd4:	bb 0f       	add	r27, r27
    1fd6:	40 f4       	brcc	.+16     	; 0x1fe8 <__fp_round+0x20>
    1fd8:	bf 2b       	or	r27, r31
    1fda:	11 f4       	brne	.+4      	; 0x1fe0 <__fp_round+0x18>
    1fdc:	60 ff       	sbrs	r22, 0
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <__fp_round+0x20>
    1fe0:	6f 5f       	subi	r22, 0xFF	; 255
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	08 95       	ret

00001fea <__fp_split3>:
    1fea:	57 fd       	sbrc	r21, 7
    1fec:	90 58       	subi	r25, 0x80	; 128
    1fee:	44 0f       	add	r20, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	59 f0       	breq	.+22     	; 0x200a <__fp_splitA+0x10>
    1ff4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ff6:	71 f0       	breq	.+28     	; 0x2014 <__fp_splitA+0x1a>
    1ff8:	47 95       	ror	r20

00001ffa <__fp_splitA>:
    1ffa:	88 0f       	add	r24, r24
    1ffc:	97 fb       	bst	r25, 7
    1ffe:	99 1f       	adc	r25, r25
    2000:	61 f0       	breq	.+24     	; 0x201a <__fp_splitA+0x20>
    2002:	9f 3f       	cpi	r25, 0xFF	; 255
    2004:	79 f0       	breq	.+30     	; 0x2024 <__fp_splitA+0x2a>
    2006:	87 95       	ror	r24
    2008:	08 95       	ret
    200a:	12 16       	cp	r1, r18
    200c:	13 06       	cpc	r1, r19
    200e:	14 06       	cpc	r1, r20
    2010:	55 1f       	adc	r21, r21
    2012:	f2 cf       	rjmp	.-28     	; 0x1ff8 <__fp_split3+0xe>
    2014:	46 95       	lsr	r20
    2016:	f1 df       	rcall	.-30     	; 0x1ffa <__fp_splitA>
    2018:	08 c0       	rjmp	.+16     	; 0x202a <__fp_splitA+0x30>
    201a:	16 16       	cp	r1, r22
    201c:	17 06       	cpc	r1, r23
    201e:	18 06       	cpc	r1, r24
    2020:	99 1f       	adc	r25, r25
    2022:	f1 cf       	rjmp	.-30     	; 0x2006 <__fp_splitA+0xc>
    2024:	86 95       	lsr	r24
    2026:	71 05       	cpc	r23, r1
    2028:	61 05       	cpc	r22, r1
    202a:	08 94       	sec
    202c:	08 95       	ret

0000202e <__fp_zero>:
    202e:	e8 94       	clt

00002030 <__fp_szero>:
    2030:	bb 27       	eor	r27, r27
    2032:	66 27       	eor	r22, r22
    2034:	77 27       	eor	r23, r23
    2036:	cb 01       	movw	r24, r22
    2038:	97 f9       	bld	r25, 7
    203a:	08 95       	ret

0000203c <__mulsf3>:
    203c:	0b d0       	rcall	.+22     	; 0x2054 <__mulsf3x>
    203e:	c4 cf       	rjmp	.-120    	; 0x1fc8 <__fp_round>
    2040:	b5 df       	rcall	.-150    	; 0x1fac <__fp_pscA>
    2042:	28 f0       	brcs	.+10     	; 0x204e <__mulsf3+0x12>
    2044:	ba df       	rcall	.-140    	; 0x1fba <__fp_pscB>
    2046:	18 f0       	brcs	.+6      	; 0x204e <__mulsf3+0x12>
    2048:	95 23       	and	r25, r21
    204a:	09 f0       	breq	.+2      	; 0x204e <__mulsf3+0x12>
    204c:	a6 cf       	rjmp	.-180    	; 0x1f9a <__fp_inf>
    204e:	ab cf       	rjmp	.-170    	; 0x1fa6 <__fp_nan>
    2050:	11 24       	eor	r1, r1
    2052:	ee cf       	rjmp	.-36     	; 0x2030 <__fp_szero>

00002054 <__mulsf3x>:
    2054:	ca df       	rcall	.-108    	; 0x1fea <__fp_split3>
    2056:	a0 f3       	brcs	.-24     	; 0x2040 <__mulsf3+0x4>

00002058 <__mulsf3_pse>:
    2058:	95 9f       	mul	r25, r21
    205a:	d1 f3       	breq	.-12     	; 0x2050 <__mulsf3+0x14>
    205c:	95 0f       	add	r25, r21
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	55 1f       	adc	r21, r21
    2062:	62 9f       	mul	r22, r18
    2064:	f0 01       	movw	r30, r0
    2066:	72 9f       	mul	r23, r18
    2068:	bb 27       	eor	r27, r27
    206a:	f0 0d       	add	r31, r0
    206c:	b1 1d       	adc	r27, r1
    206e:	63 9f       	mul	r22, r19
    2070:	aa 27       	eor	r26, r26
    2072:	f0 0d       	add	r31, r0
    2074:	b1 1d       	adc	r27, r1
    2076:	aa 1f       	adc	r26, r26
    2078:	64 9f       	mul	r22, r20
    207a:	66 27       	eor	r22, r22
    207c:	b0 0d       	add	r27, r0
    207e:	a1 1d       	adc	r26, r1
    2080:	66 1f       	adc	r22, r22
    2082:	82 9f       	mul	r24, r18
    2084:	22 27       	eor	r18, r18
    2086:	b0 0d       	add	r27, r0
    2088:	a1 1d       	adc	r26, r1
    208a:	62 1f       	adc	r22, r18
    208c:	73 9f       	mul	r23, r19
    208e:	b0 0d       	add	r27, r0
    2090:	a1 1d       	adc	r26, r1
    2092:	62 1f       	adc	r22, r18
    2094:	83 9f       	mul	r24, r19
    2096:	a0 0d       	add	r26, r0
    2098:	61 1d       	adc	r22, r1
    209a:	22 1f       	adc	r18, r18
    209c:	74 9f       	mul	r23, r20
    209e:	33 27       	eor	r19, r19
    20a0:	a0 0d       	add	r26, r0
    20a2:	61 1d       	adc	r22, r1
    20a4:	23 1f       	adc	r18, r19
    20a6:	84 9f       	mul	r24, r20
    20a8:	60 0d       	add	r22, r0
    20aa:	21 1d       	adc	r18, r1
    20ac:	82 2f       	mov	r24, r18
    20ae:	76 2f       	mov	r23, r22
    20b0:	6a 2f       	mov	r22, r26
    20b2:	11 24       	eor	r1, r1
    20b4:	9f 57       	subi	r25, 0x7F	; 127
    20b6:	50 40       	sbci	r21, 0x00	; 0
    20b8:	8a f0       	brmi	.+34     	; 0x20dc <__mulsf3_pse+0x84>
    20ba:	e1 f0       	breq	.+56     	; 0x20f4 <__mulsf3_pse+0x9c>
    20bc:	88 23       	and	r24, r24
    20be:	4a f0       	brmi	.+18     	; 0x20d2 <__mulsf3_pse+0x7a>
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	bb 1f       	adc	r27, r27
    20c6:	66 1f       	adc	r22, r22
    20c8:	77 1f       	adc	r23, r23
    20ca:	88 1f       	adc	r24, r24
    20cc:	91 50       	subi	r25, 0x01	; 1
    20ce:	50 40       	sbci	r21, 0x00	; 0
    20d0:	a9 f7       	brne	.-22     	; 0x20bc <__mulsf3_pse+0x64>
    20d2:	9e 3f       	cpi	r25, 0xFE	; 254
    20d4:	51 05       	cpc	r21, r1
    20d6:	70 f0       	brcs	.+28     	; 0x20f4 <__mulsf3_pse+0x9c>
    20d8:	60 cf       	rjmp	.-320    	; 0x1f9a <__fp_inf>
    20da:	aa cf       	rjmp	.-172    	; 0x2030 <__fp_szero>
    20dc:	5f 3f       	cpi	r21, 0xFF	; 255
    20de:	ec f3       	brlt	.-6      	; 0x20da <__mulsf3_pse+0x82>
    20e0:	98 3e       	cpi	r25, 0xE8	; 232
    20e2:	dc f3       	brlt	.-10     	; 0x20da <__mulsf3_pse+0x82>
    20e4:	86 95       	lsr	r24
    20e6:	77 95       	ror	r23
    20e8:	67 95       	ror	r22
    20ea:	b7 95       	ror	r27
    20ec:	f7 95       	ror	r31
    20ee:	e7 95       	ror	r30
    20f0:	9f 5f       	subi	r25, 0xFF	; 255
    20f2:	c1 f7       	brne	.-16     	; 0x20e4 <__mulsf3_pse+0x8c>
    20f4:	fe 2b       	or	r31, r30
    20f6:	88 0f       	add	r24, r24
    20f8:	91 1d       	adc	r25, r1
    20fa:	96 95       	lsr	r25
    20fc:	87 95       	ror	r24
    20fe:	97 f9       	bld	r25, 7
    2100:	08 95       	ret
    2102:	11 f4       	brne	.+4      	; 0x2108 <__mulsf3_pse+0xb0>
    2104:	0e f4       	brtc	.+2      	; 0x2108 <__mulsf3_pse+0xb0>
    2106:	4f cf       	rjmp	.-354    	; 0x1fa6 <__fp_nan>
    2108:	3e c0       	rjmp	.+124    	; 0x2186 <__fp_mpack>

0000210a <sqrt>:
    210a:	77 df       	rcall	.-274    	; 0x1ffa <__fp_splitA>
    210c:	d0 f3       	brcs	.-12     	; 0x2102 <__mulsf3_pse+0xaa>
    210e:	99 23       	and	r25, r25
    2110:	d9 f3       	breq	.-10     	; 0x2108 <__mulsf3_pse+0xb0>
    2112:	ce f3       	brts	.-14     	; 0x2106 <__mulsf3_pse+0xae>
    2114:	9f 57       	subi	r25, 0x7F	; 127
    2116:	55 0b       	sbc	r21, r21
    2118:	87 ff       	sbrs	r24, 7
    211a:	43 d0       	rcall	.+134    	; 0x21a2 <__fp_norm2>
    211c:	00 24       	eor	r0, r0
    211e:	a0 e6       	ldi	r26, 0x60	; 96
    2120:	40 ea       	ldi	r20, 0xA0	; 160
    2122:	90 01       	movw	r18, r0
    2124:	80 58       	subi	r24, 0x80	; 128
    2126:	56 95       	lsr	r21
    2128:	97 95       	ror	r25
    212a:	28 f4       	brcc	.+10     	; 0x2136 <sqrt+0x2c>
    212c:	80 5c       	subi	r24, 0xC0	; 192
    212e:	66 0f       	add	r22, r22
    2130:	77 1f       	adc	r23, r23
    2132:	88 1f       	adc	r24, r24
    2134:	20 f0       	brcs	.+8      	; 0x213e <sqrt+0x34>
    2136:	26 17       	cp	r18, r22
    2138:	37 07       	cpc	r19, r23
    213a:	48 07       	cpc	r20, r24
    213c:	30 f4       	brcc	.+12     	; 0x214a <sqrt+0x40>
    213e:	62 1b       	sub	r22, r18
    2140:	73 0b       	sbc	r23, r19
    2142:	84 0b       	sbc	r24, r20
    2144:	20 29       	or	r18, r0
    2146:	31 29       	or	r19, r1
    2148:	4a 2b       	or	r20, r26
    214a:	a6 95       	lsr	r26
    214c:	17 94       	ror	r1
    214e:	07 94       	ror	r0
    2150:	20 25       	eor	r18, r0
    2152:	31 25       	eor	r19, r1
    2154:	4a 27       	eor	r20, r26
    2156:	58 f7       	brcc	.-42     	; 0x212e <sqrt+0x24>
    2158:	66 0f       	add	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	88 1f       	adc	r24, r24
    215e:	20 f0       	brcs	.+8      	; 0x2168 <sqrt+0x5e>
    2160:	26 17       	cp	r18, r22
    2162:	37 07       	cpc	r19, r23
    2164:	48 07       	cpc	r20, r24
    2166:	30 f4       	brcc	.+12     	; 0x2174 <sqrt+0x6a>
    2168:	62 0b       	sbc	r22, r18
    216a:	73 0b       	sbc	r23, r19
    216c:	84 0b       	sbc	r24, r20
    216e:	20 0d       	add	r18, r0
    2170:	31 1d       	adc	r19, r1
    2172:	41 1d       	adc	r20, r1
    2174:	a0 95       	com	r26
    2176:	81 f7       	brne	.-32     	; 0x2158 <sqrt+0x4e>
    2178:	b9 01       	movw	r22, r18
    217a:	84 2f       	mov	r24, r20
    217c:	91 58       	subi	r25, 0x81	; 129
    217e:	88 0f       	add	r24, r24
    2180:	96 95       	lsr	r25
    2182:	87 95       	ror	r24
    2184:	08 95       	ret

00002186 <__fp_mpack>:
    2186:	9f 3f       	cpi	r25, 0xFF	; 255
    2188:	31 f0       	breq	.+12     	; 0x2196 <__fp_mpack_finite+0xc>

0000218a <__fp_mpack_finite>:
    218a:	91 50       	subi	r25, 0x01	; 1
    218c:	20 f4       	brcc	.+8      	; 0x2196 <__fp_mpack_finite+0xc>
    218e:	87 95       	ror	r24
    2190:	77 95       	ror	r23
    2192:	67 95       	ror	r22
    2194:	b7 95       	ror	r27
    2196:	88 0f       	add	r24, r24
    2198:	91 1d       	adc	r25, r1
    219a:	96 95       	lsr	r25
    219c:	87 95       	ror	r24
    219e:	97 f9       	bld	r25, 7
    21a0:	08 95       	ret

000021a2 <__fp_norm2>:
    21a2:	91 50       	subi	r25, 0x01	; 1
    21a4:	50 40       	sbci	r21, 0x00	; 0
    21a6:	66 0f       	add	r22, r22
    21a8:	77 1f       	adc	r23, r23
    21aa:	88 1f       	adc	r24, r24
    21ac:	d2 f7       	brpl	.-12     	; 0x21a2 <__fp_norm2>
    21ae:	08 95       	ret

000021b0 <__divmodhi4>:
    21b0:	97 fb       	bst	r25, 7
    21b2:	07 2e       	mov	r0, r23
    21b4:	16 f4       	brtc	.+4      	; 0x21ba <__divmodhi4+0xa>
    21b6:	00 94       	com	r0
    21b8:	06 d0       	rcall	.+12     	; 0x21c6 <__divmodhi4_neg1>
    21ba:	77 fd       	sbrc	r23, 7
    21bc:	08 d0       	rcall	.+16     	; 0x21ce <__divmodhi4_neg2>
    21be:	0b d0       	rcall	.+22     	; 0x21d6 <__udivmodhi4>
    21c0:	07 fc       	sbrc	r0, 7
    21c2:	05 d0       	rcall	.+10     	; 0x21ce <__divmodhi4_neg2>
    21c4:	3e f4       	brtc	.+14     	; 0x21d4 <__divmodhi4_exit>

000021c6 <__divmodhi4_neg1>:
    21c6:	90 95       	com	r25
    21c8:	81 95       	neg	r24
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	08 95       	ret

000021ce <__divmodhi4_neg2>:
    21ce:	70 95       	com	r23
    21d0:	61 95       	neg	r22
    21d2:	7f 4f       	sbci	r23, 0xFF	; 255

000021d4 <__divmodhi4_exit>:
    21d4:	08 95       	ret

000021d6 <__udivmodhi4>:
    21d6:	aa 1b       	sub	r26, r26
    21d8:	bb 1b       	sub	r27, r27
    21da:	51 e1       	ldi	r21, 0x11	; 17
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <__udivmodhi4_ep>

000021de <__udivmodhi4_loop>:
    21de:	aa 1f       	adc	r26, r26
    21e0:	bb 1f       	adc	r27, r27
    21e2:	a6 17       	cp	r26, r22
    21e4:	b7 07       	cpc	r27, r23
    21e6:	10 f0       	brcs	.+4      	; 0x21ec <__udivmodhi4_ep>
    21e8:	a6 1b       	sub	r26, r22
    21ea:	b7 0b       	sbc	r27, r23

000021ec <__udivmodhi4_ep>:
    21ec:	88 1f       	adc	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	5a 95       	dec	r21
    21f2:	a9 f7       	brne	.-22     	; 0x21de <__udivmodhi4_loop>
    21f4:	80 95       	com	r24
    21f6:	90 95       	com	r25
    21f8:	bc 01       	movw	r22, r24
    21fa:	cd 01       	movw	r24, r26
    21fc:	08 95       	ret

000021fe <abort>:
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	f8 94       	cli
    2204:	00 c0       	rjmp	.+0      	; 0x2206 <_exit>

00002206 <_exit>:
    2206:	f8 94       	cli

00002208 <__stop_program>:
    2208:	ff cf       	rjmp	.-2      	; 0x2208 <__stop_program>
