
230724_Main IMU sensing code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000013e4  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800124  00800124  0000149c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002112  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c93  00000000  00000000  0000370e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e9d  00000000  00000000  000043a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00005240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000751  00000000  00000000  000055cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017d7  00000000  00000000  00005d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000074f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c1       	rjmp	.+890    	; 0x3a4 <__vector_10>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ee       	ldi	r30, 0xE4	; 228
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 32       	cpi	r26, 0x24	; 36
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e2       	ldi	r26, 0x24	; 36
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 39       	cpi	r26, 0x98	; 152
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	49 d4       	rcall	.+2194   	; 0x956 <main>
      c4:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <i2c_init>:
//	input:
//		hz - data transfer rate in Hz
//============================================
void i2c_init(int32_t hz)
{
	TWSR = 0x00;
      ca:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	//TWSR = 1<<TWPS0;		// 비트율 프리스케일러값을 1로 한다.

	// 비트율 설정
	TWBR = 0x0c;
      ce:	8c e0       	ldi	r24, 0x0C	; 12
      d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
      d4:	08 95       	ret

000000d6 <i2c_write_a_byte>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_write_a_byte(uint8_t i2c_addr, uint8_t data, int with_stop)
{
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	8a 01       	movw	r16, r20
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
      e0:	88 0f       	add	r24, r24
      e2:	2a e0       	ldi	r18, 0x0A	; 10
      e4:	30 e0       	ldi	r19, 0x00	; 0
{
	int time_out = TIME_OUT_CNT;
	 
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
      e6:	e4 e7       	ldi	r30, 0x74	; 116
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	54 ea       	ldi	r21, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
      ec:	a1 e7       	ldi	r26, 0x71	; 113
      ee:	b0 e0       	ldi	r27, 0x00	; 0
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
      f0:	c3 e7       	ldi	r28, 0x73	; 115
      f2:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
      f4:	44 e8       	ldi	r20, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
      f6:	74 e9       	ldi	r23, 0x94	; 148
{
	int time_out = TIME_OUT_CNT;
	 
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
      f8:	50 83       	st	Z, r21
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
      fa:	90 81       	ld	r25, Z
      fc:	99 23       	and	r25, r25
      fe:	ec f7       	brge	.-6      	; 0xfa <i2c_write_a_byte+0x24>
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     100:	9c 91       	ld	r25, X
     102:	98 7f       	andi	r25, 0xF8	; 248
     104:	98 30       	cpi	r25, 0x08	; 8
     106:	89 f5       	brne	.+98     	; 0x16a <i2c_write_a_byte+0x94>
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
     108:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     10a:	40 83       	st	Z, r20
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
     10c:	90 81       	ld	r25, Z
     10e:	99 23       	and	r25, r25
     110:	ec f7       	brge	.-6      	; 0x10c <i2c_write_a_byte+0x36>
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
     112:	9c 91       	ld	r25, X
     114:	98 7f       	andi	r25, 0xF8	; 248
     116:	98 31       	cpi	r25, 0x18	; 24
     118:	61 f0       	breq	.+24     	; 0x132 <i2c_write_a_byte+0x5c>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     11a:	70 83       	st	Z, r23
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     11c:	90 81       	ld	r25, Z
     11e:	94 fd       	sbrc	r25, 4
     120:	fd cf       	rjmp	.-6      	; 0x11c <i2c_write_a_byte+0x46>
     122:	21 50       	subi	r18, 0x01	; 1
     124:	31 09       	sbc	r19, r1

			time_out--;
			if(time_out <= 0) return -2;
     126:	21 f1       	breq	.+72     	; 0x170 <i2c_write_a_byte+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     128:	95 e3       	ldi	r25, 0x35	; 53
     12a:	9a 95       	dec	r25
     12c:	f1 f7       	brne	.-4      	; 0x12a <i2c_write_a_byte+0x54>
     12e:	00 00       	nop
     130:	e3 cf       	rjmp	.-58     	; 0xf8 <i2c_write_a_byte+0x22>
	}

	//--------------------------------------------------------
	// write i-th data to slave
	//--------------------------------------------------------
	TWDR = data;
     132:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     136:	84 e8       	ldi	r24, 0x84	; 132
     138:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));			// wait until data is sent.
     13c:	e4 e7       	ldi	r30, 0x74	; 116
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	88 23       	and	r24, r24
     144:	ec f7       	brge	.-6      	; 0x140 <i2c_write_a_byte+0x6a>

	// check if ACK is received from slave after sending data
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     146:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	99 f4       	brne	.+38     	; 0x176 <i2c_write_a_byte+0xa0>
	
	//----------------------------------
	// send STOP condition
	//----------------------------------

	if(with_stop)
     150:	01 2b       	or	r16, r17
     152:	a1 f0       	breq	.+40     	; 0x17c <i2c_write_a_byte+0xa6>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     154:	84 e9       	ldi	r24, 0x94	; 148
     156:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
		while((TWCR & (1<<TWSTO)));					// wait until STOP condition is sent and release bus
     15a:	e4 e7       	ldi	r30, 0x74	; 116
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	84 fd       	sbrc	r24, 4
     162:	fd cf       	rjmp	.-6      	; 0x15e <i2c_write_a_byte+0x88>
	}

	return 0;
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0b c0       	rjmp	.+22     	; 0x180 <i2c_write_a_byte+0xaa>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	9f ef       	ldi	r25, 0xFF	; 255
     16e:	08 c0       	rjmp	.+16     	; 0x180 <i2c_write_a_byte+0xaa>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     170:	8e ef       	ldi	r24, 0xFE	; 254
     172:	9f ef       	ldi	r25, 0xFF	; 255
     174:	05 c0       	rjmp	.+10     	; 0x180 <i2c_write_a_byte+0xaa>
	TWCR = (1<<TWINT) | (1<<TWEN);			// send data
	while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

	// check if ACK is received from slave after sending data
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
		return -3;
     176:	8d ef       	ldi	r24, 0xFD	; 253
     178:	9f ef       	ldi	r25, 0xFF	; 255
     17a:	02 c0       	rjmp	.+4      	; 0x180 <i2c_write_a_byte+0xaa>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
		while((TWCR & (1<<TWSTO)));					// wait until STOP condition is sent and release bus
	}

	return 0;
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	08 95       	ret

0000018a <i2c_write_n_bytes>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_write_n_bytes(uint8_t i2c_addr, uint8_t *buffer, int n, int with_stop)
{
     18a:	af 92       	push	r10
     18c:	bf 92       	push	r11
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     19c:	e8 2e       	mov	r14, r24
     19e:	ee 0c       	add	r14, r14
     1a0:	aa e0       	ldi	r26, 0x0A	; 10
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     1a4:	e4 e7       	ldi	r30, 0x74	; 116
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	84 ea       	ldi	r24, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     1aa:	0f 2e       	mov	r0, r31
     1ac:	f1 e7       	ldi	r31, 0x71	; 113
     1ae:	af 2e       	mov	r10, r31
     1b0:	b1 2c       	mov	r11, r1
     1b2:	f0 2d       	mov	r31, r0
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     1b4:	03 e7       	ldi	r16, 0x73	; 115
     1b6:	10 e0       	ldi	r17, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     1b8:	0f 2e       	mov	r0, r31
     1ba:	f4 e8       	ldi	r31, 0x84	; 132
     1bc:	ff 2e       	mov	r15, r31
     1be:	f0 2d       	mov	r31, r0
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     1c0:	0f 2e       	mov	r0, r31
     1c2:	f4 e9       	ldi	r31, 0x94	; 148
     1c4:	df 2e       	mov	r13, r31
     1c6:	f0 2d       	mov	r31, r0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     1c8:	80 83       	st	Z, r24
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     1ca:	90 81       	ld	r25, Z
     1cc:	99 23       	and	r25, r25
     1ce:	ec f7       	brge	.-6      	; 0x1ca <i2c_write_n_bytes+0x40>
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     1d0:	e5 01       	movw	r28, r10
     1d2:	98 81       	ld	r25, Y
     1d4:	98 7f       	andi	r25, 0xF8	; 248
     1d6:	98 30       	cpi	r25, 0x08	; 8
     1d8:	09 f0       	breq	.+2      	; 0x1dc <i2c_write_n_bytes+0x52>
     1da:	40 c0       	rjmp	.+128    	; 0x25c <i2c_write_n_bytes+0xd2>
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     1dc:	e8 01       	movw	r28, r16
     1de:	e8 82       	st	Y, r14
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     1e0:	f0 82       	st	Z, r15
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
     1e2:	90 81       	ld	r25, Z
     1e4:	99 23       	and	r25, r25
     1e6:	ec f7       	brge	.-6      	; 0x1e2 <i2c_write_n_bytes+0x58>
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
     1e8:	e5 01       	movw	r28, r10
     1ea:	98 81       	ld	r25, Y
     1ec:	98 7f       	andi	r25, 0xF8	; 248
     1ee:	98 31       	cpi	r25, 0x18	; 24
     1f0:	21 f4       	brne	.+8      	; 0x1fa <i2c_write_n_bytes+0x70>
		{
			break;
		}
	}

	for(i=0; i<n; i++)
     1f2:	14 16       	cp	r1, r20
     1f4:	15 06       	cpc	r1, r21
     1f6:	64 f0       	brlt	.+24     	; 0x210 <i2c_write_n_bytes+0x86>
     1f8:	24 c0       	rjmp	.+72     	; 0x242 <i2c_write_n_bytes+0xb8>
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     1fa:	d0 82       	st	Z, r13
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     1fc:	90 81       	ld	r25, Z
     1fe:	94 fd       	sbrc	r25, 4
     200:	fd cf       	rjmp	.-6      	; 0x1fc <i2c_write_n_bytes+0x72>
     202:	11 97       	sbiw	r26, 0x01	; 1

			time_out--;
			if(time_out <= 0) return -2;
     204:	71 f1       	breq	.+92     	; 0x262 <i2c_write_n_bytes+0xd8>
     206:	d5 e3       	ldi	r29, 0x35	; 53
     208:	da 95       	dec	r29
     20a:	f1 f7       	brne	.-4      	; 0x208 <i2c_write_n_bytes+0x7e>
     20c:	00 00       	nop
     20e:	dc cf       	rjmp	.-72     	; 0x1c8 <i2c_write_n_bytes+0x3e>
     210:	db 01       	movw	r26, r22
     212:	46 0f       	add	r20, r22
     214:	57 1f       	adc	r21, r23
	for(i=0; i<n; i++)
	{
		//--------------------------------------------------------
		// write i-th data to slave
		//--------------------------------------------------------
		TWDR = buffer[i];
     216:	63 e7       	ldi	r22, 0x73	; 115
     218:	70 e0       	ldi	r23, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     21a:	e4 e7       	ldi	r30, 0x74	; 116
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	94 e8       	ldi	r25, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     220:	01 e7       	ldi	r16, 0x71	; 113
     222:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<n; i++)
	{
		//--------------------------------------------------------
		// write i-th data to slave
		//--------------------------------------------------------
		TWDR = buffer[i];
     224:	8d 91       	ld	r24, X+
     226:	eb 01       	movw	r28, r22
     228:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     22a:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.
     22c:	80 81       	ld	r24, Z
     22e:	88 23       	and	r24, r24
     230:	ec f7       	brge	.-6      	; 0x22c <i2c_write_n_bytes+0xa2>

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     232:	e8 01       	movw	r28, r16
     234:	88 81       	ld	r24, Y
     236:	88 7f       	andi	r24, 0xF8	; 248
     238:	88 32       	cpi	r24, 0x28	; 40
     23a:	b1 f4       	brne	.+44     	; 0x268 <i2c_write_n_bytes+0xde>
		{
			break;
		}
	}

	for(i=0; i<n; i++)
     23c:	a4 17       	cp	r26, r20
     23e:	b5 07       	cpc	r27, r21
     240:	89 f7       	brne	.-30     	; 0x224 <i2c_write_n_bytes+0x9a>
	}
	
	//----------------------------------
	// send STOP condition
	//----------------------------------
	if(with_stop)
     242:	23 2b       	or	r18, r19
     244:	a1 f0       	breq	.+40     	; 0x26e <i2c_write_n_bytes+0xe4>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     246:	84 e9       	ldi	r24, 0x94	; 148
     248:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
		while((TWCR & (1<<TWSTO)));				// wait until STOP condition is sent.
     24c:	e4 e7       	ldi	r30, 0x74	; 116
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	84 fd       	sbrc	r24, 4
     254:	fd cf       	rjmp	.-6      	; 0x250 <i2c_write_n_bytes+0xc6>
	}

	return 0;
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0b c0       	rjmp	.+22     	; 0x272 <i2c_write_n_bytes+0xe8>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	9f ef       	ldi	r25, 0xFF	; 255
     260:	08 c0       	rjmp	.+16     	; 0x272 <i2c_write_n_bytes+0xe8>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     262:	8e ef       	ldi	r24, 0xFE	; 254
     264:	9f ef       	ldi	r25, 0xFF	; 255
     266:	05 c0       	rjmp	.+10     	; 0x272 <i2c_write_n_bytes+0xe8>
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
			return -3;
     268:	8d ef       	ldi	r24, 0xFD	; 253
     26a:	9f ef       	ldi	r25, 0xFF	; 255
     26c:	02 c0       	rjmp	.+4      	; 0x272 <i2c_write_n_bytes+0xe8>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
		while((TWCR & (1<<TWSTO)));				// wait until STOP condition is sent.
	}

	return 0;
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	bf 90       	pop	r11
     282:	af 90       	pop	r10
     284:	08 95       	ret

00000286 <i2c_read_n_bytes>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_read_n_bytes(uint8_t i2c_addr, uint8_t *data, int n)
{
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     292:	88 0f       	add	r24, r24
     294:	81 60       	ori	r24, 0x01	; 1
     296:	2a e0       	ldi	r18, 0x0A	; 10
     298:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
     29a:	e4 e7       	ldi	r30, 0x74	; 116
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	14 ea       	ldi	r17, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     2a0:	a1 e7       	ldi	r26, 0x71	; 113
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     2a4:	c3 e7       	ldi	r28, 0x73	; 115
     2a6:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
     2a8:	04 e8       	ldi	r16, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     2aa:	0f 2e       	mov	r0, r31
     2ac:	f4 e9       	ldi	r31, 0x94	; 148
     2ae:	ff 2e       	mov	r15, r31
     2b0:	f0 2d       	mov	r31, r0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
     2b2:	10 83       	st	Z, r17
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     2b4:	90 81       	ld	r25, Z
     2b6:	99 23       	and	r25, r25
     2b8:	ec f7       	brge	.-6      	; 0x2b4 <i2c_read_n_bytes+0x2e>
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     2ba:	9c 91       	ld	r25, X
     2bc:	98 7f       	andi	r25, 0xF8	; 248
     2be:	98 30       	cpi	r25, 0x08	; 8
     2c0:	29 f0       	breq	.+10     	; 0x2cc <i2c_read_n_bytes+0x46>
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
     2c2:	9c 91       	ld	r25, X
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     2c4:	98 7f       	andi	r25, 0xF8	; 248
     2c6:	90 31       	cpi	r25, 0x10	; 16
     2c8:	09 f0       	breq	.+2      	; 0x2cc <i2c_read_n_bytes+0x46>
     2ca:	5a c0       	rjmp	.+180    	; 0x380 <i2c_read_n_bytes+0xfa>
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     2cc:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
     2ce:	00 83       	st	Z, r16
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
     2d0:	90 81       	ld	r25, Z
     2d2:	99 23       	and	r25, r25
     2d4:	ec f7       	brge	.-6      	; 0x2d0 <i2c_read_n_bytes+0x4a>
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
     2d6:	9c 91       	ld	r25, X
     2d8:	98 7f       	andi	r25, 0xF8	; 248
     2da:	90 34       	cpi	r25, 0x40	; 64
     2dc:	41 f4       	brne	.+16     	; 0x2ee <i2c_read_n_bytes+0x68>
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     2de:	41 50       	subi	r20, 0x01	; 1
     2e0:	51 09       	sbc	r21, r1
     2e2:	14 16       	cp	r1, r20
     2e4:	15 06       	cpc	r1, r21
     2e6:	84 f0       	brlt	.+32     	; 0x308 <i2c_read_n_bytes+0x82>
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	2b c0       	rjmp	.+86     	; 0x344 <i2c_read_n_bytes+0xbe>
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     2ee:	f0 82       	st	Z, r15
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     2f0:	90 81       	ld	r25, Z
     2f2:	94 fd       	sbrc	r25, 4
     2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <i2c_read_n_bytes+0x6a>
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	31 09       	sbc	r19, r1

			time_out--;
			if(time_out <= 0) return -2;
     2fa:	09 f4       	brne	.+2      	; 0x2fe <i2c_read_n_bytes+0x78>
     2fc:	44 c0       	rjmp	.+136    	; 0x386 <i2c_read_n_bytes+0x100>
     2fe:	95 e3       	ldi	r25, 0x35	; 53
     300:	9a 95       	dec	r25
     302:	f1 f7       	brne	.-4      	; 0x300 <i2c_read_n_bytes+0x7a>
     304:	00 00       	nop
     306:	d5 cf       	rjmp	.-86     	; 0x2b2 <i2c_read_n_bytes+0x2c>
     308:	db 01       	movw	r26, r22
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
	{
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
     30e:	e4 e7       	ldi	r30, 0x74	; 116
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
     314:	0f 2e       	mov	r0, r31
     316:	f1 e7       	ldi	r31, 0x71	; 113
     318:	ef 2e       	mov	r14, r31
     31a:	f1 2c       	mov	r15, r1
     31c:	f0 2d       	mov	r31, r0
			return -6;
		
		data[i] = TWDR;								// read data.
     31e:	03 e7       	ldi	r16, 0x73	; 115
     320:	10 e0       	ldi	r17, 0x00	; 0
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
	{
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
     322:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
     324:	80 81       	ld	r24, Z
     326:	88 23       	and	r24, r24
     328:	ec f7       	brge	.-6      	; 0x324 <i2c_read_n_bytes+0x9e>
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
     32a:	e7 01       	movw	r28, r14
     32c:	88 81       	ld	r24, Y
     32e:	88 7f       	andi	r24, 0xF8	; 248
     330:	80 35       	cpi	r24, 0x50	; 80
     332:	61 f5       	brne	.+88     	; 0x38c <i2c_read_n_bytes+0x106>
			return -6;
		
		data[i] = TWDR;								// read data.
     334:	e8 01       	movw	r28, r16
     336:	88 81       	ld	r24, Y
     338:	8d 93       	st	X+, r24
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     33a:	2f 5f       	subi	r18, 0xFF	; 255
     33c:	3f 4f       	sbci	r19, 0xFF	; 255
     33e:	24 17       	cp	r18, r20
     340:	35 07       	cpc	r19, r21
     342:	7c f3       	brlt	.-34     	; 0x322 <i2c_read_n_bytes+0x9c>
		data[i] = TWDR;								// read data.
	}

	// if read the last byte, send NACK.

	TWCR = (1<<TWINT) | (1<<TWEN);					// after receiving data, do end NACK
     344:	84 e8       	ldi	r24, 0x84	; 132
     346:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));					// wait until receiving data.
     34a:	e4 e7       	ldi	r30, 0x74	; 116
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	88 23       	and	r24, r24
     352:	ec f7       	brge	.-6      	; 0x34e <i2c_read_n_bytes+0xc8>
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK)
     354:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     358:	88 7f       	andi	r24, 0xF8	; 248
     35a:	88 35       	cpi	r24, 0x58	; 88
     35c:	d1 f4       	brne	.+52     	; 0x392 <i2c_read_n_bytes+0x10c>
		return -7;
	
	data[i] = TWDR;									// read the last data
     35e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     362:	fb 01       	movw	r30, r22
     364:	e2 0f       	add	r30, r18
     366:	f3 1f       	adc	r31, r19
     368:	80 83       	st	Z, r24

	//-----------------------------
	// send STOP condition.
	//-----------------------------

	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     36a:	84 e9       	ldi	r24, 0x94	; 148
     36c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(TWCR & (1<<TWSTO));						// wait until STOP condition is sent
     370:	e4 e7       	ldi	r30, 0x74	; 116
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	84 fd       	sbrc	r24, 4
     378:	fd cf       	rjmp	.-6      	; 0x374 <i2c_read_n_bytes+0xee>
	
	return 0;
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0b c0       	rjmp	.+22     	; 0x396 <i2c_read_n_bytes+0x110>
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	08 c0       	rjmp	.+16     	; 0x396 <i2c_read_n_bytes+0x110>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     386:	8e ef       	ldi	r24, 0xFE	; 254
     388:	9f ef       	ldi	r25, 0xFF	; 255
     38a:	05 c0       	rjmp	.+10     	; 0x396 <i2c_read_n_bytes+0x110>
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
			return -6;
     38c:	8a ef       	ldi	r24, 0xFA	; 250
     38e:	9f ef       	ldi	r25, 0xFF	; 255
     390:	02 c0       	rjmp	.+4      	; 0x396 <i2c_read_n_bytes+0x110>

	TWCR = (1<<TWINT) | (1<<TWEN);					// after receiving data, do end NACK
	while(!(TWCR & (1<<TWINT)));					// wait until receiving data.
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK)
		return -7;
     392:	89 ef       	ldi	r24, 0xF9	; 249
     394:	9f ef       	ldi	r25, 0xFF	; 255

	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
	while(TWCR & (1<<TWSTO));						// wait until STOP condition is sent
	
	return 0;
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	08 95       	ret

000003a4 <__vector_10>:

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );         //데이터 수신 대기
	return UDR1;
}
     3a4:	1f 92       	push	r1
     3a6:	0f 92       	push	r0
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <UART1_init>:
     3b8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     3bc:	8f ec       	ldi	r24, 0xCF	; 207
     3be:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     3c2:	eb e9       	ldi	r30, 0x9B	; 155
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	82 60       	ori	r24, 0x02	; 2
     3ca:	80 83       	st	Z, r24
     3cc:	ed e9       	ldi	r30, 0x9D	; 157
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	86 60       	ori	r24, 0x06	; 6
     3d4:	80 83       	st	Z, r24
     3d6:	ea e9       	ldi	r30, 0x9A	; 154
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	80 61       	ori	r24, 0x10	; 16
     3de:	80 83       	st	Z, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	88 60       	ori	r24, 0x08	; 8
     3e4:	80 83       	st	Z, r24
     3e6:	08 95       	ret

000003e8 <UART1_transmit>:
     3e8:	eb e9       	ldi	r30, 0x9B	; 155
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	90 81       	ld	r25, Z
     3ee:	95 ff       	sbrs	r25, 5
     3f0:	fd cf       	rjmp	.-6      	; 0x3ec <UART1_transmit+0x4>
     3f2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     3f6:	08 95       	ret

000003f8 <UART1_print16b>:

void UART1_print16b(int16_t no)
{
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	00 d0       	rcall	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	00 d0       	rcall	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 d0       	rcall	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
	char numStr[6]="0";
     40e:	20 e3       	ldi	r18, 0x30	; 48
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	3a 83       	std	Y+2, r19	; 0x02
     414:	29 83       	std	Y+1, r18	; 0x01
     416:	fe 01       	movw	r30, r28
     418:	33 96       	adiw	r30, 0x03	; 3
     41a:	24 e0       	ldi	r18, 0x04	; 4
     41c:	df 01       	movw	r26, r30
     41e:	1d 92       	st	X+, r1
     420:	2a 95       	dec	r18
     422:	e9 f7       	brne	.-6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	int mino=0;
	int index=0;
	
	int i=0;
	if(no>0)
     424:	18 16       	cp	r1, r24
     426:	19 06       	cpc	r1, r25
     428:	0c f0       	brlt	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	49 c0       	rjmp	.+146    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     42c:	32 97       	sbiw	r30, 0x02	; 2
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0;no!=0;i++)
		{
			numStr[i]=no%10+48;
     432:	0f 2e       	mov	r0, r31
     434:	fa e0       	ldi	r31, 0x0A	; 10
     436:	ef 2e       	mov	r14, r31
     438:	f1 2c       	mov	r15, r1
     43a:	f0 2d       	mov	r31, r0
     43c:	01 c0       	rjmp	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	int index=0;
	
	int i=0;
	if(no>0)
	{
		for(i=0;no!=0;i++)
     43e:	89 01       	movw	r16, r18
		{
			numStr[i]=no%10+48;
     440:	b7 01       	movw	r22, r14
     442:	a7 d7       	rcall	.+3918   	; 0x1392 <__divmodhi4>
     444:	80 5d       	subi	r24, 0xD0	; 208
     446:	81 93       	st	Z+, r24
			no=no/10;
     448:	86 2f       	mov	r24, r22
     44a:	97 2f       	mov	r25, r23
	int index=0;
	
	int i=0;
	if(no>0)
	{
		for(i=0;no!=0;i++)
     44c:	98 01       	movw	r18, r16
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	a1 f7       	brne	.-24     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			numStr[i]=no%10+48;
			no=no/10;
			
		}
		numStr[i]='\0';
     456:	fe 01       	movw	r30, r28
     458:	e2 0f       	add	r30, r18
     45a:	f3 1f       	adc	r31, r19
     45c:	11 82       	std	Z+1, r1	; 0x01
     45e:	1f c0       	rjmp	.+62     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
		index=i-1;
	}if(no<0)
	{
		mino=0-no;
     460:	91 95       	neg	r25
     462:	81 95       	neg	r24
     464:	91 09       	sbc	r25, r1
		for(i=0;mino!=0;i++)
     466:	89 f0       	breq	.+34     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     468:	fe 01       	movw	r30, r28
     46a:	31 96       	adiw	r30, 0x01	; 1
     46c:	00 e0       	ldi	r16, 0x00	; 0
     46e:	10 e0       	ldi	r17, 0x00	; 0
		{
			numStr[i]=mino%10+48;
     470:	2a e0       	ldi	r18, 0x0A	; 10
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	b9 01       	movw	r22, r18
     476:	8d d7       	rcall	.+3866   	; 0x1392 <__divmodhi4>
     478:	80 5d       	subi	r24, 0xD0	; 208
     47a:	81 93       	st	Z+, r24
			mino=mino/10;
     47c:	86 2f       	mov	r24, r22
     47e:	97 2f       	mov	r25, r23
		numStr[i]='\0';
		index=i-1;
	}if(no<0)
	{
		mino=0-no;
		for(i=0;mino!=0;i++)
     480:	0f 5f       	subi	r16, 0xFF	; 255
     482:	1f 4f       	sbci	r17, 0xFF	; 255
     484:	00 97       	sbiw	r24, 0x00	; 0
     486:	b1 f7       	brne	.-20     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     488:	02 c0       	rjmp	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48a:	00 e0       	ldi	r16, 0x00	; 0
     48c:	10 e0       	ldi	r17, 0x00	; 0
		{
			numStr[i]=mino%10+48;
			mino=mino/10;
		}
		numStr[i]='\0';
     48e:	fe 01       	movw	r30, r28
     490:	e0 0f       	add	r30, r16
     492:	f1 1f       	adc	r31, r17
     494:	11 82       	std	Z+1, r1	; 0x01
		index=i-1;
     496:	01 50       	subi	r16, 0x01	; 1
     498:	11 09       	sbc	r17, r1
		UART1_transmit('-');
     49a:	8d e2       	ldi	r24, 0x2D	; 45
     49c:	a5 df       	rcall	.-182    	; 0x3e8 <UART1_transmit>
	}
	for(int j=index;j>=0;j--)
     49e:	11 23       	and	r17, r17
     4a0:	9c f0       	brlt	.+38     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4a2:	ce 01       	movw	r24, r28
     4a4:	80 0f       	add	r24, r16
     4a6:	91 1f       	adc	r25, r17
     4a8:	fc 01       	movw	r30, r24
     4aa:	32 96       	adiw	r30, 0x02	; 2
     4ac:	7f 01       	movw	r14, r30
	{
		UART1_transmit(numStr[j]);
     4ae:	d7 01       	movw	r26, r14
     4b0:	8e 91       	ld	r24, -X
     4b2:	7d 01       	movw	r14, r26
     4b4:	99 df       	rcall	.-206    	; 0x3e8 <UART1_transmit>
		}
		numStr[i]='\0';
		index=i-1;
		UART1_transmit('-');
	}
	for(int j=index;j>=0;j--)
     4b6:	01 50       	subi	r16, 0x01	; 1
     4b8:	11 09       	sbc	r17, r1
     4ba:	ca f7       	brpl	.-14     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			no=no/10;
			
		}
		numStr[i]='\0';
		index=i-1;
	}if(no<0)
     4be:	99 23       	and	r25, r25
     4c0:	7c f2       	brlt	.-98     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

void UART1_print16b(int16_t no)
{
	char numStr[6]="0";
	int mino=0;
	int index=0;
     4c2:	00 e0       	ldi	r16, 0x00	; 0
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	ed cf       	rjmp	.-38     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	for(int j=index;j>=0;j--)
	{
		UART1_transmit(numStr[j]);
	}
	return;
}
     4c8:	26 96       	adiw	r28, 0x06	; 6
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	08 95       	ret

000004e2 <__vector_16>:
float f_ay_now =0;
float f_az_now =0;


ISR(TIMER0_OVF_vect) 				// 타이머0 오버플로 인터럽트 서비스루틴
{
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	0b b6       	in	r0, 0x3b	; 59
     4ee:	0f 92       	push	r0
     4f0:	4f 92       	push	r4
     4f2:	5f 92       	push	r5
     4f4:	6f 92       	push	r6
     4f6:	7f 92       	push	r7
     4f8:	8f 92       	push	r8
     4fa:	9f 92       	push	r9
     4fc:	af 92       	push	r10
     4fe:	bf 92       	push	r11
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	2f 93       	push	r18
     50a:	3f 93       	push	r19
     50c:	4f 93       	push	r20
     50e:	5f 93       	push	r21
     510:	6f 93       	push	r22
     512:	7f 93       	push	r23
     514:	8f 93       	push	r24
     516:	9f 93       	push	r25
     518:	af 93       	push	r26
     51a:	bf 93       	push	r27
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	28 97       	sbiw	r28, 0x08	; 8
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

	TCNT0 = 6;					    // 16msec 후에 인터럽트발생
     52e:	86 e0       	ldi	r24, 0x06	; 6
     530:	82 bf       	out	0x32, r24	; 50
	n_enter++;						// 인터럽트 횟수 증가
     532:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <n_enter>
     536:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <n_enter+0x1>
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <n_enter+0x1>
     540:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <n_enter>
	MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
     544:	6a e7       	ldi	r22, 0x7A	; 122
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	86 e8       	ldi	r24, 0x86	; 134
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	1c d4       	rcall	.+2104   	; 0xd86 <MPU9250I2CReadIMU_f>
	gyroxx=-(gyro2_f[0]-avgxx);
     54e:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <avgxx>
     552:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <avgxx+0x1>
     556:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <avgxx+0x2>
     55a:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <avgxx+0x3>
     55e:	aa e7       	ldi	r26, 0x7A	; 122
     560:	b1 e0       	ldi	r27, 0x01	; 1
     562:	6d 91       	ld	r22, X+
     564:	7d 91       	ld	r23, X+
     566:	8d 91       	ld	r24, X+
     568:	9c 91       	ld	r25, X
     56a:	24 d5       	rcall	.+2632   	; 0xfb4 <__subsf3>
     56c:	2b 01       	movw	r4, r22
     56e:	3c 01       	movw	r6, r24
     570:	77 fa       	bst	r7, 7
     572:	70 94       	com	r7
     574:	77 f8       	bld	r7, 7
     576:	70 94       	com	r7
     578:	40 92 74 01 	sts	0x0174, r4	; 0x800174 <gyroxx>
     57c:	50 92 75 01 	sts	0x0175, r5	; 0x800175 <gyroxx+0x1>
     580:	60 92 76 01 	sts	0x0176, r6	; 0x800176 <gyroxx+0x2>
     584:	70 92 77 01 	sts	0x0177, r7	; 0x800177 <gyroxx+0x3>
	gyroyy=-(gyro2_f[1]-avgyy);
     588:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <avgyy>
     58c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <avgyy+0x1>
     590:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <avgyy+0x2>
     594:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <avgyy+0x3>
     598:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <gyro2_f+0x4>
     59c:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <gyro2_f+0x5>
     5a0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <gyro2_f+0x6>
     5a4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <gyro2_f+0x7>
     5a8:	05 d5       	rcall	.+2570   	; 0xfb4 <__subsf3>
     5aa:	4b 01       	movw	r8, r22
     5ac:	5c 01       	movw	r10, r24
     5ae:	b7 fa       	bst	r11, 7
     5b0:	b0 94       	com	r11
     5b2:	b7 f8       	bld	r11, 7
     5b4:	b0 94       	com	r11
     5b6:	80 92 70 01 	sts	0x0170, r8	; 0x800170 <gyroyy>
     5ba:	90 92 71 01 	sts	0x0171, r9	; 0x800171 <gyroyy+0x1>
     5be:	a0 92 72 01 	sts	0x0172, r10	; 0x800172 <gyroyy+0x2>
     5c2:	b0 92 73 01 	sts	0x0173, r11	; 0x800173 <gyroyy+0x3>
	gyrozz=-(gyro2_f[2]-avgzz);
     5c6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <avgzz>
     5ca:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <avgzz+0x1>
     5ce:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <avgzz+0x2>
     5d2:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <avgzz+0x3>
     5d6:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <gyro2_f+0x8>
     5da:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <gyro2_f+0x9>
     5de:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gyro2_f+0xa>
     5e2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <gyro2_f+0xb>
     5e6:	e6 d4       	rcall	.+2508   	; 0xfb4 <__subsf3>
     5e8:	6b 01       	movw	r12, r22
     5ea:	7c 01       	movw	r14, r24
     5ec:	f7 fa       	bst	r15, 7
     5ee:	f0 94       	com	r15
     5f0:	f7 f8       	bld	r15, 7
     5f2:	f0 94       	com	r15
     5f4:	c0 92 6c 01 	sts	0x016C, r12	; 0x80016c <gyrozz>
     5f8:	d0 92 6d 01 	sts	0x016D, r13	; 0x80016d <gyrozz+0x1>
     5fc:	e0 92 6e 01 	sts	0x016E, r14	; 0x80016e <gyrozz+0x2>
     600:	f0 92 6f 01 	sts	0x016F, r15	; 0x80016f <gyrozz+0x3>
	
	f_gx_now=gyroxx-alpha*(gyroxx-f_gx_last);
     604:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     608:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     60c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     610:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	9a 83       	std	Y+2, r25	; 0x02
     618:	ab 83       	std	Y+3, r26	; 0x03
     61a:	bc 83       	std	Y+4, r27	; 0x04
     61c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <f_gx_last>
     620:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <f_gx_last+0x1>
     624:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <f_gx_last+0x2>
     628:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <f_gx_last+0x3>
     62c:	c3 01       	movw	r24, r6
     62e:	b2 01       	movw	r22, r4
     630:	c1 d4       	rcall	.+2434   	; 0xfb4 <__subsf3>
     632:	29 81       	ldd	r18, Y+1	; 0x01
     634:	3a 81       	ldd	r19, Y+2	; 0x02
     636:	4b 81       	ldd	r20, Y+3	; 0x03
     638:	5c 81       	ldd	r21, Y+4	; 0x04
     63a:	48 d6       	rcall	.+3216   	; 0x12cc <__mulsf3>
     63c:	9b 01       	movw	r18, r22
     63e:	ac 01       	movw	r20, r24
     640:	c3 01       	movw	r24, r6
     642:	b2 01       	movw	r22, r4
     644:	b7 d4       	rcall	.+2414   	; 0xfb4 <__subsf3>
     646:	2b 01       	movw	r4, r22
     648:	3c 01       	movw	r6, r24
     64a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <f_gx_now>
     64e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <f_gx_now+0x1>
     652:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <f_gx_now+0x2>
     656:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <f_gx_now+0x3>
	f_gy_now=gyroyy-alpha*(gyroyy-f_gy_last);
     65a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <f_gy_last>
     65e:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <f_gy_last+0x1>
     662:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <f_gy_last+0x2>
     666:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <f_gy_last+0x3>
     66a:	c5 01       	movw	r24, r10
     66c:	b4 01       	movw	r22, r8
     66e:	a2 d4       	rcall	.+2372   	; 0xfb4 <__subsf3>
     670:	29 81       	ldd	r18, Y+1	; 0x01
     672:	3a 81       	ldd	r19, Y+2	; 0x02
     674:	4b 81       	ldd	r20, Y+3	; 0x03
     676:	5c 81       	ldd	r21, Y+4	; 0x04
     678:	29 d6       	rcall	.+3154   	; 0x12cc <__mulsf3>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	c5 01       	movw	r24, r10
     680:	b4 01       	movw	r22, r8
     682:	98 d4       	rcall	.+2352   	; 0xfb4 <__subsf3>
     684:	4b 01       	movw	r8, r22
     686:	5c 01       	movw	r10, r24
     688:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <f_gy_now>
     68c:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <f_gy_now+0x1>
     690:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <f_gy_now+0x2>
     694:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <f_gy_now+0x3>
	f_gz_now=gyrozz-alpha*(gyrozz-f_gz_last);
     698:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <f_gz_last>
     69c:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <f_gz_last+0x1>
     6a0:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <f_gz_last+0x2>
     6a4:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <f_gz_last+0x3>
     6a8:	c7 01       	movw	r24, r14
     6aa:	b6 01       	movw	r22, r12
     6ac:	83 d4       	rcall	.+2310   	; 0xfb4 <__subsf3>
     6ae:	29 81       	ldd	r18, Y+1	; 0x01
     6b0:	3a 81       	ldd	r19, Y+2	; 0x02
     6b2:	4b 81       	ldd	r20, Y+3	; 0x03
     6b4:	5c 81       	ldd	r21, Y+4	; 0x04
     6b6:	0a d6       	rcall	.+3092   	; 0x12cc <__mulsf3>
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
     6bc:	c7 01       	movw	r24, r14
     6be:	b6 01       	movw	r22, r12
     6c0:	79 d4       	rcall	.+2290   	; 0xfb4 <__subsf3>
     6c2:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <f_gz_now>
     6c6:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <f_gz_now+0x1>
     6ca:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <f_gz_now+0x2>
     6ce:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <f_gz_now+0x3>
	f_gx_last=f_gx_now;
     6d2:	40 92 50 01 	sts	0x0150, r4	; 0x800150 <f_gx_last>
     6d6:	50 92 51 01 	sts	0x0151, r5	; 0x800151 <f_gx_last+0x1>
     6da:	60 92 52 01 	sts	0x0152, r6	; 0x800152 <f_gx_last+0x2>
     6de:	70 92 53 01 	sts	0x0153, r7	; 0x800153 <f_gx_last+0x3>
	f_gy_last=f_gy_now;
     6e2:	80 92 4c 01 	sts	0x014C, r8	; 0x80014c <f_gy_last>
     6e6:	90 92 4d 01 	sts	0x014D, r9	; 0x80014d <f_gy_last+0x1>
     6ea:	a0 92 4e 01 	sts	0x014E, r10	; 0x80014e <f_gy_last+0x2>
     6ee:	b0 92 4f 01 	sts	0x014F, r11	; 0x80014f <f_gy_last+0x3>
	f_gz_last=f_gz_now;	
     6f2:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <f_gz_last>
     6f6:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <f_gz_last+0x1>
     6fa:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <f_gz_last+0x2>
     6fe:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <f_gz_last+0x3>
	UART1_print16b((int16_t)(f_gy_now*1000));
	UART1_transmit('\t');
	UART1_print16b((int16_t)(f_gz_now*1000));
	UART1_transmit('\n');	*/
	
	accelxx = acc2_f[0]-avgax;
     702:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <avgax>
     706:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <avgax+0x1>
     70a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <avgax+0x2>
     70e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <avgax+0x3>
     712:	a6 e8       	ldi	r26, 0x86	; 134
     714:	b1 e0       	ldi	r27, 0x01	; 1
     716:	6d 91       	ld	r22, X+
     718:	7d 91       	ld	r23, X+
     71a:	8d 91       	ld	r24, X+
     71c:	9c 91       	ld	r25, X
     71e:	4a d4       	rcall	.+2196   	; 0xfb4 <__subsf3>
     720:	2b 01       	movw	r4, r22
     722:	3c 01       	movw	r6, r24
     724:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <accelxx>
     728:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <accelxx+0x1>
     72c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <accelxx+0x2>
     730:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <accelxx+0x3>
	accelyy = acc2_f[1]-avgay;
     734:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <avgay>
     738:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <avgay+0x1>
     73c:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <avgay+0x2>
     740:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <avgay+0x3>
     744:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <acc2_f+0x4>
     748:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <acc2_f+0x5>
     74c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <acc2_f+0x6>
     750:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <acc2_f+0x7>
     754:	2f d4       	rcall	.+2142   	; 0xfb4 <__subsf3>
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
     75a:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <accelyy>
     75e:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <accelyy+0x1>
     762:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <accelyy+0x2>
     766:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <accelyy+0x3>
	accelzz = acc2_f[2]-avgaz;		
     76a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <avgaz>
     76e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <avgaz+0x1>
     772:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <avgaz+0x2>
     776:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <avgaz+0x3>
     77a:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <acc2_f+0x8>
     77e:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <acc2_f+0x9>
     782:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <acc2_f+0xa>
     786:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <acc2_f+0xb>
     78a:	14 d4       	rcall	.+2088   	; 0xfb4 <__subsf3>
     78c:	6d 83       	std	Y+5, r22	; 0x05
     78e:	7e 83       	std	Y+6, r23	; 0x06
     790:	8f 83       	std	Y+7, r24	; 0x07
     792:	98 87       	std	Y+8, r25	; 0x08
     794:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <accelzz>
     798:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <accelzz+0x1>
     79c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <accelzz+0x2>
     7a0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <accelzz+0x3>
	f_ax_now=accelxx-alpha*(accelxx-f_ax_last);
     7a4:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <f_ax_last>
     7a8:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <f_ax_last+0x1>
     7ac:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <f_ax_last+0x2>
     7b0:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <f_ax_last+0x3>
     7b4:	c3 01       	movw	r24, r6
     7b6:	b2 01       	movw	r22, r4
     7b8:	fd d3       	rcall	.+2042   	; 0xfb4 <__subsf3>
     7ba:	29 81       	ldd	r18, Y+1	; 0x01
     7bc:	3a 81       	ldd	r19, Y+2	; 0x02
     7be:	4b 81       	ldd	r20, Y+3	; 0x03
     7c0:	5c 81       	ldd	r21, Y+4	; 0x04
     7c2:	84 d5       	rcall	.+2824   	; 0x12cc <__mulsf3>
     7c4:	9b 01       	movw	r18, r22
     7c6:	ac 01       	movw	r20, r24
     7c8:	c3 01       	movw	r24, r6
     7ca:	b2 01       	movw	r22, r4
     7cc:	f3 d3       	rcall	.+2022   	; 0xfb4 <__subsf3>
     7ce:	2b 01       	movw	r4, r22
     7d0:	3c 01       	movw	r6, r24
     7d2:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <f_ax_now>
     7d6:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <f_ax_now+0x1>
     7da:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <f_ax_now+0x2>
     7de:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <f_ax_now+0x3>
	f_ay_now=accelyy-alpha*(accelyy-f_ay_last);
     7e2:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <f_ay_last>
     7e6:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <f_ay_last+0x1>
     7ea:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <f_ay_last+0x2>
     7ee:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <f_ay_last+0x3>
     7f2:	c5 01       	movw	r24, r10
     7f4:	b4 01       	movw	r22, r8
     7f6:	de d3       	rcall	.+1980   	; 0xfb4 <__subsf3>
     7f8:	29 81       	ldd	r18, Y+1	; 0x01
     7fa:	3a 81       	ldd	r19, Y+2	; 0x02
     7fc:	4b 81       	ldd	r20, Y+3	; 0x03
     7fe:	5c 81       	ldd	r21, Y+4	; 0x04
     800:	65 d5       	rcall	.+2762   	; 0x12cc <__mulsf3>
     802:	9b 01       	movw	r18, r22
     804:	ac 01       	movw	r20, r24
     806:	c5 01       	movw	r24, r10
     808:	b4 01       	movw	r22, r8
     80a:	d4 d3       	rcall	.+1960   	; 0xfb4 <__subsf3>
     80c:	4b 01       	movw	r8, r22
     80e:	5c 01       	movw	r10, r24
     810:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <f_ay_now>
     814:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <f_ay_now+0x1>
     818:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <f_ay_now+0x2>
     81c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <f_ay_now+0x3>
	f_az_now=accelzz-alpha*(accelzz-f_az_last);
     820:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <f_az_last>
     824:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <f_az_last+0x1>
     828:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <f_az_last+0x2>
     82c:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <f_az_last+0x3>
     830:	6d 81       	ldd	r22, Y+5	; 0x05
     832:	7e 81       	ldd	r23, Y+6	; 0x06
     834:	8f 81       	ldd	r24, Y+7	; 0x07
     836:	98 85       	ldd	r25, Y+8	; 0x08
     838:	bd d3       	rcall	.+1914   	; 0xfb4 <__subsf3>
     83a:	29 81       	ldd	r18, Y+1	; 0x01
     83c:	3a 81       	ldd	r19, Y+2	; 0x02
     83e:	4b 81       	ldd	r20, Y+3	; 0x03
     840:	5c 81       	ldd	r21, Y+4	; 0x04
     842:	44 d5       	rcall	.+2696   	; 0x12cc <__mulsf3>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	6d 81       	ldd	r22, Y+5	; 0x05
     84a:	7e 81       	ldd	r23, Y+6	; 0x06
     84c:	8f 81       	ldd	r24, Y+7	; 0x07
     84e:	98 85       	ldd	r25, Y+8	; 0x08
     850:	b1 d3       	rcall	.+1890   	; 0xfb4 <__subsf3>
     852:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <__data_end>
     856:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <__data_end+0x1>
     85a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end+0x2>
     85e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x3>
     862:	40 92 38 01 	sts	0x0138, r4	; 0x800138 <f_ax_last>
	f_ax_last=f_ax_now;
     866:	50 92 39 01 	sts	0x0139, r5	; 0x800139 <f_ax_last+0x1>
     86a:	60 92 3a 01 	sts	0x013A, r6	; 0x80013a <f_ax_last+0x2>
     86e:	70 92 3b 01 	sts	0x013B, r7	; 0x80013b <f_ax_last+0x3>
     872:	80 92 34 01 	sts	0x0134, r8	; 0x800134 <f_ay_last>
	f_ay_last=f_ay_now;
     876:	90 92 35 01 	sts	0x0135, r9	; 0x800135 <f_ay_last+0x1>
     87a:	a0 92 36 01 	sts	0x0136, r10	; 0x800136 <f_ay_last+0x2>
     87e:	b0 92 37 01 	sts	0x0137, r11	; 0x800137 <f_ay_last+0x3>
	f_az_last=f_az_now;
     882:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <f_az_last>
     886:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <f_az_last+0x1>
     88a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <f_az_last+0x2>
	
	if(n_enter>=25){
     88e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <f_az_last+0x3>
     892:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <n_enter>
     896:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <n_enter+0x1>
		UART1_print16b((int16_t)(f_ax_now*1000));
     89a:	49 97       	sbiw	r24, 0x19	; 25
     89c:	0c f4       	brge	.+2      	; 0x8a0 <__vector_16+0x3be>
     89e:	34 c0       	rjmp	.+104    	; 0x908 <__vector_16+0x426>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	4a e7       	ldi	r20, 0x7A	; 122
     8a6:	54 e4       	ldi	r21, 0x44	; 68
     8a8:	c3 01       	movw	r24, r6
     8aa:	b2 01       	movw	r22, r4
     8ac:	0f d5       	rcall	.+2590   	; 0x12cc <__mulsf3>
		UART1_transmit('\t');
     8ae:	4f d4       	rcall	.+2206   	; 0x114e <__fixsfsi>
     8b0:	cb 01       	movw	r24, r22
     8b2:	a2 dd       	rcall	.-1212   	; 0x3f8 <UART1_print16b>
		UART1_print16b((int16_t)(f_ay_now*1000));
     8b4:	89 e0       	ldi	r24, 0x09	; 9
     8b6:	98 dd       	rcall	.-1232   	; 0x3e8 <UART1_transmit>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	4a e7       	ldi	r20, 0x7A	; 122
     8be:	54 e4       	ldi	r21, 0x44	; 68
     8c0:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <f_ay_now>
     8c4:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <f_ay_now+0x1>
     8c8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <f_ay_now+0x2>
     8cc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <f_ay_now+0x3>
     8d0:	fd d4       	rcall	.+2554   	; 0x12cc <__mulsf3>
		UART1_transmit('\t');
     8d2:	3d d4       	rcall	.+2170   	; 0x114e <__fixsfsi>
     8d4:	cb 01       	movw	r24, r22
     8d6:	90 dd       	rcall	.-1248   	; 0x3f8 <UART1_print16b>
		UART1_print16b((int16_t)(f_az_now*1000));
     8d8:	89 e0       	ldi	r24, 0x09	; 9
     8da:	86 dd       	rcall	.-1268   	; 0x3e8 <UART1_transmit>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	4a e7       	ldi	r20, 0x7A	; 122
     8e2:	54 e4       	ldi	r21, 0x44	; 68
     8e4:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <__data_end>
     8e8:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <__data_end+0x1>
     8ec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end+0x2>
     8f0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x3>
     8f4:	eb d4       	rcall	.+2518   	; 0x12cc <__mulsf3>
     8f6:	2b d4       	rcall	.+2134   	; 0x114e <__fixsfsi>
     8f8:	cb 01       	movw	r24, r22
     8fa:	7e dd       	rcall	.-1284   	; 0x3f8 <UART1_print16b>
     8fc:	8a e0       	ldi	r24, 0x0A	; 10
		UART1_transmit('\n');	
     8fe:	74 dd       	rcall	.-1304   	; 0x3e8 <UART1_transmit>
     900:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <n_enter+0x1>
		n_enter=0;
     904:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <n_enter>
     908:	28 96       	adiw	r28, 0x08	; 8
     90a:	0f b6       	in	r0, 0x3f	; 63
//	UART1_transmit('\t');
//	UART1_print16b((int16_t)n_enter2);
//	UART1_transmit('\n');
	
	 
}
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	bf 90       	pop	r11
     93a:	af 90       	pop	r10
     93c:	9f 90       	pop	r9
     93e:	8f 90       	pop	r8
     940:	7f 90       	pop	r7
     942:	6f 90       	pop	r6
     944:	5f 90       	pop	r5
     946:	4f 90       	pop	r4
     948:	0f 90       	pop	r0
     94a:	0b be       	out	0x3b, r0	; 59
     94c:	0f 90       	pop	r0
     94e:	0f be       	out	0x3f, r0	; 63
     950:	0f 90       	pop	r0
     952:	1f 90       	pop	r1
     954:	18 95       	reti

00000956 <main>:
     956:	2f ef       	ldi	r18, 0xFF	; 255
     958:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     95a:	90 e3       	ldi	r25, 0x30	; 48
     95c:	21 50       	subi	r18, 0x01	; 1
     95e:	80 40       	sbci	r24, 0x00	; 0
     960:	90 40       	sbci	r25, 0x00	; 0
     962:	e1 f7       	brne	.-8      	; 0x95c <main+0x6>
     964:	00 c0       	rjmp	.+0      	; 0x966 <main+0x10>
     966:	00 00       	nop

int main(void)
{

	_delay_ms(1000);
	UART1_init();
     968:	27 dd       	rcall	.-1458   	; 0x3b8 <UART1_init>
	MPU9250I2CInit(400000);		
     96a:	60 e8       	ldi	r22, 0x80	; 128
     96c:	7a e1       	ldi	r23, 0x1A	; 26
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	48 d1       	rcall	.+656    	; 0xc04 <MPU9250I2CInit>
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	83 ed       	ldi	r24, 0xD3	; 211
     978:	90 e3       	ldi	r25, 0x30	; 48
     97a:	21 50       	subi	r18, 0x01	; 1
     97c:	80 40       	sbci	r24, 0x00	; 0
     97e:	90 40       	sbci	r25, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <main+0x24>
     982:	00 c0       	rjmp	.+0      	; 0x984 <main+0x2e>
     984:	00 00       	nop
	_delay_ms(1000);		
	
	TCCR0 = 0x00;
     986:	13 be       	out	0x33, r1	; 51
	//TCCR2 = 0x68;				        // 표준모드, 타이머 정지
	TCCR2 = 0x00;						// 함수 소요시간 계산
     988:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 6;
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	82 bf       	out	0x32, r24	; 50
	TCNT2 = 6;					        // 타이머 초기 값 설정
     98e:	84 bd       	out	0x24, r24	; 36
	//OCR2 = 250;
	
	//DDRB |= (1<<DDB7);
	// 인터럽트 설정
	TIMSK = (1<<TOIE0) || (1<<TOIE2);	// 타이머0,2 오버플로 인터럽트 허용
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	87 bf       	out	0x37, r24	; 55
     994:	02 e0       	ldi	r16, 0x02	; 2
     996:	18 e0       	ldi	r17, 0x08	; 8
    int i = 0;

	for( i = 0 ; i<2050 ; i++ )
	{
		
		MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
     998:	6a e7       	ldi	r22, 0x7A	; 122
     99a:	71 e0       	ldi	r23, 0x01	; 1
     99c:	86 e8       	ldi	r24, 0x86	; 134
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	f2 d1       	rcall	.+996    	; 0xd86 <MPU9250I2CReadIMU_f>
		gyrosumxx += gyro2_f[0];
     9a2:	ca e7       	ldi	r28, 0x7A	; 122
     9a4:	d1 e0       	ldi	r29, 0x01	; 1
     9a6:	28 81       	ld	r18, Y
     9a8:	39 81       	ldd	r19, Y+1	; 0x01
     9aa:	4a 81       	ldd	r20, Y+2	; 0x02
     9ac:	5b 81       	ldd	r21, Y+3	; 0x03
     9ae:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <gyrosumxx>
     9b2:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <gyrosumxx+0x1>
     9b6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <gyrosumxx+0x2>
     9ba:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <gyrosumxx+0x3>
     9be:	fb d2       	rcall	.+1526   	; 0xfb6 <__addsf3>
     9c0:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <gyrosumxx>
     9c4:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <gyrosumxx+0x1>
     9c8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <gyrosumxx+0x2>
     9cc:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <gyrosumxx+0x3>
		gyrosumyy += gyro2_f[1];
     9d0:	2c 81       	ldd	r18, Y+4	; 0x04
     9d2:	3d 81       	ldd	r19, Y+5	; 0x05
     9d4:	4e 81       	ldd	r20, Y+6	; 0x06
     9d6:	5f 81       	ldd	r21, Y+7	; 0x07
     9d8:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <gyrosumyy>
     9dc:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <gyrosumyy+0x1>
     9e0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <gyrosumyy+0x2>
     9e4:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <gyrosumyy+0x3>
     9e8:	e6 d2       	rcall	.+1484   	; 0xfb6 <__addsf3>
     9ea:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <gyrosumyy>
     9ee:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <gyrosumyy+0x1>
     9f2:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <gyrosumyy+0x2>
     9f6:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <gyrosumyy+0x3>
		gyrosumzz += gyro2_f[2];
     9fa:	28 85       	ldd	r18, Y+8	; 0x08
     9fc:	39 85       	ldd	r19, Y+9	; 0x09
     9fe:	4a 85       	ldd	r20, Y+10	; 0x0a
     a00:	5b 85       	ldd	r21, Y+11	; 0x0b
     a02:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <gyrosumzz>
     a06:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <gyrosumzz+0x1>
     a0a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <gyrosumzz+0x2>
     a0e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <gyrosumzz+0x3>
     a12:	d1 d2       	rcall	.+1442   	; 0xfb6 <__addsf3>
     a14:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <gyrosumzz>
     a18:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <gyrosumzz+0x1>
     a1c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <gyrosumzz+0x2>
     a20:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <gyrosumzz+0x3>
     a24:	8f e3       	ldi	r24, 0x3F	; 63
     a26:	9c e9       	ldi	r25, 0x9C	; 156
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <main+0xd2>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <main+0xd8>
     a2e:	00 00       	nop
     a30:	01 50       	subi	r16, 0x01	; 1
     a32:	11 09       	sbc	r17, r1
	// 인터럽트 설정
	TIMSK = (1<<TOIE0) || (1<<TOIE2);	// 타이머0,2 오버플로 인터럽트 허용

    int i = 0;

	for( i = 0 ; i<2050 ; i++ )
     a34:	09 f0       	breq	.+2      	; 0xa38 <main+0xe2>
     a36:	b0 cf       	rjmp	.-160    	; 0x998 <main+0x42>
		gyrosumyy += gyro2_f[1];
		gyrosumzz += gyro2_f[2];
		_delay_ms(10);
		
	}
    avgxx = gyrosumxx / 2050.0;
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e2       	ldi	r19, 0x20	; 32
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	55 e4       	ldi	r21, 0x45	; 69
     a40:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <gyrosumxx>
     a44:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <gyrosumxx+0x1>
     a48:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <gyrosumxx+0x2>
     a4c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <gyrosumxx+0x3>
     a50:	16 d3       	rcall	.+1580   	; 0x107e <__divsf3>
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
     a56:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <avgxx>
     a5a:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <avgxx+0x1>
     a5e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <avgxx+0x2>
     a62:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <avgxx+0x3>
    avgyy = gyrosumyy / 2050.0;
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e2       	ldi	r19, 0x20	; 32
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	55 e4       	ldi	r21, 0x45	; 69
     a6e:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <gyrosumyy>
     a72:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <gyrosumyy+0x1>
     a76:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <gyrosumyy+0x2>
     a7a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <gyrosumyy+0x3>
     a7e:	ff d2       	rcall	.+1534   	; 0x107e <__divsf3>
     a80:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <avgyy>
     a84:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <avgyy+0x1>
     a88:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <avgyy+0x2>
     a8c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <avgyy+0x3>
    avgzz = gyrosumzz / 2050.0;
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e2       	ldi	r19, 0x20	; 32
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	55 e4       	ldi	r21, 0x45	; 69
     a98:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <gyrosumzz>
     a9c:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <gyrosumzz+0x1>
     aa0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <gyrosumzz+0x2>
     aa4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <gyrosumzz+0x3>
     aa8:	ea d2       	rcall	.+1492   	; 0x107e <__divsf3>
     aaa:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <avgzz>
     aae:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <avgzz+0x1>
     ab2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <avgzz+0x2>
     ab6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <avgzz+0x3>
	UART1_print16b((int16_t)(avgxx*1000));	
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	4a e7       	ldi	r20, 0x7A	; 122
     ac0:	54 e4       	ldi	r21, 0x44	; 68
     ac2:	c7 01       	movw	r24, r14
     ac4:	b6 01       	movw	r22, r12
     ac6:	02 d4       	rcall	.+2052   	; 0x12cc <__mulsf3>
     ac8:	42 d3       	rcall	.+1668   	; 0x114e <__fixsfsi>
     aca:	cb 01       	movw	r24, r22
     acc:	95 dc       	rcall	.-1750   	; 0x3f8 <UART1_print16b>
	UART1_transmit('\t');
     ace:	89 e0       	ldi	r24, 0x09	; 9
     ad0:	8b dc       	rcall	.-1770   	; 0x3e8 <UART1_transmit>
	UART1_print16b((int16_t)(avgyy*1000));
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4a e7       	ldi	r20, 0x7A	; 122
     ad8:	54 e4       	ldi	r21, 0x44	; 68
     ada:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <avgyy>
     ade:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <avgyy+0x1>
     ae2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <avgyy+0x2>
     ae6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <avgyy+0x3>
     aea:	f0 d3       	rcall	.+2016   	; 0x12cc <__mulsf3>
     aec:	30 d3       	rcall	.+1632   	; 0x114e <__fixsfsi>
     aee:	cb 01       	movw	r24, r22
     af0:	83 dc       	rcall	.-1786   	; 0x3f8 <UART1_print16b>
	UART1_transmit('\t');
     af2:	89 e0       	ldi	r24, 0x09	; 9
     af4:	79 dc       	rcall	.-1806   	; 0x3e8 <UART1_transmit>
	UART1_print16b((int16_t)(avgzz*1000));
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	54 e4       	ldi	r21, 0x44	; 68
     afe:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <avgzz>
     b02:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <avgzz+0x1>
     b06:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <avgzz+0x2>
     b0a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <avgzz+0x3>
     b0e:	de d3       	rcall	.+1980   	; 0x12cc <__mulsf3>
     b10:	1e d3       	rcall	.+1596   	; 0x114e <__fixsfsi>
	UART1_transmit('\n');	
     b12:	cb 01       	movw	r24, r22
     b14:	71 dc       	rcall	.-1822   	; 0x3f8 <UART1_print16b>
	UART1_transmit('\n');
     b16:	8a e0       	ldi	r24, 0x0A	; 10
     b18:	67 dc       	rcall	.-1842   	; 0x3e8 <UART1_transmit>
	AK8963I2CReadMAGNETO(mag);
     b1a:	8a e0       	ldi	r24, 0x0A	; 10
     b1c:	65 dc       	rcall	.-1846   	; 0x3e8 <UART1_transmit>
     b1e:	82 e9       	ldi	r24, 0x92	; 146
     b20:	91 e0       	ldi	r25, 0x01	; 1
	UART1_print16b(mag[0]);
     b22:	eb d1       	rcall	.+982    	; 0xefa <AK8963I2CReadMAGNETO>
     b24:	c2 e9       	ldi	r28, 0x92	; 146
     b26:	d1 e0       	ldi	r29, 0x01	; 1
     b28:	88 81       	ld	r24, Y
     b2a:	99 81       	ldd	r25, Y+1	; 0x01
     b2c:	65 dc       	rcall	.-1846   	; 0x3f8 <UART1_print16b>
	UART1_transmit('\t');
     b2e:	89 e0       	ldi	r24, 0x09	; 9
     b30:	5b dc       	rcall	.-1866   	; 0x3e8 <UART1_transmit>
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
	UART1_print16b(mag[1]);
     b34:	9b 81       	ldd	r25, Y+3	; 0x03
     b36:	60 dc       	rcall	.-1856   	; 0x3f8 <UART1_print16b>
     b38:	89 e0       	ldi	r24, 0x09	; 9
     b3a:	56 dc       	rcall	.-1876   	; 0x3e8 <UART1_transmit>
	UART1_transmit('\t');
     b3c:	8c 81       	ldd	r24, Y+4	; 0x04
     b3e:	9d 81       	ldd	r25, Y+5	; 0x05
	UART1_print16b(mag[2]);
     b40:	5b dc       	rcall	.-1866   	; 0x3f8 <UART1_print16b>
     b42:	89 e0       	ldi	r24, 0x09	; 9
	UART1_transmit('\t');		
     b44:	51 dc       	rcall	.-1886   	; 0x3e8 <UART1_transmit>
     b46:	9f ef       	ldi	r25, 0xFF	; 255
     b48:	24 e3       	ldi	r18, 0x34	; 52
     b4a:	8c e0       	ldi	r24, 0x0C	; 12
     b4c:	91 50       	subi	r25, 0x01	; 1
     b4e:	20 40       	sbci	r18, 0x00	; 0
     b50:	80 40       	sbci	r24, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <main+0x1f6>
	_delay_ms(250);
	TCCR0 |= 0x07;
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <main+0x200>
     b56:	00 00       	nop
	TCCR2 |= 0x03;						//1ms(16000tic) , duty 64
     b58:	83 b7       	in	r24, 0x33	; 51
     b5a:	87 60       	ori	r24, 0x07	; 7
     b5c:	83 bf       	out	0x33, r24	; 51
	sei();							    // 전역 인터럽트 허용

	UART1_print16b((int16_t)n_enter);
     b5e:	85 b5       	in	r24, 0x25	; 37
     b60:	83 60       	ori	r24, 0x03	; 3
     b62:	85 bd       	out	0x25, r24	; 37
     b64:	78 94       	sei
     b66:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <n_enter>
	UART1_transmit('\n');	
     b6a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <n_enter+0x1>
	AK8963I2CReadMAGNETO(mag);
     b6e:	44 dc       	rcall	.-1912   	; 0x3f8 <UART1_print16b>
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	3a dc       	rcall	.-1932   	; 0x3e8 <UART1_transmit>
	UART1_print16b(mag[0]);
     b74:	ce 01       	movw	r24, r28
     b76:	c1 d1       	rcall	.+898    	; 0xefa <AK8963I2CReadMAGNETO>
     b78:	88 81       	ld	r24, Y
     b7a:	99 81       	ldd	r25, Y+1	; 0x01
	UART1_transmit('\t');
     b7c:	3d dc       	rcall	.-1926   	; 0x3f8 <UART1_print16b>
     b7e:	89 e0       	ldi	r24, 0x09	; 9
     b80:	33 dc       	rcall	.-1946   	; 0x3e8 <UART1_transmit>
	UART1_print16b(mag[1]);
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	9b 81       	ldd	r25, Y+3	; 0x03
     b86:	38 dc       	rcall	.-1936   	; 0x3f8 <UART1_print16b>
     b88:	89 e0       	ldi	r24, 0x09	; 9
	UART1_transmit('\t');
     b8a:	2e dc       	rcall	.-1956   	; 0x3e8 <UART1_transmit>
     b8c:	8c 81       	ldd	r24, Y+4	; 0x04
     b8e:	9d 81       	ldd	r25, Y+5	; 0x05
	UART1_print16b(mag[2]);
     b90:	33 dc       	rcall	.-1946   	; 0x3f8 <UART1_print16b>
     b92:	89 e0       	ldi	r24, 0x09	; 9
     b94:	29 dc       	rcall	.-1966   	; 0x3e8 <UART1_transmit>
     b96:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <n_enter>
	UART1_transmit('\t');
     b9a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <n_enter+0x1>
	UART1_print16b((int16_t)n_enter);
     b9e:	2c dc       	rcall	.-1960   	; 0x3f8 <UART1_print16b>
     ba0:	8a e0       	ldi	r24, 0x0A	; 10
     ba2:	22 dc       	rcall	.-1980   	; 0x3e8 <UART1_transmit>
     ba4:	ff cf       	rjmp	.-2      	; 0xba4 <main+0x24e>

00000ba6 <write_a_byte>:
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
	UART1_transmit('\n');	
     baa:	00 d0       	rcall	.+0      	; 0xbac <write_a_byte+0x6>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	89 83       	std	Y+1, r24	; 0x01
	
	if(read_n_bytes(EXT_SENS_DATA_00, (uint8_t *) &me, 1) < 0)
		return -1;
	
	return me;
}
     bb2:	6a 83       	std	Y+2, r22	; 0x02
     bb4:	21 e0       	ldi	r18, 0x01	; 1
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	42 e0       	ldi	r20, 0x02	; 2
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	be 01       	movw	r22, r28
     bbe:	6f 5f       	subi	r22, 0xFF	; 255
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	88 e6       	ldi	r24, 0x68	; 104
     bc4:	e2 da       	rcall	.-2620   	; 0x18a <i2c_write_n_bytes>
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <read_n_bytes>:
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	eb 01       	movw	r28, r22
     bda:	8a 01       	movw	r16, r20
     bdc:	68 2f       	mov	r22, r24
     bde:	60 68       	ori	r22, 0x80	; 128
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	88 e6       	ldi	r24, 0x68	; 104
     be6:	77 da       	rcall	.-2834   	; 0xd6 <i2c_write_a_byte>
     be8:	99 23       	and	r25, r25
     bea:	2c f0       	brlt	.+10     	; 0xbf6 <read_n_bytes+0x26>
     bec:	a8 01       	movw	r20, r16
     bee:	be 01       	movw	r22, r28
     bf0:	88 e6       	ldi	r24, 0x68	; 104
     bf2:	49 db       	rcall	.-2414   	; 0x286 <i2c_read_n_bytes>
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <read_n_bytes+0x2a>
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	9f ef       	ldi	r25, 0xFF	; 255
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <MPU9250I2CInit>:
     c04:	62 da       	rcall	.-2876   	; 0xca <i2c_init>
     c06:	60 e8       	ldi	r22, 0x80	; 128
     c08:	8b e6       	ldi	r24, 0x6B	; 107
     c0a:	cd df       	rcall	.-102    	; 0xba6 <write_a_byte>
     c0c:	8f e3       	ldi	r24, 0x3F	; 63
     c0e:	9c e9       	ldi	r25, 0x9C	; 156
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <MPU9250I2CInit+0xc>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <MPU9250I2CInit+0x12>
     c16:	00 00       	nop
     c18:	8f e3       	ldi	r24, 0x3F	; 63
     c1a:	9c e9       	ldi	r25, 0x9C	; 156
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <MPU9250I2CInit+0x18>
     c20:	00 c0       	rjmp	.+0      	; 0xc22 <MPU9250I2CInit+0x1e>
     c22:	00 00       	nop
     c24:	8f e3       	ldi	r24, 0x3F	; 63
     c26:	9c e9       	ldi	r25, 0x9C	; 156
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <MPU9250I2CInit+0x24>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <MPU9250I2CInit+0x2a>
     c2e:	00 00       	nop
     c30:	8f e3       	ldi	r24, 0x3F	; 63
     c32:	9c e9       	ldi	r25, 0x9C	; 156
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <MPU9250I2CInit+0x30>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <MPU9250I2CInit+0x36>
     c3a:	00 00       	nop
     c3c:	8f e3       	ldi	r24, 0x3F	; 63
     c3e:	9c e9       	ldi	r25, 0x9C	; 156
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <MPU9250I2CInit+0x3c>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <MPU9250I2CInit+0x42>
     c46:	00 00       	nop
     c48:	8f e3       	ldi	r24, 0x3F	; 63
     c4a:	9c e9       	ldi	r25, 0x9C	; 156
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <MPU9250I2CInit+0x48>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <MPU9250I2CInit+0x4e>
     c52:	00 00       	nop
     c54:	8f e3       	ldi	r24, 0x3F	; 63
     c56:	9c e9       	ldi	r25, 0x9C	; 156
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <MPU9250I2CInit+0x54>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <MPU9250I2CInit+0x5a>
     c5e:	00 00       	nop
     c60:	8f e3       	ldi	r24, 0x3F	; 63
     c62:	9c e9       	ldi	r25, 0x9C	; 156
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <MPU9250I2CInit+0x60>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <MPU9250I2CInit+0x66>
     c6a:	00 00       	nop
     c6c:	8f e3       	ldi	r24, 0x3F	; 63
     c6e:	9c e9       	ldi	r25, 0x9C	; 156
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <MPU9250I2CInit+0x6c>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <MPU9250I2CInit+0x72>
     c76:	00 00       	nop
     c78:	8f e3       	ldi	r24, 0x3F	; 63
     c7a:	9c e9       	ldi	r25, 0x9C	; 156
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <MPU9250I2CInit+0x78>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <MPU9250I2CInit+0x7e>
     c82:	00 00       	nop
     c84:	67 e0       	ldi	r22, 0x07	; 7
     c86:	88 e6       	ldi	r24, 0x68	; 104
     c88:	8e df       	rcall	.-228    	; 0xba6 <write_a_byte>
     c8a:	8f e3       	ldi	r24, 0x3F	; 63
     c8c:	9c e9       	ldi	r25, 0x9C	; 156
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <MPU9250I2CInit+0x8a>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <MPU9250I2CInit+0x90>
     c94:	00 00       	nop
     c96:	8f e3       	ldi	r24, 0x3F	; 63
     c98:	9c e9       	ldi	r25, 0x9C	; 156
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <MPU9250I2CInit+0x96>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <MPU9250I2CInit+0x9c>
     ca0:	00 00       	nop
     ca2:	8f e3       	ldi	r24, 0x3F	; 63
     ca4:	9c e9       	ldi	r25, 0x9C	; 156
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <MPU9250I2CInit+0xa2>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <MPU9250I2CInit+0xa8>
     cac:	00 00       	nop
     cae:	8f e3       	ldi	r24, 0x3F	; 63
     cb0:	9c e9       	ldi	r25, 0x9C	; 156
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <MPU9250I2CInit+0xae>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <MPU9250I2CInit+0xb4>
     cb8:	00 00       	nop
     cba:	8f e3       	ldi	r24, 0x3F	; 63
     cbc:	9c e9       	ldi	r25, 0x9C	; 156
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <MPU9250I2CInit+0xba>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <MPU9250I2CInit+0xc0>
     cc4:	00 00       	nop
     cc6:	8f e3       	ldi	r24, 0x3F	; 63
     cc8:	9c e9       	ldi	r25, 0x9C	; 156
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <MPU9250I2CInit+0xc6>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <MPU9250I2CInit+0xcc>
     cd0:	00 00       	nop
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	9c e9       	ldi	r25, 0x9C	; 156
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <MPU9250I2CInit+0xd2>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <MPU9250I2CInit+0xd8>
     cdc:	00 00       	nop
     cde:	8f e3       	ldi	r24, 0x3F	; 63
     ce0:	9c e9       	ldi	r25, 0x9C	; 156
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <MPU9250I2CInit+0xde>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <MPU9250I2CInit+0xe4>
     ce8:	00 00       	nop
     cea:	8f e3       	ldi	r24, 0x3F	; 63
     cec:	9c e9       	ldi	r25, 0x9C	; 156
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <MPU9250I2CInit+0xea>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <MPU9250I2CInit+0xf0>
     cf4:	00 00       	nop
     cf6:	8f e3       	ldi	r24, 0x3F	; 63
     cf8:	9c e9       	ldi	r25, 0x9C	; 156
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <MPU9250I2CInit+0xf6>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <MPU9250I2CInit+0xfc>
     d00:	00 00       	nop
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	88 e6       	ldi	r24, 0x68	; 104
     d06:	4f df       	rcall	.-354    	; 0xba6 <write_a_byte>
     d08:	8f e3       	ldi	r24, 0x3F	; 63
     d0a:	9c e9       	ldi	r25, 0x9C	; 156
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <MPU9250I2CInit+0x108>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <MPU9250I2CInit+0x10e>
     d12:	00 00       	nop
     d14:	60 e2       	ldi	r22, 0x20	; 32
     d16:	8a e6       	ldi	r24, 0x6A	; 106
     d18:	46 df       	rcall	.-372    	; 0xba6 <write_a_byte>
     d1a:	6d e0       	ldi	r22, 0x0D	; 13
     d1c:	84 e2       	ldi	r24, 0x24	; 36
     d1e:	43 df       	rcall	.-378    	; 0xba6 <write_a_byte>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	9c e9       	ldi	r25, 0x9C	; 156
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <MPU9250I2CInit+0x120>
     d28:	00 c0       	rjmp	.+0      	; 0xd2a <MPU9250I2CInit+0x126>
     d2a:	00 00       	nop
     d2c:	6c e0       	ldi	r22, 0x0C	; 12
     d2e:	85 e2       	ldi	r24, 0x25	; 37
     d30:	3a df       	rcall	.-396    	; 0xba6 <write_a_byte>
     d32:	6b e0       	ldi	r22, 0x0B	; 11
     d34:	86 e2       	ldi	r24, 0x26	; 38
     d36:	37 df       	rcall	.-402    	; 0xba6 <write_a_byte>
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	83 e6       	ldi	r24, 0x63	; 99
     d3c:	34 df       	rcall	.-408    	; 0xba6 <write_a_byte>
     d3e:	61 e8       	ldi	r22, 0x81	; 129
     d40:	87 e2       	ldi	r24, 0x27	; 39
     d42:	31 df       	rcall	.-414    	; 0xba6 <write_a_byte>
     d44:	9f ef       	ldi	r25, 0xFF	; 255
     d46:	20 e7       	ldi	r18, 0x70	; 112
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	91 50       	subi	r25, 0x01	; 1
     d4c:	20 40       	sbci	r18, 0x00	; 0
     d4e:	80 40       	sbci	r24, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <MPU9250I2CInit+0x146>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <MPU9250I2CInit+0x150>
     d54:	00 00       	nop
     d56:	6c e0       	ldi	r22, 0x0C	; 12
     d58:	85 e2       	ldi	r24, 0x25	; 37
     d5a:	25 df       	rcall	.-438    	; 0xba6 <write_a_byte>
     d5c:	6a e0       	ldi	r22, 0x0A	; 10
     d5e:	86 e2       	ldi	r24, 0x26	; 38
     d60:	22 df       	rcall	.-444    	; 0xba6 <write_a_byte>
     d62:	60 e1       	ldi	r22, 0x10	; 16
     d64:	83 e6       	ldi	r24, 0x63	; 99
     d66:	1f df       	rcall	.-450    	; 0xba6 <write_a_byte>
     d68:	61 e8       	ldi	r22, 0x81	; 129
     d6a:	87 e2       	ldi	r24, 0x27	; 39
     d6c:	1c df       	rcall	.-456    	; 0xba6 <write_a_byte>
     d6e:	9f ef       	ldi	r25, 0xFF	; 255
     d70:	20 e7       	ldi	r18, 0x70	; 112
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	91 50       	subi	r25, 0x01	; 1
     d76:	20 40       	sbci	r18, 0x00	; 0
     d78:	80 40       	sbci	r24, 0x00	; 0
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <MPU9250I2CInit+0x170>
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <MPU9250I2CInit+0x17a>
     d7e:	00 00       	nop
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	08 95       	ret

00000d86 <MPU9250I2CReadIMU_f>:
     d86:	8f 92       	push	r8
     d88:	9f 92       	push	r9
     d8a:	af 92       	push	r10
     d8c:	bf 92       	push	r11
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	6a 97       	sbiw	r28, 0x1a	; 26
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	7c 01       	movw	r14, r24
     db0:	8b 01       	movw	r16, r22
     db2:	4e e0       	ldi	r20, 0x0E	; 14
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	be 01       	movw	r22, r28
     db8:	6f 5f       	subi	r22, 0xFF	; 255
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	8b e3       	ldi	r24, 0x3B	; 59
     dbe:	08 df       	rcall	.-496    	; 0xbd0 <read_n_bytes>
     dc0:	99 23       	and	r25, r25
     dc2:	0c f4       	brge	.+2      	; 0xdc6 <MPU9250I2CReadIMU_f+0x40>
     dc4:	85 c0       	rjmp	.+266    	; 0xed0 <MPU9250I2CReadIMU_f+0x14a>
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	8f 87       	std	Y+15, r24	; 0x0f
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	88 8b       	std	Y+16, r24	; 0x10
     dce:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd0:	8d 8b       	std	Y+21, r24	; 0x15
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	8e 8b       	std	Y+22, r24	; 0x16
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	89 8b       	std	Y+17, r24	; 0x11
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	8a 8b       	std	Y+18, r24	; 0x12
     dde:	8c 85       	ldd	r24, Y+12	; 0x0c
     de0:	8f 8b       	std	Y+23, r24	; 0x17
     de2:	8b 85       	ldd	r24, Y+11	; 0x0b
     de4:	88 8f       	std	Y+24, r24	; 0x18
     de6:	8e 81       	ldd	r24, Y+6	; 0x06
     de8:	8b 8b       	std	Y+19, r24	; 0x13
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	8c 8b       	std	Y+20, r24	; 0x14
     dee:	8e 85       	ldd	r24, Y+14	; 0x0e
     df0:	89 8f       	std	Y+25, r24	; 0x19
     df2:	8d 85       	ldd	r24, Y+13	; 0x0d
     df4:	8a 8f       	std	Y+26, r24	; 0x1a
     df6:	80 90 20 01 	lds	r8, 0x0120	; 0x800120 <acc_scale>
     dfa:	90 90 21 01 	lds	r9, 0x0121	; 0x800121 <acc_scale+0x1>
     dfe:	a0 90 22 01 	lds	r10, 0x0122	; 0x800122 <acc_scale+0x2>
     e02:	b0 90 23 01 	lds	r11, 0x0123	; 0x800123 <acc_scale+0x3>
     e06:	6f 85       	ldd	r22, Y+15	; 0x0f
     e08:	78 89       	ldd	r23, Y+16	; 0x10
     e0a:	07 2e       	mov	r0, r23
     e0c:	00 0c       	add	r0, r0
     e0e:	88 0b       	sbc	r24, r24
     e10:	99 0b       	sbc	r25, r25
     e12:	d0 d1       	rcall	.+928    	; 0x11b4 <__floatsisf>
     e14:	a5 01       	movw	r20, r10
     e16:	94 01       	movw	r18, r8
     e18:	59 d2       	rcall	.+1202   	; 0x12cc <__mulsf3>
     e1a:	f7 01       	movw	r30, r14
     e1c:	60 83       	st	Z, r22
     e1e:	71 83       	std	Z+1, r23	; 0x01
     e20:	82 83       	std	Z+2, r24	; 0x02
     e22:	93 83       	std	Z+3, r25	; 0x03
     e24:	69 89       	ldd	r22, Y+17	; 0x11
     e26:	7a 89       	ldd	r23, Y+18	; 0x12
     e28:	07 2e       	mov	r0, r23
     e2a:	00 0c       	add	r0, r0
     e2c:	88 0b       	sbc	r24, r24
     e2e:	99 0b       	sbc	r25, r25
     e30:	c1 d1       	rcall	.+898    	; 0x11b4 <__floatsisf>
     e32:	a5 01       	movw	r20, r10
     e34:	94 01       	movw	r18, r8
     e36:	4a d2       	rcall	.+1172   	; 0x12cc <__mulsf3>
     e38:	f7 01       	movw	r30, r14
     e3a:	64 83       	std	Z+4, r22	; 0x04
     e3c:	75 83       	std	Z+5, r23	; 0x05
     e3e:	86 83       	std	Z+6, r24	; 0x06
     e40:	97 83       	std	Z+7, r25	; 0x07
     e42:	6b 89       	ldd	r22, Y+19	; 0x13
     e44:	7c 89       	ldd	r23, Y+20	; 0x14
     e46:	07 2e       	mov	r0, r23
     e48:	00 0c       	add	r0, r0
     e4a:	88 0b       	sbc	r24, r24
     e4c:	99 0b       	sbc	r25, r25
     e4e:	b2 d1       	rcall	.+868    	; 0x11b4 <__floatsisf>
     e50:	a5 01       	movw	r20, r10
     e52:	94 01       	movw	r18, r8
     e54:	3b d2       	rcall	.+1142   	; 0x12cc <__mulsf3>
     e56:	f7 01       	movw	r30, r14
     e58:	60 87       	std	Z+8, r22	; 0x08
     e5a:	71 87       	std	Z+9, r23	; 0x09
     e5c:	82 87       	std	Z+10, r24	; 0x0a
     e5e:	93 87       	std	Z+11, r25	; 0x0b
     e60:	c0 90 1c 01 	lds	r12, 0x011C	; 0x80011c <gyro_scale>
     e64:	d0 90 1d 01 	lds	r13, 0x011D	; 0x80011d <gyro_scale+0x1>
     e68:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <gyro_scale+0x2>
     e6c:	f0 90 1f 01 	lds	r15, 0x011F	; 0x80011f <gyro_scale+0x3>
     e70:	6d 89       	ldd	r22, Y+21	; 0x15
     e72:	7e 89       	ldd	r23, Y+22	; 0x16
     e74:	07 2e       	mov	r0, r23
     e76:	00 0c       	add	r0, r0
     e78:	88 0b       	sbc	r24, r24
     e7a:	99 0b       	sbc	r25, r25
     e7c:	9b d1       	rcall	.+822    	; 0x11b4 <__floatsisf>
     e7e:	a7 01       	movw	r20, r14
     e80:	96 01       	movw	r18, r12
     e82:	24 d2       	rcall	.+1096   	; 0x12cc <__mulsf3>
     e84:	f8 01       	movw	r30, r16
     e86:	60 83       	st	Z, r22
     e88:	71 83       	std	Z+1, r23	; 0x01
     e8a:	82 83       	std	Z+2, r24	; 0x02
     e8c:	93 83       	std	Z+3, r25	; 0x03
     e8e:	6f 89       	ldd	r22, Y+23	; 0x17
     e90:	78 8d       	ldd	r23, Y+24	; 0x18
     e92:	07 2e       	mov	r0, r23
     e94:	00 0c       	add	r0, r0
     e96:	88 0b       	sbc	r24, r24
     e98:	99 0b       	sbc	r25, r25
     e9a:	8c d1       	rcall	.+792    	; 0x11b4 <__floatsisf>
     e9c:	a7 01       	movw	r20, r14
     e9e:	96 01       	movw	r18, r12
     ea0:	15 d2       	rcall	.+1066   	; 0x12cc <__mulsf3>
     ea2:	f8 01       	movw	r30, r16
     ea4:	64 83       	std	Z+4, r22	; 0x04
     ea6:	75 83       	std	Z+5, r23	; 0x05
     ea8:	86 83       	std	Z+6, r24	; 0x06
     eaa:	97 83       	std	Z+7, r25	; 0x07
     eac:	69 8d       	ldd	r22, Y+25	; 0x19
     eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eb0:	07 2e       	mov	r0, r23
     eb2:	00 0c       	add	r0, r0
     eb4:	88 0b       	sbc	r24, r24
     eb6:	99 0b       	sbc	r25, r25
     eb8:	7d d1       	rcall	.+762    	; 0x11b4 <__floatsisf>
     eba:	a7 01       	movw	r20, r14
     ebc:	96 01       	movw	r18, r12
     ebe:	06 d2       	rcall	.+1036   	; 0x12cc <__mulsf3>
     ec0:	f8 01       	movw	r30, r16
     ec2:	60 87       	std	Z+8, r22	; 0x08
     ec4:	71 87       	std	Z+9, r23	; 0x09
     ec6:	82 87       	std	Z+10, r24	; 0x0a
     ec8:	93 87       	std	Z+11, r25	; 0x0b
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <MPU9250I2CReadIMU_f+0x14e>
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	6a 96       	adiw	r28, 0x1a	; 26
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	bf 90       	pop	r11
     ef2:	af 90       	pop	r10
     ef4:	9f 90       	pop	r9
     ef6:	8f 90       	pop	r8
     ef8:	08 95       	ret

00000efa <AK8963I2CReadMAGNETO>:


int AK8963I2CReadMAGNETO(int16_t mag[]){
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	00 d0       	rcall	.+0      	; 0xf04 <AK8963I2CReadMAGNETO+0xa>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <AK8963I2CReadMAGNETO+0xc>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <AK8963I2CReadMAGNETO+0xe>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	08 2f       	mov	r16, r24
     f0e:	19 2f       	mov	r17, r25
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;
	
	write_a_byte(I2C_SLV0_ADDR, 0x0c); // set the i2c slave address of ak8963(0x0c) write mode
     f10:	6c e0       	ldi	r22, 0x0C	; 12
     f12:	85 e2       	ldi	r24, 0x25	; 37
     f14:	48 de       	rcall	.-880    	; 0xba6 <write_a_byte>
	write_a_byte(I2C_SLV0_REG, 0x0A); // i2c slave 0 register address from where to begin data transfer
     f16:	6a e0       	ldi	r22, 0x0A	; 10
     f18:	86 e2       	ldi	r24, 0x26	; 38
     f1a:	45 de       	rcall	.-886    	; 0xba6 <write_a_byte>
	write_a_byte(I2C_SLV0_DO, 0x11); // 16bit, single measurement
     f1c:	61 e1       	ldi	r22, 0x11	; 17
     f1e:	83 e6       	ldi	r24, 0x63	; 99
     f20:	42 de       	rcall	.-892    	; 0xba6 <write_a_byte>
	write_a_byte(I2C_SLV0_CTRL, 0x81); //enable i2c and transfer 1 byte
     f22:	61 e8       	ldi	r22, 0x81	; 129
     f24:	87 e2       	ldi	r24, 0x27	; 39
     f26:	3f de       	rcall	.-898    	; 0xba6 <write_a_byte>
     f28:	2f ef       	ldi	r18, 0xFF	; 255
     f2a:	80 e7       	ldi	r24, 0x70	; 112
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	21 50       	subi	r18, 0x01	; 1
     f30:	80 40       	sbci	r24, 0x00	; 0
     f32:	90 40       	sbci	r25, 0x00	; 0
     f34:	e1 f7       	brne	.-8      	; 0xf2e <AK8963I2CReadMAGNETO+0x34>
     f36:	00 c0       	rjmp	.+0      	; 0xf38 <AK8963I2CReadMAGNETO+0x3e>
     f38:	00 00       	nop
	_delay_ms(50);
	
	write_a_byte(I2C_SLV0_ADDR, 0x8c); //set the i2c slave address of ak8963(0x0c) read mode
     f3a:	6c e8       	ldi	r22, 0x8C	; 140
     f3c:	85 e2       	ldi	r24, 0x25	; 37
     f3e:	33 de       	rcall	.-922    	; 0xba6 <write_a_byte>
	write_a_byte(I2C_SLV0_REG, 0x03); //i2c slave 0 register address from where to begin data transfer
     f40:	63 e0       	ldi	r22, 0x03	; 3
     f42:	86 e2       	ldi	r24, 0x26	; 38
     f44:	30 de       	rcall	.-928    	; 0xba6 <write_a_byte>
	write_a_byte(I2C_SLV0_CTRL, 0x87); //enable i2c and read 6 byte
     f46:	67 e8       	ldi	r22, 0x87	; 135
     f48:	87 e2       	ldi	r24, 0x27	; 39
     f4a:	2d de       	rcall	.-934    	; 0xba6 <write_a_byte>
     f4c:	2f ef       	ldi	r18, 0xFF	; 255
     f4e:	80 e7       	ldi	r24, 0x70	; 112
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	21 50       	subi	r18, 0x01	; 1
     f54:	80 40       	sbci	r24, 0x00	; 0
     f56:	90 40       	sbci	r25, 0x00	; 0
     f58:	e1 f7       	brne	.-8      	; 0xf52 <AK8963I2CReadMAGNETO+0x58>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <AK8963I2CReadMAGNETO+0x62>
     f5c:	00 00       	nop
	_delay_ms(50);
	
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
     f5e:	46 e0       	ldi	r20, 0x06	; 6
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	be 01       	movw	r22, r28
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	89 e4       	ldi	r24, 0x49	; 73
     f6a:	32 de       	rcall	.-924    	; 0xbd0 <read_n_bytes>
     f6c:	99 23       	and	r25, r25
     f6e:	ac f0       	brlt	.+42     	; 0xf9a <AK8963I2CReadMAGNETO+0xa0>
     f70:	fe 01       	movw	r30, r28
     f72:	31 96       	adiw	r30, 0x01	; 1
     f74:	a0 2f       	mov	r26, r16
     f76:	b1 2f       	mov	r27, r17
     f78:	9e 01       	movw	r18, r28
     f7a:	29 5f       	subi	r18, 0xF9	; 249
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	80 81       	ld	r24, Z
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
	{
		ptr_mag[i]   = buf[i];
     f80:	8c 93       	st	X, r24
     f82:	81 81       	ldd	r24, Z+1	; 0x01
		ptr_mag[i+1] = buf[i+1];
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	8c 93       	st	X, r24
     f88:	11 97       	sbiw	r26, 0x01	; 1
     f8a:	32 96       	adiw	r30, 0x02	; 2
     f8c:	12 96       	adiw	r26, 0x02	; 2
     f8e:	e2 17       	cp	r30, r18
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
		return -1;
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
     f90:	f3 07       	cpc	r31, r19
     f92:	a9 f7       	brne	.-22     	; 0xf7e <AK8963I2CReadMAGNETO+0x84>
     f94:	80 e0       	ldi	r24, 0x00	; 0
	{
		ptr_mag[i]   = buf[i];
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <AK8963I2CReadMAGNETO+0xa4>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
	write_a_byte(I2C_SLV0_REG, 0x03); //i2c slave 0 register address from where to begin data transfer
	write_a_byte(I2C_SLV0_CTRL, 0x87); //enable i2c and read 6 byte
	_delay_ms(50);
	
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
		return -1;
     f9c:	9f ef       	ldi	r25, 0xFF	; 255
     f9e:	26 96       	adiw	r28, 0x06	; 6
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;

}
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <__subsf3>:
     fb4:	50 58       	subi	r21, 0x80	; 128

00000fb6 <__addsf3>:
     fb6:	bb 27       	eor	r27, r27
     fb8:	aa 27       	eor	r26, r26
     fba:	0e d0       	rcall	.+28     	; 0xfd8 <__addsf3x>
     fbc:	4d c1       	rjmp	.+666    	; 0x1258 <__fp_round>
     fbe:	3e d1       	rcall	.+636    	; 0x123c <__fp_pscA>
     fc0:	30 f0       	brcs	.+12     	; 0xfce <__addsf3+0x18>
     fc2:	43 d1       	rcall	.+646    	; 0x124a <__fp_pscB>
     fc4:	20 f0       	brcs	.+8      	; 0xfce <__addsf3+0x18>
     fc6:	31 f4       	brne	.+12     	; 0xfd4 <__addsf3+0x1e>
     fc8:	9f 3f       	cpi	r25, 0xFF	; 255
     fca:	11 f4       	brne	.+4      	; 0xfd0 <__addsf3+0x1a>
     fcc:	1e f4       	brtc	.+6      	; 0xfd4 <__addsf3+0x1e>
     fce:	33 c1       	rjmp	.+614    	; 0x1236 <__fp_nan>
     fd0:	0e f4       	brtc	.+2      	; 0xfd4 <__addsf3+0x1e>
     fd2:	e0 95       	com	r30
     fd4:	e7 fb       	bst	r30, 7
     fd6:	29 c1       	rjmp	.+594    	; 0x122a <__fp_inf>

00000fd8 <__addsf3x>:
     fd8:	e9 2f       	mov	r30, r25
     fda:	4f d1       	rcall	.+670    	; 0x127a <__fp_split3>
     fdc:	80 f3       	brcs	.-32     	; 0xfbe <__addsf3+0x8>
     fde:	ba 17       	cp	r27, r26
     fe0:	62 07       	cpc	r22, r18
     fe2:	73 07       	cpc	r23, r19
     fe4:	84 07       	cpc	r24, r20
     fe6:	95 07       	cpc	r25, r21
     fe8:	18 f0       	brcs	.+6      	; 0xff0 <__addsf3x+0x18>
     fea:	71 f4       	brne	.+28     	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
     fec:	9e f5       	brtc	.+102    	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
     fee:	67 c1       	rjmp	.+718    	; 0x12be <__fp_zero>
     ff0:	0e f4       	brtc	.+2      	; 0xff4 <__addsf3x+0x1c>
     ff2:	e0 95       	com	r30
     ff4:	0b 2e       	mov	r0, r27
     ff6:	ba 2f       	mov	r27, r26
     ff8:	a0 2d       	mov	r26, r0
     ffa:	0b 01       	movw	r0, r22
     ffc:	b9 01       	movw	r22, r18
     ffe:	90 01       	movw	r18, r0
    1000:	0c 01       	movw	r0, r24
    1002:	ca 01       	movw	r24, r20
    1004:	a0 01       	movw	r20, r0
    1006:	11 24       	eor	r1, r1
    1008:	ff 27       	eor	r31, r31
    100a:	59 1b       	sub	r21, r25
    100c:	99 f0       	breq	.+38     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    100e:	59 3f       	cpi	r21, 0xF9	; 249
    1010:	50 f4       	brcc	.+20     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1012:	50 3e       	cpi	r21, 0xE0	; 224
    1014:	68 f1       	brcs	.+90     	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    1016:	1a 16       	cp	r1, r26
    1018:	f0 40       	sbci	r31, 0x00	; 0
    101a:	a2 2f       	mov	r26, r18
    101c:	23 2f       	mov	r18, r19
    101e:	34 2f       	mov	r19, r20
    1020:	44 27       	eor	r20, r20
    1022:	58 5f       	subi	r21, 0xF8	; 248
    1024:	f3 cf       	rjmp	.-26     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    1026:	46 95       	lsr	r20
    1028:	37 95       	ror	r19
    102a:	27 95       	ror	r18
    102c:	a7 95       	ror	r26
    102e:	f0 40       	sbci	r31, 0x00	; 0
    1030:	53 95       	inc	r21
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1034:	7e f4       	brtc	.+30     	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1036:	1f 16       	cp	r1, r31
    1038:	ba 0b       	sbc	r27, r26
    103a:	62 0b       	sbc	r22, r18
    103c:	73 0b       	sbc	r23, r19
    103e:	84 0b       	sbc	r24, r20
    1040:	ba f0       	brmi	.+46     	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	a1 f0       	breq	.+40     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1046:	ff 0f       	add	r31, r31
    1048:	bb 1f       	adc	r27, r27
    104a:	66 1f       	adc	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	88 1f       	adc	r24, r24
    1050:	c2 f7       	brpl	.-16     	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    1052:	0e c0       	rjmp	.+28     	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    1054:	ba 0f       	add	r27, r26
    1056:	62 1f       	adc	r22, r18
    1058:	73 1f       	adc	r23, r19
    105a:	84 1f       	adc	r24, r20
    105c:	48 f4       	brcc	.+18     	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    105e:	87 95       	ror	r24
    1060:	77 95       	ror	r23
    1062:	67 95       	ror	r22
    1064:	b7 95       	ror	r27
    1066:	f7 95       	ror	r31
    1068:	9e 3f       	cpi	r25, 0xFE	; 254
    106a:	08 f0       	brcs	.+2      	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    106c:	b3 cf       	rjmp	.-154    	; 0xfd4 <__addsf3+0x1e>
    106e:	93 95       	inc	r25
    1070:	88 0f       	add	r24, r24
    1072:	08 f0       	brcs	.+2      	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
    1074:	99 27       	eor	r25, r25
    1076:	ee 0f       	add	r30, r30
    1078:	97 95       	ror	r25
    107a:	87 95       	ror	r24
    107c:	08 95       	ret

0000107e <__divsf3>:
    107e:	0c d0       	rcall	.+24     	; 0x1098 <__divsf3x>
    1080:	eb c0       	rjmp	.+470    	; 0x1258 <__fp_round>
    1082:	e3 d0       	rcall	.+454    	; 0x124a <__fp_pscB>
    1084:	40 f0       	brcs	.+16     	; 0x1096 <__divsf3+0x18>
    1086:	da d0       	rcall	.+436    	; 0x123c <__fp_pscA>
    1088:	30 f0       	brcs	.+12     	; 0x1096 <__divsf3+0x18>
    108a:	21 f4       	brne	.+8      	; 0x1094 <__divsf3+0x16>
    108c:	5f 3f       	cpi	r21, 0xFF	; 255
    108e:	19 f0       	breq	.+6      	; 0x1096 <__divsf3+0x18>
    1090:	cc c0       	rjmp	.+408    	; 0x122a <__fp_inf>
    1092:	51 11       	cpse	r21, r1
    1094:	15 c1       	rjmp	.+554    	; 0x12c0 <__fp_szero>
    1096:	cf c0       	rjmp	.+414    	; 0x1236 <__fp_nan>

00001098 <__divsf3x>:
    1098:	f0 d0       	rcall	.+480    	; 0x127a <__fp_split3>
    109a:	98 f3       	brcs	.-26     	; 0x1082 <__divsf3+0x4>

0000109c <__divsf3_pse>:
    109c:	99 23       	and	r25, r25
    109e:	c9 f3       	breq	.-14     	; 0x1092 <__divsf3+0x14>
    10a0:	55 23       	and	r21, r21
    10a2:	b1 f3       	breq	.-20     	; 0x1090 <__divsf3+0x12>
    10a4:	95 1b       	sub	r25, r21
    10a6:	55 0b       	sbc	r21, r21
    10a8:	bb 27       	eor	r27, r27
    10aa:	aa 27       	eor	r26, r26
    10ac:	62 17       	cp	r22, r18
    10ae:	73 07       	cpc	r23, r19
    10b0:	84 07       	cpc	r24, r20
    10b2:	38 f0       	brcs	.+14     	; 0x10c2 <__divsf3_pse+0x26>
    10b4:	9f 5f       	subi	r25, 0xFF	; 255
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	22 0f       	add	r18, r18
    10ba:	33 1f       	adc	r19, r19
    10bc:	44 1f       	adc	r20, r20
    10be:	aa 1f       	adc	r26, r26
    10c0:	a9 f3       	breq	.-22     	; 0x10ac <__divsf3_pse+0x10>
    10c2:	33 d0       	rcall	.+102    	; 0x112a <__stack+0x2b>
    10c4:	0e 2e       	mov	r0, r30
    10c6:	3a f0       	brmi	.+14     	; 0x10d6 <__divsf3_pse+0x3a>
    10c8:	e0 e8       	ldi	r30, 0x80	; 128
    10ca:	30 d0       	rcall	.+96     	; 0x112c <__stack+0x2d>
    10cc:	91 50       	subi	r25, 0x01	; 1
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	e6 95       	lsr	r30
    10d2:	00 1c       	adc	r0, r0
    10d4:	ca f7       	brpl	.-14     	; 0x10c8 <__divsf3_pse+0x2c>
    10d6:	29 d0       	rcall	.+82     	; 0x112a <__stack+0x2b>
    10d8:	fe 2f       	mov	r31, r30
    10da:	27 d0       	rcall	.+78     	; 0x112a <__stack+0x2b>
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	bb 1f       	adc	r27, r27
    10e4:	26 17       	cp	r18, r22
    10e6:	37 07       	cpc	r19, r23
    10e8:	48 07       	cpc	r20, r24
    10ea:	ab 07       	cpc	r26, r27
    10ec:	b0 e8       	ldi	r27, 0x80	; 128
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <__divsf3_pse+0x56>
    10f0:	bb 0b       	sbc	r27, r27
    10f2:	80 2d       	mov	r24, r0
    10f4:	bf 01       	movw	r22, r30
    10f6:	ff 27       	eor	r31, r31
    10f8:	93 58       	subi	r25, 0x83	; 131
    10fa:	5f 4f       	sbci	r21, 0xFF	; 255
    10fc:	2a f0       	brmi	.+10     	; 0x1108 <__stack+0x9>
    10fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1100:	51 05       	cpc	r21, r1
    1102:	68 f0       	brcs	.+26     	; 0x111e <__stack+0x1f>
    1104:	92 c0       	rjmp	.+292    	; 0x122a <__fp_inf>
    1106:	dc c0       	rjmp	.+440    	; 0x12c0 <__fp_szero>
    1108:	5f 3f       	cpi	r21, 0xFF	; 255
    110a:	ec f3       	brlt	.-6      	; 0x1106 <__stack+0x7>
    110c:	98 3e       	cpi	r25, 0xE8	; 232
    110e:	dc f3       	brlt	.-10     	; 0x1106 <__stack+0x7>
    1110:	86 95       	lsr	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	b7 95       	ror	r27
    1118:	f7 95       	ror	r31
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	c9 f7       	brne	.-14     	; 0x1110 <__stack+0x11>
    111e:	88 0f       	add	r24, r24
    1120:	91 1d       	adc	r25, r1
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	97 f9       	bld	r25, 7
    1128:	08 95       	ret
    112a:	e1 e0       	ldi	r30, 0x01	; 1
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	bb 1f       	adc	r27, r27
    1134:	62 17       	cp	r22, r18
    1136:	73 07       	cpc	r23, r19
    1138:	84 07       	cpc	r24, r20
    113a:	ba 07       	cpc	r27, r26
    113c:	20 f0       	brcs	.+8      	; 0x1146 <__stack+0x47>
    113e:	62 1b       	sub	r22, r18
    1140:	73 0b       	sbc	r23, r19
    1142:	84 0b       	sbc	r24, r20
    1144:	ba 0b       	sbc	r27, r26
    1146:	ee 1f       	adc	r30, r30
    1148:	88 f7       	brcc	.-30     	; 0x112c <__stack+0x2d>
    114a:	e0 95       	com	r30
    114c:	08 95       	ret

0000114e <__fixsfsi>:
    114e:	04 d0       	rcall	.+8      	; 0x1158 <__fixunssfsi>
    1150:	68 94       	set
    1152:	b1 11       	cpse	r27, r1
    1154:	b5 c0       	rjmp	.+362    	; 0x12c0 <__fp_szero>
    1156:	08 95       	ret

00001158 <__fixunssfsi>:
    1158:	98 d0       	rcall	.+304    	; 0x128a <__fp_splitA>
    115a:	88 f0       	brcs	.+34     	; 0x117e <__fixunssfsi+0x26>
    115c:	9f 57       	subi	r25, 0x7F	; 127
    115e:	90 f0       	brcs	.+36     	; 0x1184 <__fixunssfsi+0x2c>
    1160:	b9 2f       	mov	r27, r25
    1162:	99 27       	eor	r25, r25
    1164:	b7 51       	subi	r27, 0x17	; 23
    1166:	a0 f0       	brcs	.+40     	; 0x1190 <__fixunssfsi+0x38>
    1168:	d1 f0       	breq	.+52     	; 0x119e <__fixunssfsi+0x46>
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	1a f0       	brmi	.+6      	; 0x117a <__fixunssfsi+0x22>
    1174:	ba 95       	dec	r27
    1176:	c9 f7       	brne	.-14     	; 0x116a <__fixunssfsi+0x12>
    1178:	12 c0       	rjmp	.+36     	; 0x119e <__fixunssfsi+0x46>
    117a:	b1 30       	cpi	r27, 0x01	; 1
    117c:	81 f0       	breq	.+32     	; 0x119e <__fixunssfsi+0x46>
    117e:	9f d0       	rcall	.+318    	; 0x12be <__fp_zero>
    1180:	b1 e0       	ldi	r27, 0x01	; 1
    1182:	08 95       	ret
    1184:	9c c0       	rjmp	.+312    	; 0x12be <__fp_zero>
    1186:	67 2f       	mov	r22, r23
    1188:	78 2f       	mov	r23, r24
    118a:	88 27       	eor	r24, r24
    118c:	b8 5f       	subi	r27, 0xF8	; 248
    118e:	39 f0       	breq	.+14     	; 0x119e <__fixunssfsi+0x46>
    1190:	b9 3f       	cpi	r27, 0xF9	; 249
    1192:	cc f3       	brlt	.-14     	; 0x1186 <__fixunssfsi+0x2e>
    1194:	86 95       	lsr	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	b3 95       	inc	r27
    119c:	d9 f7       	brne	.-10     	; 0x1194 <__fixunssfsi+0x3c>
    119e:	3e f4       	brtc	.+14     	; 0x11ae <__fixunssfsi+0x56>
    11a0:	90 95       	com	r25
    11a2:	80 95       	com	r24
    11a4:	70 95       	com	r23
    11a6:	61 95       	neg	r22
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	8f 4f       	sbci	r24, 0xFF	; 255
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	08 95       	ret

000011b0 <__floatunsisf>:
    11b0:	e8 94       	clt
    11b2:	09 c0       	rjmp	.+18     	; 0x11c6 <__floatsisf+0x12>

000011b4 <__floatsisf>:
    11b4:	97 fb       	bst	r25, 7
    11b6:	3e f4       	brtc	.+14     	; 0x11c6 <__floatsisf+0x12>
    11b8:	90 95       	com	r25
    11ba:	80 95       	com	r24
    11bc:	70 95       	com	r23
    11be:	61 95       	neg	r22
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	99 23       	and	r25, r25
    11c8:	a9 f0       	breq	.+42     	; 0x11f4 <__floatsisf+0x40>
    11ca:	f9 2f       	mov	r31, r25
    11cc:	96 e9       	ldi	r25, 0x96	; 150
    11ce:	bb 27       	eor	r27, r27
    11d0:	93 95       	inc	r25
    11d2:	f6 95       	lsr	r31
    11d4:	87 95       	ror	r24
    11d6:	77 95       	ror	r23
    11d8:	67 95       	ror	r22
    11da:	b7 95       	ror	r27
    11dc:	f1 11       	cpse	r31, r1
    11de:	f8 cf       	rjmp	.-16     	; 0x11d0 <__floatsisf+0x1c>
    11e0:	fa f4       	brpl	.+62     	; 0x1220 <__floatsisf+0x6c>
    11e2:	bb 0f       	add	r27, r27
    11e4:	11 f4       	brne	.+4      	; 0x11ea <__floatsisf+0x36>
    11e6:	60 ff       	sbrs	r22, 0
    11e8:	1b c0       	rjmp	.+54     	; 0x1220 <__floatsisf+0x6c>
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	8f 4f       	sbci	r24, 0xFF	; 255
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	16 c0       	rjmp	.+44     	; 0x1220 <__floatsisf+0x6c>
    11f4:	88 23       	and	r24, r24
    11f6:	11 f0       	breq	.+4      	; 0x11fc <__floatsisf+0x48>
    11f8:	96 e9       	ldi	r25, 0x96	; 150
    11fa:	11 c0       	rjmp	.+34     	; 0x121e <__floatsisf+0x6a>
    11fc:	77 23       	and	r23, r23
    11fe:	21 f0       	breq	.+8      	; 0x1208 <__floatsisf+0x54>
    1200:	9e e8       	ldi	r25, 0x8E	; 142
    1202:	87 2f       	mov	r24, r23
    1204:	76 2f       	mov	r23, r22
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <__floatsisf+0x5e>
    1208:	66 23       	and	r22, r22
    120a:	71 f0       	breq	.+28     	; 0x1228 <__floatsisf+0x74>
    120c:	96 e8       	ldi	r25, 0x86	; 134
    120e:	86 2f       	mov	r24, r22
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	2a f0       	brmi	.+10     	; 0x1220 <__floatsisf+0x6c>
    1216:	9a 95       	dec	r25
    1218:	66 0f       	add	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	88 1f       	adc	r24, r24
    121e:	da f7       	brpl	.-10     	; 0x1216 <__floatsisf+0x62>
    1220:	88 0f       	add	r24, r24
    1222:	96 95       	lsr	r25
    1224:	87 95       	ror	r24
    1226:	97 f9       	bld	r25, 7
    1228:	08 95       	ret

0000122a <__fp_inf>:
    122a:	97 f9       	bld	r25, 7
    122c:	9f 67       	ori	r25, 0x7F	; 127
    122e:	80 e8       	ldi	r24, 0x80	; 128
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	08 95       	ret

00001236 <__fp_nan>:
    1236:	9f ef       	ldi	r25, 0xFF	; 255
    1238:	80 ec       	ldi	r24, 0xC0	; 192
    123a:	08 95       	ret

0000123c <__fp_pscA>:
    123c:	00 24       	eor	r0, r0
    123e:	0a 94       	dec	r0
    1240:	16 16       	cp	r1, r22
    1242:	17 06       	cpc	r1, r23
    1244:	18 06       	cpc	r1, r24
    1246:	09 06       	cpc	r0, r25
    1248:	08 95       	ret

0000124a <__fp_pscB>:
    124a:	00 24       	eor	r0, r0
    124c:	0a 94       	dec	r0
    124e:	12 16       	cp	r1, r18
    1250:	13 06       	cpc	r1, r19
    1252:	14 06       	cpc	r1, r20
    1254:	05 06       	cpc	r0, r21
    1256:	08 95       	ret

00001258 <__fp_round>:
    1258:	09 2e       	mov	r0, r25
    125a:	03 94       	inc	r0
    125c:	00 0c       	add	r0, r0
    125e:	11 f4       	brne	.+4      	; 0x1264 <__fp_round+0xc>
    1260:	88 23       	and	r24, r24
    1262:	52 f0       	brmi	.+20     	; 0x1278 <__fp_round+0x20>
    1264:	bb 0f       	add	r27, r27
    1266:	40 f4       	brcc	.+16     	; 0x1278 <__fp_round+0x20>
    1268:	bf 2b       	or	r27, r31
    126a:	11 f4       	brne	.+4      	; 0x1270 <__fp_round+0x18>
    126c:	60 ff       	sbrs	r22, 0
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <__fp_round+0x20>
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	8f 4f       	sbci	r24, 0xFF	; 255
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	08 95       	ret

0000127a <__fp_split3>:
    127a:	57 fd       	sbrc	r21, 7
    127c:	90 58       	subi	r25, 0x80	; 128
    127e:	44 0f       	add	r20, r20
    1280:	55 1f       	adc	r21, r21
    1282:	59 f0       	breq	.+22     	; 0x129a <__fp_splitA+0x10>
    1284:	5f 3f       	cpi	r21, 0xFF	; 255
    1286:	71 f0       	breq	.+28     	; 0x12a4 <__fp_splitA+0x1a>
    1288:	47 95       	ror	r20

0000128a <__fp_splitA>:
    128a:	88 0f       	add	r24, r24
    128c:	97 fb       	bst	r25, 7
    128e:	99 1f       	adc	r25, r25
    1290:	61 f0       	breq	.+24     	; 0x12aa <__fp_splitA+0x20>
    1292:	9f 3f       	cpi	r25, 0xFF	; 255
    1294:	79 f0       	breq	.+30     	; 0x12b4 <__fp_splitA+0x2a>
    1296:	87 95       	ror	r24
    1298:	08 95       	ret
    129a:	12 16       	cp	r1, r18
    129c:	13 06       	cpc	r1, r19
    129e:	14 06       	cpc	r1, r20
    12a0:	55 1f       	adc	r21, r21
    12a2:	f2 cf       	rjmp	.-28     	; 0x1288 <__fp_split3+0xe>
    12a4:	46 95       	lsr	r20
    12a6:	f1 df       	rcall	.-30     	; 0x128a <__fp_splitA>
    12a8:	08 c0       	rjmp	.+16     	; 0x12ba <__fp_splitA+0x30>
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	18 06       	cpc	r1, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	f1 cf       	rjmp	.-30     	; 0x1296 <__fp_splitA+0xc>
    12b4:	86 95       	lsr	r24
    12b6:	71 05       	cpc	r23, r1
    12b8:	61 05       	cpc	r22, r1
    12ba:	08 94       	sec
    12bc:	08 95       	ret

000012be <__fp_zero>:
    12be:	e8 94       	clt

000012c0 <__fp_szero>:
    12c0:	bb 27       	eor	r27, r27
    12c2:	66 27       	eor	r22, r22
    12c4:	77 27       	eor	r23, r23
    12c6:	cb 01       	movw	r24, r22
    12c8:	97 f9       	bld	r25, 7
    12ca:	08 95       	ret

000012cc <__mulsf3>:
    12cc:	0b d0       	rcall	.+22     	; 0x12e4 <__mulsf3x>
    12ce:	c4 cf       	rjmp	.-120    	; 0x1258 <__fp_round>
    12d0:	b5 df       	rcall	.-150    	; 0x123c <__fp_pscA>
    12d2:	28 f0       	brcs	.+10     	; 0x12de <__mulsf3+0x12>
    12d4:	ba df       	rcall	.-140    	; 0x124a <__fp_pscB>
    12d6:	18 f0       	brcs	.+6      	; 0x12de <__mulsf3+0x12>
    12d8:	95 23       	and	r25, r21
    12da:	09 f0       	breq	.+2      	; 0x12de <__mulsf3+0x12>
    12dc:	a6 cf       	rjmp	.-180    	; 0x122a <__fp_inf>
    12de:	ab cf       	rjmp	.-170    	; 0x1236 <__fp_nan>
    12e0:	11 24       	eor	r1, r1
    12e2:	ee cf       	rjmp	.-36     	; 0x12c0 <__fp_szero>

000012e4 <__mulsf3x>:
    12e4:	ca df       	rcall	.-108    	; 0x127a <__fp_split3>
    12e6:	a0 f3       	brcs	.-24     	; 0x12d0 <__mulsf3+0x4>

000012e8 <__mulsf3_pse>:
    12e8:	95 9f       	mul	r25, r21
    12ea:	d1 f3       	breq	.-12     	; 0x12e0 <__mulsf3+0x14>
    12ec:	95 0f       	add	r25, r21
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	55 1f       	adc	r21, r21
    12f2:	62 9f       	mul	r22, r18
    12f4:	f0 01       	movw	r30, r0
    12f6:	72 9f       	mul	r23, r18
    12f8:	bb 27       	eor	r27, r27
    12fa:	f0 0d       	add	r31, r0
    12fc:	b1 1d       	adc	r27, r1
    12fe:	63 9f       	mul	r22, r19
    1300:	aa 27       	eor	r26, r26
    1302:	f0 0d       	add	r31, r0
    1304:	b1 1d       	adc	r27, r1
    1306:	aa 1f       	adc	r26, r26
    1308:	64 9f       	mul	r22, r20
    130a:	66 27       	eor	r22, r22
    130c:	b0 0d       	add	r27, r0
    130e:	a1 1d       	adc	r26, r1
    1310:	66 1f       	adc	r22, r22
    1312:	82 9f       	mul	r24, r18
    1314:	22 27       	eor	r18, r18
    1316:	b0 0d       	add	r27, r0
    1318:	a1 1d       	adc	r26, r1
    131a:	62 1f       	adc	r22, r18
    131c:	73 9f       	mul	r23, r19
    131e:	b0 0d       	add	r27, r0
    1320:	a1 1d       	adc	r26, r1
    1322:	62 1f       	adc	r22, r18
    1324:	83 9f       	mul	r24, r19
    1326:	a0 0d       	add	r26, r0
    1328:	61 1d       	adc	r22, r1
    132a:	22 1f       	adc	r18, r18
    132c:	74 9f       	mul	r23, r20
    132e:	33 27       	eor	r19, r19
    1330:	a0 0d       	add	r26, r0
    1332:	61 1d       	adc	r22, r1
    1334:	23 1f       	adc	r18, r19
    1336:	84 9f       	mul	r24, r20
    1338:	60 0d       	add	r22, r0
    133a:	21 1d       	adc	r18, r1
    133c:	82 2f       	mov	r24, r18
    133e:	76 2f       	mov	r23, r22
    1340:	6a 2f       	mov	r22, r26
    1342:	11 24       	eor	r1, r1
    1344:	9f 57       	subi	r25, 0x7F	; 127
    1346:	50 40       	sbci	r21, 0x00	; 0
    1348:	8a f0       	brmi	.+34     	; 0x136c <__mulsf3_pse+0x84>
    134a:	e1 f0       	breq	.+56     	; 0x1384 <__mulsf3_pse+0x9c>
    134c:	88 23       	and	r24, r24
    134e:	4a f0       	brmi	.+18     	; 0x1362 <__mulsf3_pse+0x7a>
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	bb 1f       	adc	r27, r27
    1356:	66 1f       	adc	r22, r22
    1358:	77 1f       	adc	r23, r23
    135a:	88 1f       	adc	r24, r24
    135c:	91 50       	subi	r25, 0x01	; 1
    135e:	50 40       	sbci	r21, 0x00	; 0
    1360:	a9 f7       	brne	.-22     	; 0x134c <__mulsf3_pse+0x64>
    1362:	9e 3f       	cpi	r25, 0xFE	; 254
    1364:	51 05       	cpc	r21, r1
    1366:	70 f0       	brcs	.+28     	; 0x1384 <__mulsf3_pse+0x9c>
    1368:	60 cf       	rjmp	.-320    	; 0x122a <__fp_inf>
    136a:	aa cf       	rjmp	.-172    	; 0x12c0 <__fp_szero>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	ec f3       	brlt	.-6      	; 0x136a <__mulsf3_pse+0x82>
    1370:	98 3e       	cpi	r25, 0xE8	; 232
    1372:	dc f3       	brlt	.-10     	; 0x136a <__mulsf3_pse+0x82>
    1374:	86 95       	lsr	r24
    1376:	77 95       	ror	r23
    1378:	67 95       	ror	r22
    137a:	b7 95       	ror	r27
    137c:	f7 95       	ror	r31
    137e:	e7 95       	ror	r30
    1380:	9f 5f       	subi	r25, 0xFF	; 255
    1382:	c1 f7       	brne	.-16     	; 0x1374 <__mulsf3_pse+0x8c>
    1384:	fe 2b       	or	r31, r30
    1386:	88 0f       	add	r24, r24
    1388:	91 1d       	adc	r25, r1
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	97 f9       	bld	r25, 7
    1390:	08 95       	ret

00001392 <__divmodhi4>:
    1392:	97 fb       	bst	r25, 7
    1394:	07 2e       	mov	r0, r23
    1396:	16 f4       	brtc	.+4      	; 0x139c <__divmodhi4+0xa>
    1398:	00 94       	com	r0
    139a:	06 d0       	rcall	.+12     	; 0x13a8 <__divmodhi4_neg1>
    139c:	77 fd       	sbrc	r23, 7
    139e:	08 d0       	rcall	.+16     	; 0x13b0 <__divmodhi4_neg2>
    13a0:	0b d0       	rcall	.+22     	; 0x13b8 <__udivmodhi4>
    13a2:	07 fc       	sbrc	r0, 7
    13a4:	05 d0       	rcall	.+10     	; 0x13b0 <__divmodhi4_neg2>
    13a6:	3e f4       	brtc	.+14     	; 0x13b6 <__divmodhi4_exit>

000013a8 <__divmodhi4_neg1>:
    13a8:	90 95       	com	r25
    13aa:	81 95       	neg	r24
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	08 95       	ret

000013b0 <__divmodhi4_neg2>:
    13b0:	70 95       	com	r23
    13b2:	61 95       	neg	r22
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255

000013b6 <__divmodhi4_exit>:
    13b6:	08 95       	ret

000013b8 <__udivmodhi4>:
    13b8:	aa 1b       	sub	r26, r26
    13ba:	bb 1b       	sub	r27, r27
    13bc:	51 e1       	ldi	r21, 0x11	; 17
    13be:	07 c0       	rjmp	.+14     	; 0x13ce <__udivmodhi4_ep>

000013c0 <__udivmodhi4_loop>:
    13c0:	aa 1f       	adc	r26, r26
    13c2:	bb 1f       	adc	r27, r27
    13c4:	a6 17       	cp	r26, r22
    13c6:	b7 07       	cpc	r27, r23
    13c8:	10 f0       	brcs	.+4      	; 0x13ce <__udivmodhi4_ep>
    13ca:	a6 1b       	sub	r26, r22
    13cc:	b7 0b       	sbc	r27, r23

000013ce <__udivmodhi4_ep>:
    13ce:	88 1f       	adc	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	5a 95       	dec	r21
    13d4:	a9 f7       	brne	.-22     	; 0x13c0 <__udivmodhi4_loop>
    13d6:	80 95       	com	r24
    13d8:	90 95       	com	r25
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	08 95       	ret

000013e0 <_exit>:
    13e0:	f8 94       	cli

000013e2 <__stop_program>:
    13e2:	ff cf       	rjmp	.-2      	; 0x13e2 <__stop_program>
