
mainframev2.1.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00002f22  00002fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000168  00800124  00800124  00002fda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002fda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000300c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b7f  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001009  00000000  00000000  00006da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001722  00000000  00000000  00007dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000afc  00000000  00000000  000094d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2d  00000000  00000000  00009fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a4e  00000000  00000000  0000aaf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000f547  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	87 c0       	rjmp	.+270    	; 0x114 <__bad_interrupt>
       6:	00 00       	nop
       8:	85 c0       	rjmp	.+266    	; 0x114 <__bad_interrupt>
       a:	00 00       	nop
       c:	83 c0       	rjmp	.+262    	; 0x114 <__bad_interrupt>
       e:	00 00       	nop
      10:	81 c0       	rjmp	.+258    	; 0x114 <__bad_interrupt>
      12:	00 00       	nop
      14:	7f c0       	rjmp	.+254    	; 0x114 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c0       	rjmp	.+250    	; 0x114 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c0       	rjmp	.+246    	; 0x114 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c0       	rjmp	.+242    	; 0x114 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c0       	rjmp	.+238    	; 0x114 <__bad_interrupt>
      26:	00 00       	nop
      28:	ba c7       	rjmp	.+3956   	; 0xf9e <__vector_10>
      2a:	00 00       	nop
      2c:	73 c0       	rjmp	.+230    	; 0x114 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c0       	rjmp	.+226    	; 0x114 <__bad_interrupt>
      32:	00 00       	nop
      34:	6f c0       	rjmp	.+222    	; 0x114 <__bad_interrupt>
      36:	00 00       	nop
      38:	6d c0       	rjmp	.+218    	; 0x114 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c0       	rjmp	.+214    	; 0x114 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d7 c1       	rjmp	.+942    	; 0x3f0 <__vector_16>
      42:	00 00       	nop
      44:	67 c0       	rjmp	.+206    	; 0x114 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c0       	rjmp	.+202    	; 0x114 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c0       	rjmp	.+198    	; 0x114 <__bad_interrupt>
      4e:	00 00       	nop
      50:	61 c0       	rjmp	.+194    	; 0x114 <__bad_interrupt>
      52:	00 00       	nop
      54:	5f c0       	rjmp	.+190    	; 0x114 <__bad_interrupt>
      56:	00 00       	nop
      58:	5d c0       	rjmp	.+186    	; 0x114 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5b c0       	rjmp	.+182    	; 0x114 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c0       	rjmp	.+178    	; 0x114 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c0       	rjmp	.+174    	; 0x114 <__bad_interrupt>
      66:	00 00       	nop
      68:	55 c0       	rjmp	.+170    	; 0x114 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	53 c0       	rjmp	.+166    	; 0x114 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c0       	rjmp	.+162    	; 0x114 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c0       	rjmp	.+158    	; 0x114 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c0       	rjmp	.+154    	; 0x114 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c0       	rjmp	.+150    	; 0x114 <__bad_interrupt>
      7e:	00 00       	nop
      80:	49 c0       	rjmp	.+146    	; 0x114 <__bad_interrupt>
      82:	00 00       	nop
      84:	47 c0       	rjmp	.+142    	; 0x114 <__bad_interrupt>
      86:	00 00       	nop
      88:	45 c0       	rjmp	.+138    	; 0x114 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e1       	ldi	r29, 0x10	; 16
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	11 e0       	ldi	r17, 0x01	; 1
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e2 e2       	ldi	r30, 0x22	; 34
      ec:	ff e2       	ldi	r31, 0x2F	; 47
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a4 32       	cpi	r26, 0x24	; 36
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	a4 e2       	ldi	r26, 0x24	; 36
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	ac 38       	cpi	r26, 0x8C	; 140
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	55 d7       	rcall	.+3754   	; 0xfba <main>
     110:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <_exit>

00000114 <__bad_interrupt>:
     114:	75 cf       	rjmp	.-278    	; 0x0 <__vectors>

00000116 <i2c_init>:
//	input:
//		hz - data transfer rate in Hz
//============================================
void i2c_init(int32_t hz)
{
	TWSR = 0x00;
     116:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	//TWSR = 1<<TWPS0;		// 비트율 프리스케일러값을 1로 한다.

	// 비트율 설정
	TWBR = 0x0c;
     11a:	8c e0       	ldi	r24, 0x0C	; 12
     11c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     120:	08 95       	ret

00000122 <i2c_write_a_byte>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_write_a_byte(uint8_t i2c_addr, uint8_t data, int with_stop)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	8a 01       	movw	r16, r20
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
     12c:	88 0f       	add	r24, r24
     12e:	2a e0       	ldi	r18, 0x0A	; 10
     130:	30 e0       	ldi	r19, 0x00	; 0
{
	int time_out = TIME_OUT_CNT;
	 
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     132:	e4 e7       	ldi	r30, 0x74	; 116
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	54 ea       	ldi	r21, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     138:	a1 e7       	ldi	r26, 0x71	; 113
     13a:	b0 e0       	ldi	r27, 0x00	; 0
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
     13c:	c3 e7       	ldi	r28, 0x73	; 115
     13e:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     140:	44 e8       	ldi	r20, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     142:	74 e9       	ldi	r23, 0x94	; 148
{
	int time_out = TIME_OUT_CNT;
	 
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     144:	50 83       	st	Z, r21
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     146:	90 81       	ld	r25, Z
     148:	99 23       	and	r25, r25
     14a:	ec f7       	brge	.-6      	; 0x146 <i2c_write_a_byte+0x24>
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     14c:	9c 91       	ld	r25, X
     14e:	98 7f       	andi	r25, 0xF8	; 248
     150:	98 30       	cpi	r25, 0x08	; 8
     152:	89 f5       	brne	.+98     	; 0x1b6 <i2c_write_a_byte+0x94>
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)
     154:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     156:	40 83       	st	Z, r20
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
     158:	90 81       	ld	r25, Z
     15a:	99 23       	and	r25, r25
     15c:	ec f7       	brge	.-6      	; 0x158 <i2c_write_a_byte+0x36>
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
     15e:	9c 91       	ld	r25, X
     160:	98 7f       	andi	r25, 0xF8	; 248
     162:	98 31       	cpi	r25, 0x18	; 24
     164:	61 f0       	breq	.+24     	; 0x17e <i2c_write_a_byte+0x5c>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     166:	70 83       	st	Z, r23
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     168:	90 81       	ld	r25, Z
     16a:	94 fd       	sbrc	r25, 4
     16c:	fd cf       	rjmp	.-6      	; 0x168 <i2c_write_a_byte+0x46>
     16e:	21 50       	subi	r18, 0x01	; 1
     170:	31 09       	sbc	r19, r1

			time_out--;
			if(time_out <= 0) return -2;
     172:	21 f1       	breq	.+72     	; 0x1bc <i2c_write_a_byte+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     174:	95 e3       	ldi	r25, 0x35	; 53
     176:	9a 95       	dec	r25
     178:	f1 f7       	brne	.-4      	; 0x176 <i2c_write_a_byte+0x54>
     17a:	00 00       	nop
     17c:	e3 cf       	rjmp	.-58     	; 0x144 <i2c_write_a_byte+0x22>
	}

	//--------------------------------------------------------
	// write i-th data to slave
	//--------------------------------------------------------
	TWDR = data;
     17e:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     182:	84 e8       	ldi	r24, 0x84	; 132
     184:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));			// wait until data is sent.
     188:	e4 e7       	ldi	r30, 0x74	; 116
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	ec f7       	brge	.-6      	; 0x18c <i2c_write_a_byte+0x6a>

	// check if ACK is received from slave after sending data
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     192:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     196:	88 7f       	andi	r24, 0xF8	; 248
     198:	88 32       	cpi	r24, 0x28	; 40
     19a:	99 f4       	brne	.+38     	; 0x1c2 <i2c_write_a_byte+0xa0>
	
	//----------------------------------
	// send STOP condition
	//----------------------------------

	if(with_stop)
     19c:	01 2b       	or	r16, r17
     19e:	a1 f0       	breq	.+40     	; 0x1c8 <i2c_write_a_byte+0xa6>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     1a0:	84 e9       	ldi	r24, 0x94	; 148
     1a2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
		while((TWCR & (1<<TWSTO)));					// wait until STOP condition is sent and release bus
     1a6:	e4 e7       	ldi	r30, 0x74	; 116
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	84 fd       	sbrc	r24, 4
     1ae:	fd cf       	rjmp	.-6      	; 0x1aa <i2c_write_a_byte+0x88>
	}

	return 0;
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0b c0       	rjmp	.+22     	; 0x1cc <i2c_write_a_byte+0xaa>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;
     1b6:	8f ef       	ldi	r24, 0xFF	; 255
     1b8:	9f ef       	ldi	r25, 0xFF	; 255
     1ba:	08 c0       	rjmp	.+16     	; 0x1cc <i2c_write_a_byte+0xaa>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     1bc:	8e ef       	ldi	r24, 0xFE	; 254
     1be:	9f ef       	ldi	r25, 0xFF	; 255
     1c0:	05 c0       	rjmp	.+10     	; 0x1cc <i2c_write_a_byte+0xaa>
	TWCR = (1<<TWINT) | (1<<TWEN);			// send data
	while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

	// check if ACK is received from slave after sending data
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
		return -3;
     1c2:	8d ef       	ldi	r24, 0xFD	; 253
     1c4:	9f ef       	ldi	r25, 0xFF	; 255
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <i2c_write_a_byte+0xaa>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
		while((TWCR & (1<<TWSTO)));					// wait until STOP condition is sent and release bus
	}

	return 0;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	08 95       	ret

000001d6 <i2c_write_n_bytes>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_write_n_bytes(uint8_t i2c_addr, uint8_t *buffer, int n, int with_stop)
{
     1d6:	af 92       	push	r10
     1d8:	bf 92       	push	r11
     1da:	df 92       	push	r13
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     1e8:	e8 2e       	mov	r14, r24
     1ea:	ee 0c       	add	r14, r14
     1ec:	aa e0       	ldi	r26, 0x0A	; 10
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     1f0:	e4 e7       	ldi	r30, 0x74	; 116
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	84 ea       	ldi	r24, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f1 e7       	ldi	r31, 0x71	; 113
     1fa:	af 2e       	mov	r10, r31
     1fc:	b1 2c       	mov	r11, r1
     1fe:	f0 2d       	mov	r31, r0
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     200:	03 e7       	ldi	r16, 0x73	; 115
     202:	10 e0       	ldi	r17, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     204:	0f 2e       	mov	r0, r31
     206:	f4 e8       	ldi	r31, 0x84	; 132
     208:	ff 2e       	mov	r15, r31
     20a:	f0 2d       	mov	r31, r0
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     20c:	0f 2e       	mov	r0, r31
     20e:	f4 e9       	ldi	r31, 0x94	; 148
     210:	df 2e       	mov	r13, r31
     212:	f0 2d       	mov	r31, r0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
     214:	80 83       	st	Z, r24
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     216:	90 81       	ld	r25, Z
     218:	99 23       	and	r25, r25
     21a:	ec f7       	brge	.-6      	; 0x216 <i2c_write_n_bytes+0x40>
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
     21c:	e5 01       	movw	r28, r10
     21e:	98 81       	ld	r25, Y
     220:	98 7f       	andi	r25, 0xF8	; 248
     222:	98 30       	cpi	r25, 0x08	; 8
     224:	09 f0       	breq	.+2      	; 0x228 <i2c_write_n_bytes+0x52>
     226:	40 c0       	rjmp	.+128    	; 0x2a8 <i2c_write_n_bytes+0xd2>
			return -1;

		TWDR = (i2c_addr << 1);						// SLA_W : (i2c_addr << 1)				
     228:	e8 01       	movw	r28, r16
     22a:	e8 82       	st	Y, r14
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
     22c:	f0 82       	st	Z, r15
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
     22e:	90 81       	ld	r25, Z
     230:	99 23       	and	r25, r25
     232:	ec f7       	brge	.-6      	; 0x22e <i2c_write_n_bytes+0x58>
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
     234:	e5 01       	movw	r28, r10
     236:	98 81       	ld	r25, Y
     238:	98 7f       	andi	r25, 0xF8	; 248
     23a:	98 31       	cpi	r25, 0x18	; 24
     23c:	21 f4       	brne	.+8      	; 0x246 <i2c_write_n_bytes+0x70>
		{
			break;
		}
	}

	for(i=0; i<n; i++)
     23e:	14 16       	cp	r1, r20
     240:	15 06       	cpc	r1, r21
     242:	64 f0       	brlt	.+24     	; 0x25c <i2c_write_n_bytes+0x86>
     244:	24 c0       	rjmp	.+72     	; 0x28e <i2c_write_n_bytes+0xb8>
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_W.
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_W is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)	// check if slave returns acknowledgment
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     246:	d0 82       	st	Z, r13
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     248:	90 81       	ld	r25, Z
     24a:	94 fd       	sbrc	r25, 4
     24c:	fd cf       	rjmp	.-6      	; 0x248 <i2c_write_n_bytes+0x72>
     24e:	11 97       	sbiw	r26, 0x01	; 1

			time_out--;
			if(time_out <= 0) return -2;
     250:	71 f1       	breq	.+92     	; 0x2ae <i2c_write_n_bytes+0xd8>
     252:	d5 e3       	ldi	r29, 0x35	; 53
     254:	da 95       	dec	r29
     256:	f1 f7       	brne	.-4      	; 0x254 <i2c_write_n_bytes+0x7e>
     258:	00 00       	nop
     25a:	dc cf       	rjmp	.-72     	; 0x214 <i2c_write_n_bytes+0x3e>
     25c:	db 01       	movw	r26, r22
     25e:	46 0f       	add	r20, r22
     260:	57 1f       	adc	r21, r23
	for(i=0; i<n; i++)
	{
		//--------------------------------------------------------
		// write i-th data to slave
		//--------------------------------------------------------
		TWDR = buffer[i];
     262:	63 e7       	ldi	r22, 0x73	; 115
     264:	70 e0       	ldi	r23, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     266:	e4 e7       	ldi	r30, 0x74	; 116
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	94 e8       	ldi	r25, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     26c:	01 e7       	ldi	r16, 0x71	; 113
     26e:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<n; i++)
	{
		//--------------------------------------------------------
		// write i-th data to slave
		//--------------------------------------------------------
		TWDR = buffer[i];
     270:	8d 91       	ld	r24, X+
     272:	eb 01       	movw	r28, r22
     274:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
     276:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.
     278:	80 81       	ld	r24, Z
     27a:	88 23       	and	r24, r24
     27c:	ec f7       	brge	.-6      	; 0x278 <i2c_write_n_bytes+0xa2>

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
     27e:	e8 01       	movw	r28, r16
     280:	88 81       	ld	r24, Y
     282:	88 7f       	andi	r24, 0xF8	; 248
     284:	88 32       	cpi	r24, 0x28	; 40
     286:	b1 f4       	brne	.+44     	; 0x2b4 <i2c_write_n_bytes+0xde>
		{
			break;
		}
	}

	for(i=0; i<n; i++)
     288:	a4 17       	cp	r26, r20
     28a:	b5 07       	cpc	r27, r21
     28c:	89 f7       	brne	.-30     	; 0x270 <i2c_write_n_bytes+0x9a>
	}
	
	//----------------------------------
	// send STOP condition
	//----------------------------------
	if(with_stop)
     28e:	23 2b       	or	r18, r19
     290:	a1 f0       	breq	.+40     	; 0x2ba <i2c_write_n_bytes+0xe4>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     292:	84 e9       	ldi	r24, 0x94	; 148
     294:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
		while((TWCR & (1<<TWSTO)));				// wait until STOP condition is sent.
     298:	e4 e7       	ldi	r30, 0x74	; 116
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	84 fd       	sbrc	r24, 4
     2a0:	fd cf       	rjmp	.-6      	; 0x29c <i2c_write_n_bytes+0xc6>
	}

	return 0;
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0b c0       	rjmp	.+22     	; 0x2be <i2c_write_n_bytes+0xe8>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if((TWSR & TW_STATUS_MASK) != TW_START)		// check if START condition is sent normally.
			return -1;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	9f ef       	ldi	r25, 0xFF	; 255
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <i2c_write_n_bytes+0xe8>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     2ae:	8e ef       	ldi	r24, 0xFE	; 254
     2b0:	9f ef       	ldi	r25, 0xFF	; 255
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <i2c_write_n_bytes+0xe8>
		TWCR = (1<<TWINT) | (1<<TWEN);			// send data
		while(!(TWCR & (1<<TWINT)));			// wait until data is sent.

		// check if ACK is received from slave after sending data
		if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK)
			return -3;
     2b4:	8d ef       	ldi	r24, 0xFD	; 253
     2b6:	9f ef       	ldi	r25, 0xFF	; 255
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <i2c_write_n_bytes+0xe8>
	{
		TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
		while((TWCR & (1<<TWSTO)));				// wait until STOP condition is sent.
	}

	return 0;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	bf 90       	pop	r11
     2ce:	af 90       	pop	r10
     2d0:	08 95       	ret

000002d2 <i2c_read_n_bytes>:
//		0		- success
//	   negative	- fail to write
//===================================================================
//
int i2c_read_n_bytes(uint8_t i2c_addr, uint8_t *data, int n)
{
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     2de:	88 0f       	add	r24, r24
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	2a e0       	ldi	r18, 0x0A	; 10
     2e4:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
     2e6:	e4 e7       	ldi	r30, 0x74	; 116
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	14 ea       	ldi	r17, 0xA4	; 164
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     2ec:	a1 e7       	ldi	r26, 0x71	; 113
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     2f0:	c3 e7       	ldi	r28, 0x73	; 115
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
     2f4:	04 e8       	ldi	r16, 0x84	; 132
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     2f6:	0f 2e       	mov	r0, r31
     2f8:	f4 e9       	ldi	r31, 0x94	; 148
     2fa:	ff 2e       	mov	r15, r31
     2fc:	f0 2d       	mov	r31, r0
	int i;
	int time_out = TIME_OUT_CNT;

	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
     2fe:	10 83       	st	Z, r17
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
     300:	90 81       	ld	r25, Z
     302:	99 23       	and	r25, r25
     304:	ec f7       	brge	.-6      	; 0x300 <i2c_read_n_bytes+0x2e>
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     306:	9c 91       	ld	r25, X
     308:	98 7f       	andi	r25, 0xF8	; 248
     30a:	98 30       	cpi	r25, 0x08	; 8
     30c:	29 f0       	breq	.+10     	; 0x318 <i2c_read_n_bytes+0x46>
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
     30e:	9c 91       	ld	r25, X
	while(1)
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
     310:	98 7f       	andi	r25, 0xF8	; 248
     312:	90 31       	cpi	r25, 0x10	; 16
     314:	09 f0       	breq	.+2      	; 0x318 <i2c_read_n_bytes+0x46>
     316:	5a c0       	rjmp	.+180    	; 0x3cc <i2c_read_n_bytes+0xfa>
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;

		TWDR = (i2c_addr << 1) | 0x01;				// SLA_R : (i2c_addr << 1) | 0x01
     318:	88 83       	st	Y, r24
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
     31a:	00 83       	st	Z, r16
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
     31c:	90 81       	ld	r25, Z
     31e:	99 23       	and	r25, r25
     320:	ec f7       	brge	.-6      	; 0x31c <i2c_read_n_bytes+0x4a>
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
     322:	9c 91       	ld	r25, X
     324:	98 7f       	andi	r25, 0xF8	; 248
     326:	90 34       	cpi	r25, 0x40	; 64
     328:	41 f4       	brne	.+16     	; 0x33a <i2c_read_n_bytes+0x68>
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     32a:	41 50       	subi	r20, 0x01	; 1
     32c:	51 09       	sbc	r21, r1
     32e:	14 16       	cp	r1, r20
     330:	15 06       	cpc	r1, r21
     332:	84 f0       	brlt	.+32     	; 0x354 <i2c_read_n_bytes+0x82>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	2b c0       	rjmp	.+86     	; 0x390 <i2c_read_n_bytes+0xbe>
		TWCR = (1<<TWINT) | (1<<TWEN);				// send SLA_R.
		while(!(TWCR & (1<<TWINT)));				// wait until SLA_R is sent.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
     33a:	f0 82       	st	Z, r15
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.
     33c:	90 81       	ld	r25, Z
     33e:	94 fd       	sbrc	r25, 4
     340:	fd cf       	rjmp	.-6      	; 0x33c <i2c_read_n_bytes+0x6a>
     342:	21 50       	subi	r18, 0x01	; 1
     344:	31 09       	sbc	r19, r1

			time_out--;
			if(time_out <= 0) return -2;
     346:	09 f4       	brne	.+2      	; 0x34a <i2c_read_n_bytes+0x78>
     348:	44 c0       	rjmp	.+136    	; 0x3d2 <i2c_read_n_bytes+0x100>
     34a:	95 e3       	ldi	r25, 0x35	; 53
     34c:	9a 95       	dec	r25
     34e:	f1 f7       	brne	.-4      	; 0x34c <i2c_read_n_bytes+0x7a>
     350:	00 00       	nop
     352:	d5 cf       	rjmp	.-86     	; 0x2fe <i2c_read_n_bytes+0x2c>
     354:	db 01       	movw	r26, r22
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
	{
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
     35a:	e4 e7       	ldi	r30, 0x74	; 116
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
     360:	0f 2e       	mov	r0, r31
     362:	f1 e7       	ldi	r31, 0x71	; 113
     364:	ef 2e       	mov	r14, r31
     366:	f1 2c       	mov	r15, r1
     368:	f0 2d       	mov	r31, r0
			return -6;
		
		data[i] = TWDR;								// read data.
     36a:	03 e7       	ldi	r16, 0x73	; 115
     36c:	10 e0       	ldi	r17, 0x00	; 0
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
	{
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
     36e:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
     370:	80 81       	ld	r24, Z
     372:	88 23       	and	r24, r24
     374:	ec f7       	brge	.-6      	; 0x370 <i2c_read_n_bytes+0x9e>
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
     376:	e7 01       	movw	r28, r14
     378:	88 81       	ld	r24, Y
     37a:	88 7f       	andi	r24, 0xF8	; 248
     37c:	80 35       	cpi	r24, 0x50	; 80
     37e:	61 f5       	brne	.+88     	; 0x3d8 <i2c_read_n_bytes+0x106>
			return -6;
		
		data[i] = TWDR;								// read data.
     380:	e8 01       	movw	r28, r16
     382:	88 81       	ld	r24, Y
     384:	8d 93       	st	X+, r24
	}

	//----------------------
	// read data
	//----------------------
	for(i=0; i<n-1; i++)
     386:	2f 5f       	subi	r18, 0xFF	; 255
     388:	3f 4f       	sbci	r19, 0xFF	; 255
     38a:	24 17       	cp	r18, r20
     38c:	35 07       	cpc	r19, r21
     38e:	7c f3       	brlt	.-34     	; 0x36e <i2c_read_n_bytes+0x9c>
		data[i] = TWDR;								// read data.
	}

	// if read the last byte, send NACK.

	TWCR = (1<<TWINT) | (1<<TWEN);					// after receiving data, do end NACK
     390:	84 e8       	ldi	r24, 0x84	; 132
     392:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));					// wait until receiving data.
     396:	e4 e7       	ldi	r30, 0x74	; 116
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	88 23       	and	r24, r24
     39e:	ec f7       	brge	.-6      	; 0x39a <i2c_read_n_bytes+0xc8>
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK)
     3a0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	88 35       	cpi	r24, 0x58	; 88
     3a8:	d1 f4       	brne	.+52     	; 0x3de <i2c_read_n_bytes+0x10c>
		return -7;
	
	data[i] = TWDR;									// read the last data
     3aa:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     3ae:	fb 01       	movw	r30, r22
     3b0:	e2 0f       	add	r30, r18
     3b2:	f3 1f       	adc	r31, r19
     3b4:	80 83       	st	Z, r24

	//-----------------------------
	// send STOP condition.
	//-----------------------------

	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     3b6:	84 e9       	ldi	r24, 0x94	; 148
     3b8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(TWCR & (1<<TWSTO));						// wait until STOP condition is sent
     3bc:	e4 e7       	ldi	r30, 0x74	; 116
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	84 fd       	sbrc	r24, 4
     3c4:	fd cf       	rjmp	.-6      	; 0x3c0 <i2c_read_n_bytes+0xee>
	
	return 0;
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <i2c_read_n_bytes+0x110>
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);	// send START or REPEATED START condition
		
		while(!(TWCR & (1<<TWINT))); 				// wait until START condition is sent.
		if(!((TWSR & TW_STATUS_MASK) == TW_START ||		// check if START condition is sent normally.
		     (TWSR & TW_STATUS_MASK) == TW_REP_START))
			return -1;
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
     3ce:	9f ef       	ldi	r25, 0xFF	; 255
     3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <i2c_read_n_bytes+0x110>
		{
			TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // send STOP condition.
			while(TWCR & (1<<TWSTO));					// wait until STOP condition is sent.

			time_out--;
			if(time_out <= 0) return -2;
     3d2:	8e ef       	ldi	r24, 0xFE	; 254
     3d4:	9f ef       	ldi	r25, 0xFF	; 255
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <i2c_read_n_bytes+0x110>
		// send ACK after receiving data
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// if receiving data, send ACK.
		while(!(TWCR & (1<<TWINT)));				// wait until receiving data.
		
		if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK)
			return -6;
     3d8:	8a ef       	ldi	r24, 0xFA	; 250
     3da:	9f ef       	ldi	r25, 0xFF	; 255
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <i2c_read_n_bytes+0x110>

	TWCR = (1<<TWINT) | (1<<TWEN);					// after receiving data, do end NACK
	while(!(TWCR & (1<<TWINT)));					// wait until receiving data.
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK)
		return -7;
     3de:	89 ef       	ldi	r24, 0xF9	; 249
     3e0:	9f ef       	ldi	r25, 0xFF	; 255

	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
	while(TWCR & (1<<TWSTO));						// wait until STOP condition is sent
	
	return 0;
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	08 95       	ret

000003f0 <__vector_16>:
uint16_t v1 = 0;
uint16_t v2 = 0;
int k = 0;

ISR(TIMER0_OVF_vect) 				// 타이머0 오버플로 인터럽트 서비스루틴
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	0b b6       	in	r0, 0x3b	; 59
     3fc:	0f 92       	push	r0
     3fe:	4f 92       	push	r4
     400:	5f 92       	push	r5
     402:	6f 92       	push	r6
     404:	7f 92       	push	r7
     406:	8f 92       	push	r8
     408:	9f 92       	push	r9
     40a:	af 92       	push	r10
     40c:	bf 92       	push	r11
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	2f 93       	push	r18
     41c:	3f 93       	push	r19
     41e:	4f 93       	push	r20
     420:	5f 93       	push	r21
     422:	6f 93       	push	r22
     424:	7f 93       	push	r23
     426:	8f 93       	push	r24
     428:	9f 93       	push	r25
     42a:	af 93       	push	r26
     42c:	bf 93       	push	r27
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	2c 97       	sbiw	r28, 0x0c	; 12
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	cd bf       	out	0x3d, r28	; 61

	TCNT0 = 6;	//131				// 16msec 후에 인터럽트발생
     440:	86 e0       	ldi	r24, 0x06	; 6
     442:	82 bf       	out	0x32, r24	; 50
	n_enter++;						// 인터럽트 횟수 증가
     444:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <n_enter>
     448:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <n_enter+0x1>
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <n_enter+0x1>
     452:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <n_enter>
	MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
     456:	6a e0       	ldi	r22, 0x0A	; 10
     458:	72 e0       	ldi	r23, 0x02	; 2
     45a:	82 e5       	ldi	r24, 0x52	; 82
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 9e 0b 	call	0x173c	; 0x173c <MPU9250I2CReadIMU_f>
	gyroxx=-(gyro2_f[0]-avgxx);		//orient change1
     462:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <avgxx>
     466:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <avgxx+0x1>
     46a:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <avgxx+0x2>
     46e:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <avgxx+0x3>
     472:	aa e0       	ldi	r26, 0x0A	; 10
     474:	b2 e0       	ldi	r27, 0x02	; 2
     476:	6d 91       	ld	r22, X+
     478:	7d 91       	ld	r23, X+
     47a:	8d 91       	ld	r24, X+
     47c:	9c 91       	ld	r25, X
     47e:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     482:	4b 01       	movw	r8, r22
     484:	5c 01       	movw	r10, r24
     486:	b7 fa       	bst	r11, 7
     488:	b0 94       	com	r11
     48a:	b7 f8       	bld	r11, 7
     48c:	b0 94       	com	r11
     48e:	80 92 c0 01 	sts	0x01C0, r8	; 0x8001c0 <gyroxx>
     492:	90 92 c1 01 	sts	0x01C1, r9	; 0x8001c1 <gyroxx+0x1>
     496:	a0 92 c2 01 	sts	0x01C2, r10	; 0x8001c2 <gyroxx+0x2>
     49a:	b0 92 c3 01 	sts	0x01C3, r11	; 0x8001c3 <gyroxx+0x3>
	gyroyy=-(gyro2_f[1]-avgyy);
     49e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <avgyy>
     4a2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <avgyy+0x1>
     4a6:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <avgyy+0x2>
     4aa:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <avgyy+0x3>
     4ae:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <gyro2_f+0x4>
     4b2:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <gyro2_f+0x5>
     4b6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <gyro2_f+0x6>
     4ba:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <gyro2_f+0x7>
     4be:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     4c2:	6b 01       	movw	r12, r22
     4c4:	7c 01       	movw	r14, r24
     4c6:	f7 fa       	bst	r15, 7
     4c8:	f0 94       	com	r15
     4ca:	f7 f8       	bld	r15, 7
     4cc:	f0 94       	com	r15
     4ce:	c0 92 bc 01 	sts	0x01BC, r12	; 0x8001bc <gyroyy>
     4d2:	d0 92 bd 01 	sts	0x01BD, r13	; 0x8001bd <gyroyy+0x1>
     4d6:	e0 92 be 01 	sts	0x01BE, r14	; 0x8001be <gyroyy+0x2>
     4da:	f0 92 bf 01 	sts	0x01BF, r15	; 0x8001bf <gyroyy+0x3>
	gyrozz=-(gyro2_f[2]-avgzz);
     4de:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <avgzz>
     4e2:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <avgzz+0x1>
     4e6:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <avgzz+0x2>
     4ea:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <avgzz+0x3>
     4ee:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <gyro2_f+0x8>
     4f2:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <gyro2_f+0x9>
     4f6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <gyro2_f+0xa>
     4fa:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <gyro2_f+0xb>
     4fe:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     502:	2b 01       	movw	r4, r22
     504:	3c 01       	movw	r6, r24
     506:	77 fa       	bst	r7, 7
     508:	70 94       	com	r7
     50a:	77 f8       	bld	r7, 7
     50c:	70 94       	com	r7
     50e:	40 92 b8 01 	sts	0x01B8, r4	; 0x8001b8 <gyrozz>
     512:	50 92 b9 01 	sts	0x01B9, r5	; 0x8001b9 <gyrozz+0x1>
     516:	60 92 ba 01 	sts	0x01BA, r6	; 0x8001ba <gyrozz+0x2>
     51a:	70 92 bb 01 	sts	0x01BB, r7	; 0x8001bb <gyrozz+0x3>
	
	//filter
	f_gx_now=gyroxx-alpha*(gyroxx-f_gx_last);
     51e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     522:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     526:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     52a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	9a 83       	std	Y+2, r25	; 0x02
     532:	ab 83       	std	Y+3, r26	; 0x03
     534:	bc 83       	std	Y+4, r27	; 0x04
     536:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <f_gx_last>
     53a:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <f_gx_last+0x1>
     53e:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <f_gx_last+0x2>
     542:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <f_gx_last+0x3>
     546:	c5 01       	movw	r24, r10
     548:	b4 01       	movw	r22, r8
     54a:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     54e:	29 81       	ldd	r18, Y+1	; 0x01
     550:	3a 81       	ldd	r19, Y+2	; 0x02
     552:	4b 81       	ldd	r20, Y+3	; 0x03
     554:	5c 81       	ldd	r21, Y+4	; 0x04
     556:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	c5 01       	movw	r24, r10
     560:	b4 01       	movw	r22, r8
     562:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     566:	6d 83       	std	Y+5, r22	; 0x05
     568:	7e 83       	std	Y+6, r23	; 0x06
     56a:	8f 83       	std	Y+7, r24	; 0x07
     56c:	98 87       	std	Y+8, r25	; 0x08
     56e:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <f_gx_now>
     572:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <f_gx_now+0x1>
     576:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <f_gx_now+0x2>
     57a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <f_gx_now+0x3>
	f_gy_now=gyroyy-alpha*(gyroyy-f_gy_last);
     57e:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <f_gy_last>
     582:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <f_gy_last+0x1>
     586:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <f_gy_last+0x2>
     58a:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <f_gy_last+0x3>
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     596:	29 81       	ldd	r18, Y+1	; 0x01
     598:	3a 81       	ldd	r19, Y+2	; 0x02
     59a:	4b 81       	ldd	r20, Y+3	; 0x03
     59c:	5c 81       	ldd	r21, Y+4	; 0x04
     59e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     5a2:	9b 01       	movw	r18, r22
     5a4:	ac 01       	movw	r20, r24
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     5ae:	69 87       	std	Y+9, r22	; 0x09
     5b0:	7a 87       	std	Y+10, r23	; 0x0a
     5b2:	8b 87       	std	Y+11, r24	; 0x0b
     5b4:	9c 87       	std	Y+12, r25	; 0x0c
     5b6:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <f_gy_now>
     5ba:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <f_gy_now+0x1>
     5be:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <f_gy_now+0x2>
     5c2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <f_gy_now+0x3>
	f_gz_now=gyrozz-alpha*(gyrozz-f_gz_last);
     5c6:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <f_gz_last>
     5ca:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <f_gz_last+0x1>
     5ce:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <f_gz_last+0x2>
     5d2:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <f_gz_last+0x3>
     5d6:	c3 01       	movw	r24, r6
     5d8:	b2 01       	movw	r22, r4
     5da:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     5de:	29 81       	ldd	r18, Y+1	; 0x01
     5e0:	3a 81       	ldd	r19, Y+2	; 0x02
     5e2:	4b 81       	ldd	r20, Y+3	; 0x03
     5e4:	5c 81       	ldd	r21, Y+4	; 0x04
     5e6:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     5ea:	9b 01       	movw	r18, r22
     5ec:	ac 01       	movw	r20, r24
     5ee:	c3 01       	movw	r24, r6
     5f0:	b2 01       	movw	r22, r4
     5f2:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     5f6:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <f_gz_now>
     5fa:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <f_gz_now+0x1>
     5fe:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <f_gz_now+0x2>
     602:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <f_gz_now+0x3>
	Quaternion_set(0, -f_gx_now, -f_gy_now, -f_gz_now, &omega);
     606:	5b 01       	movw	r10, r22
     608:	6c 01       	movw	r12, r24
     60a:	d7 fa       	bst	r13, 7
     60c:	d0 94       	com	r13
     60e:	d7 f8       	bld	r13, 7
     610:	d0 94       	com	r13
     612:	e9 84       	ldd	r14, Y+9	; 0x09
     614:	fa 84       	ldd	r15, Y+10	; 0x0a
     616:	0b 85       	ldd	r16, Y+11	; 0x0b
     618:	1c 85       	ldd	r17, Y+12	; 0x0c
     61a:	17 fb       	bst	r17, 7
     61c:	10 95       	com	r17
     61e:	17 f9       	bld	r17, 7
     620:	10 95       	com	r17
     622:	2d 81       	ldd	r18, Y+5	; 0x05
     624:	3e 81       	ldd	r19, Y+6	; 0x06
     626:	4f 81       	ldd	r20, Y+7	; 0x07
     628:	58 85       	ldd	r21, Y+8	; 0x08
     62a:	50 58       	subi	r21, 0x80	; 128
     62c:	0f 2e       	mov	r0, r31
     62e:	fe e5       	ldi	r31, 0x5E	; 94
     630:	8f 2e       	mov	r8, r31
     632:	f2 e0       	ldi	r31, 0x02	; 2
     634:	9f 2e       	mov	r9, r31
     636:	f0 2d       	mov	r31, r0
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	cb 01       	movw	r24, r22
     63e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <Quaternion_set>
	Quaternion_multiply(&orientation, &omega, &delta);
     642:	42 e4       	ldi	r20, 0x42	; 66
     644:	52 e0       	ldi	r21, 0x02	; 2
     646:	b4 01       	movw	r22, r8
     648:	82 ed       	ldi	r24, 0xD2	; 210
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <Quaternion_multiply>
	Quaternion_ratio(&delta, 0.5 * 16 / 1000, &delta);
     650:	22 e4       	ldi	r18, 0x42	; 66
     652:	32 e0       	ldi	r19, 0x02	; 2
     654:	4f e6       	ldi	r20, 0x6F	; 111
     656:	52 e1       	ldi	r21, 0x12	; 18
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	7c e3       	ldi	r23, 0x3C	; 60
     65c:	c9 01       	movw	r24, r18
     65e:	0e 94 20 13 	call	0x2640	; 0x2640 <Quaternion_ratio>
	Quaternion_addition(&orientation, &delta, &orientation);
     662:	42 ed       	ldi	r20, 0xD2	; 210
     664:	51 e0       	ldi	r21, 0x01	; 1
     666:	62 e4       	ldi	r22, 0x42	; 66
     668:	72 e0       	ldi	r23, 0x02	; 2
     66a:	ca 01       	movw	r24, r20
     66c:	0e 94 b3 12 	call	0x2566	; 0x2566 <Quaternion_addition>
	Quaternion_normalize(&orientation, &orientation);
     670:	62 ed       	ldi	r22, 0xD2	; 210
     672:	71 e0       	ldi	r23, 0x01	; 1
     674:	cb 01       	movw	r24, r22
     676:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Quaternion_normalize>
	Quaternion_toEulerZYX2(&orientation,eulang);
     67a:	60 e8       	ldi	r22, 0x80	; 128
     67c:	72 e0       	ldi	r23, 0x02	; 2
     67e:	82 ed       	ldi	r24, 0xD2	; 210
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Quaternion_toEulerZYX2>
	f_gx_last=f_gx_now;
     686:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <f_gx_now>
     68a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <f_gx_now+0x1>
     68e:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <f_gx_now+0x2>
     692:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <f_gx_now+0x3>
     696:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <f_gx_last>
     69a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <f_gx_last+0x1>
     69e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <f_gx_last+0x2>
     6a2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <f_gx_last+0x3>
	f_gy_last=f_gy_now;
     6a6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <f_gy_now>
     6aa:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <f_gy_now+0x1>
     6ae:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <f_gy_now+0x2>
     6b2:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <f_gy_now+0x3>
     6b6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <f_gy_last>
     6ba:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <f_gy_last+0x1>
     6be:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <f_gy_last+0x2>
     6c2:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <f_gy_last+0x3>
	f_gz_last=f_gz_now;
     6c6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <f_gz_now>
     6ca:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <f_gz_now+0x1>
     6ce:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <f_gz_now+0x2>
     6d2:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <f_gz_now+0x3>
     6d6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <f_gz_last>
     6da:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <f_gz_last+0x1>
     6de:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <f_gz_last+0x2>
     6e2:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <f_gz_last+0x3>
	
	//orient not change	
	accelxx = acc2_f[0]-avgax;
     6e6:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <avgax>
     6ea:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <avgax+0x1>
     6ee:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <avgax+0x2>
     6f2:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <avgax+0x3>
     6f6:	a2 e5       	ldi	r26, 0x52	; 82
     6f8:	b2 e0       	ldi	r27, 0x02	; 2
     6fa:	6d 91       	ld	r22, X+
     6fc:	7d 91       	ld	r23, X+
     6fe:	8d 91       	ld	r24, X+
     700:	9c 91       	ld	r25, X
     702:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     706:	2b 01       	movw	r4, r22
     708:	3c 01       	movw	r6, r24
     70a:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <accelxx>
     70e:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <accelxx+0x1>
     712:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <accelxx+0x2>
     716:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <accelxx+0x3>
	accelyy = acc2_f[1]-avgay;
     71a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <avgay>
     71e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <avgay+0x1>
     722:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <avgay+0x2>
     726:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <avgay+0x3>
     72a:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <acc2_f+0x4>
     72e:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <acc2_f+0x5>
     732:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <acc2_f+0x6>
     736:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <acc2_f+0x7>
     73a:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     73e:	4b 01       	movw	r8, r22
     740:	5c 01       	movw	r10, r24
     742:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <accelyy>
     746:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <accelyy+0x1>
     74a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <accelyy+0x2>
     74e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <accelyy+0x3>
	accelzz = acc2_f[2]-avgaz;	
     752:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <avgaz>
     756:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <avgaz+0x1>
     75a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <avgaz+0x2>
     75e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <avgaz+0x3>
     762:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <acc2_f+0x8>
     766:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <acc2_f+0x9>
     76a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <acc2_f+0xa>
     76e:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <acc2_f+0xb>
     772:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     776:	6b 01       	movw	r12, r22
     778:	7c 01       	movw	r14, r24
     77a:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <accelzz>
     77e:	70 93 8d 01 	sts	0x018D, r23	; 0x80018d <accelzz+0x1>
     782:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <accelzz+0x2>
     786:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <accelzz+0x3>
	//filter	
	f_ax_now=accelxx-alpha*(accelxx-f_ax_last);
     78a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     78e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     792:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     796:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	ab 83       	std	Y+3, r26	; 0x03
     7a0:	bc 83       	std	Y+4, r27	; 0x04
     7a2:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <f_ax_last>
     7a6:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <f_ax_last+0x1>
     7aa:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <f_ax_last+0x2>
     7ae:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <f_ax_last+0x3>
     7b2:	c3 01       	movw	r24, r6
     7b4:	b2 01       	movw	r22, r4
     7b6:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     7ba:	29 81       	ldd	r18, Y+1	; 0x01
     7bc:	3a 81       	ldd	r19, Y+2	; 0x02
     7be:	4b 81       	ldd	r20, Y+3	; 0x03
     7c0:	5c 81       	ldd	r21, Y+4	; 0x04
     7c2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     7c6:	9b 01       	movw	r18, r22
     7c8:	ac 01       	movw	r20, r24
     7ca:	c3 01       	movw	r24, r6
     7cc:	b2 01       	movw	r22, r4
     7ce:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     7d2:	2b 01       	movw	r4, r22
     7d4:	3c 01       	movw	r6, r24
     7d6:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <f_ax_now>
     7da:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <f_ax_now+0x1>
     7de:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <f_ax_now+0x2>
     7e2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <f_ax_now+0x3>
	f_ay_now=accelyy-alpha*(accelyy-f_ay_last);
     7e6:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <f_ay_last>
     7ea:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <f_ay_last+0x1>
     7ee:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <f_ay_last+0x2>
     7f2:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <f_ay_last+0x3>
     7f6:	c5 01       	movw	r24, r10
     7f8:	b4 01       	movw	r22, r8
     7fa:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     7fe:	29 81       	ldd	r18, Y+1	; 0x01
     800:	3a 81       	ldd	r19, Y+2	; 0x02
     802:	4b 81       	ldd	r20, Y+3	; 0x03
     804:	5c 81       	ldd	r21, Y+4	; 0x04
     806:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     80a:	9b 01       	movw	r18, r22
     80c:	ac 01       	movw	r20, r24
     80e:	c5 01       	movw	r24, r10
     810:	b4 01       	movw	r22, r8
     812:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     816:	4b 01       	movw	r8, r22
     818:	5c 01       	movw	r10, r24
     81a:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <f_ay_now>
     81e:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <f_ay_now+0x1>
     822:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <f_ay_now+0x2>
     826:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <f_ay_now+0x3>
	f_az_now=accelzz-alpha*(accelzz-f_az_last);
     82a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <f_az_last>
     82e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <f_az_last+0x1>
     832:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <f_az_last+0x2>
     836:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <f_az_last+0x3>
     83a:	c7 01       	movw	r24, r14
     83c:	b6 01       	movw	r22, r12
     83e:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     842:	29 81       	ldd	r18, Y+1	; 0x01
     844:	3a 81       	ldd	r19, Y+2	; 0x02
     846:	4b 81       	ldd	r20, Y+3	; 0x03
     848:	5c 81       	ldd	r21, Y+4	; 0x04
     84a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     84e:	9b 01       	movw	r18, r22
     850:	ac 01       	movw	r20, r24
     852:	c7 01       	movw	r24, r14
     854:	b6 01       	movw	r22, r12
     856:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     85a:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <f_az_now>
     85e:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <f_az_now+0x1>
     862:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <f_az_now+0x2>
     866:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <f_az_now+0x3>
	f_ax_last=f_ax_now;
     86a:	40 92 40 01 	sts	0x0140, r4	; 0x800140 <f_ax_last>
     86e:	50 92 41 01 	sts	0x0141, r5	; 0x800141 <f_ax_last+0x1>
     872:	60 92 42 01 	sts	0x0142, r6	; 0x800142 <f_ax_last+0x2>
     876:	70 92 43 01 	sts	0x0143, r7	; 0x800143 <f_ax_last+0x3>
	f_ay_last=f_ay_now;
     87a:	80 92 3c 01 	sts	0x013C, r8	; 0x80013c <f_ay_last>
     87e:	90 92 3d 01 	sts	0x013D, r9	; 0x80013d <f_ay_last+0x1>
     882:	a0 92 3e 01 	sts	0x013E, r10	; 0x80013e <f_ay_last+0x2>
     886:	b0 92 3f 01 	sts	0x013F, r11	; 0x80013f <f_ay_last+0x3>
	f_az_last=f_az_now;
     88a:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <f_az_last>
     88e:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <f_az_last+0x1>
     892:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <f_az_last+0x2>
     896:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <f_az_last+0x3>
	
	AK8963I2CReadMAGNETO_2(mag);
     89a:	8a e7       	ldi	r24, 0x7A	; 122
     89c:	92 e0       	ldi	r25, 0x02	; 2
     89e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <AK8963I2CReadMAGNETO_2>
	magyy = mag[0]-avgmy;			//orient change2
     8a2:	aa e7       	ldi	r26, 0x7A	; 122
     8a4:	b2 e0       	ldi	r27, 0x02	; 2
     8a6:	6d 91       	ld	r22, X+
     8a8:	7c 91       	ld	r23, X
     8aa:	07 2e       	mov	r0, r23
     8ac:	00 0c       	add	r0, r0
     8ae:	88 0b       	sbc	r24, r24
     8b0:	99 0b       	sbc	r25, r25
     8b2:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
     8b6:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <avgmy>
     8ba:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <avgmy+0x1>
     8be:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <avgmy+0x2>
     8c2:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <avgmy+0x3>
     8c6:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     8ca:	6b 01       	movw	r12, r22
     8cc:	7c 01       	movw	r14, r24
     8ce:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <magyy>
     8d2:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <magyy+0x1>
     8d6:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <magyy+0x2>
     8da:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <magyy+0x3>
	magxx = mag[1]-avgmx;			//orient change2
     8de:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <mag+0x2>
     8e2:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <mag+0x3>
     8e6:	07 2e       	mov	r0, r23
     8e8:	00 0c       	add	r0, r0
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
     8f2:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <avgmx>
     8f6:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <avgmx+0x1>
     8fa:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <avgmx+0x2>
     8fe:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <avgmx+0x3>
     902:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     906:	4b 01       	movw	r8, r22
     908:	5c 01       	movw	r10, r24
     90a:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <magxx>
     90e:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <magxx+0x1>
     912:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <magxx+0x2>
     916:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <magxx+0x3>
	magzz =-(mag[2]-avgmz);
     91a:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <mag+0x4>
     91e:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <mag+0x5>
     922:	07 2e       	mov	r0, r23
     924:	00 0c       	add	r0, r0
     926:	88 0b       	sbc	r24, r24
     928:	99 0b       	sbc	r25, r25
     92a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
     92e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <avgmz>
     932:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <avgmz+0x1>
     936:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <avgmz+0x2>
     93a:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <avgmz+0x3>
     93e:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	b0 58       	subi	r27, 0x80	; 128
     948:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <magzz>
     94c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <magzz+0x1>
     950:	a0 93 82 01 	sts	0x0182, r26	; 0x800182 <magzz+0x2>
     954:	b0 93 83 01 	sts	0x0183, r27	; 0x800183 <magzz+0x3>
	orient_temp[0]=magxx;
     958:	e2 ee       	ldi	r30, 0xE2	; 226
     95a:	f1 e0       	ldi	r31, 0x01	; 1
     95c:	80 82       	st	Z, r8
     95e:	91 82       	std	Z+1, r9	; 0x01
     960:	a2 82       	std	Z+2, r10	; 0x02
     962:	b3 82       	std	Z+3, r11	; 0x03
	orient_temp[1]=magyy;
     964:	c4 82       	std	Z+4, r12	; 0x04
     966:	d5 82       	std	Z+5, r13	; 0x05
     968:	e6 82       	std	Z+6, r14	; 0x06
     96a:	f7 82       	std	Z+7, r15	; 0x07
	orient_temp[2]=magzz;
     96c:	80 87       	std	Z+8, r24	; 0x08
     96e:	91 87       	std	Z+9, r25	; 0x09
     970:	a2 87       	std	Z+10, r26	; 0x0a
     972:	b3 87       	std	Z+11, r27	; 0x0b
	yaw=atan2(-f_ax_now,+f_ay_now)*57.296 + eulang[2]*57.295;
     974:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <f_ay_now>
     978:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <f_ay_now+0x1>
     97c:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <f_ay_now+0x2>
     980:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <f_ay_now+0x3>
     984:	89 83       	std	Y+1, r24	; 0x01
     986:	9a 83       	std	Y+2, r25	; 0x02
     988:	ab 83       	std	Y+3, r26	; 0x03
     98a:	bc 83       	std	Y+4, r27	; 0x04
     98c:	40 90 34 01 	lds	r4, 0x0134	; 0x800134 <f_ax_now>
     990:	50 90 35 01 	lds	r5, 0x0135	; 0x800135 <f_ax_now+0x1>
     994:	60 90 36 01 	lds	r6, 0x0136	; 0x800136 <f_ax_now+0x2>
     998:	70 90 37 01 	lds	r7, 0x0137	; 0x800137 <f_ax_now+0x3>
     99c:	c3 01       	movw	r24, r6
     99e:	b2 01       	movw	r22, r4
     9a0:	90 58       	subi	r25, 0x80	; 128
     9a2:	29 81       	ldd	r18, Y+1	; 0x01
     9a4:	3a 81       	ldd	r19, Y+2	; 0x02
     9a6:	4b 81       	ldd	r20, Y+3	; 0x03
     9a8:	5c 81       	ldd	r21, Y+4	; 0x04
     9aa:	0e 94 9e 14 	call	0x293c	; 0x293c <atan2>
     9ae:	6d 83       	std	Y+5, r22	; 0x05
     9b0:	7e 83       	std	Y+6, r23	; 0x06
     9b2:	8f 83       	std	Y+7, r24	; 0x07
     9b4:	98 87       	std	Y+8, r25	; 0x08
     9b6:	24 e1       	ldi	r18, 0x14	; 20
     9b8:	3e e2       	ldi	r19, 0x2E	; 46
     9ba:	45 e6       	ldi	r20, 0x65	; 101
     9bc:	52 e4       	ldi	r21, 0x42	; 66
     9be:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <eulang+0x8>
     9c2:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <eulang+0x9>
     9c6:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <eulang+0xa>
     9ca:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <eulang+0xb>
     9ce:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     9d2:	69 87       	std	Y+9, r22	; 0x09
     9d4:	7a 87       	std	Y+10, r23	; 0x0a
     9d6:	8b 87       	std	Y+11, r24	; 0x0b
     9d8:	9c 87       	std	Y+12, r25	; 0x0c
     9da:	2b e1       	ldi	r18, 0x1B	; 27
     9dc:	3f e2       	ldi	r19, 0x2F	; 47
     9de:	45 e6       	ldi	r20, 0x65	; 101
     9e0:	52 e4       	ldi	r21, 0x42	; 66
     9e2:	6d 81       	ldd	r22, Y+5	; 0x05
     9e4:	7e 81       	ldd	r23, Y+6	; 0x06
     9e6:	8f 81       	ldd	r24, Y+7	; 0x07
     9e8:	98 85       	ldd	r25, Y+8	; 0x08
     9ea:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     9ee:	9b 01       	movw	r18, r22
     9f0:	ac 01       	movw	r20, r24
     9f2:	69 85       	ldd	r22, Y+9	; 0x09
     9f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     9f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     9fa:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
     9fe:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <yaw>
     a02:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <yaw+0x1>
     a06:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <yaw+0x2>
     a0a:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <yaw+0x3>
	pitch=atan2(sqrt(f_ax_now*f_ax_now+f_ay_now*f_ay_now),f_az_now)*57.295;
     a0e:	a3 01       	movw	r20, r6
     a10:	92 01       	movw	r18, r4
     a12:	c3 01       	movw	r24, r6
     a14:	b2 01       	movw	r22, r4
     a16:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     a1a:	69 87       	std	Y+9, r22	; 0x09
     a1c:	7a 87       	std	Y+10, r23	; 0x0a
     a1e:	8b 87       	std	Y+11, r24	; 0x0b
     a20:	9c 87       	std	Y+12, r25	; 0x0c
     a22:	a3 01       	movw	r20, r6
     a24:	92 01       	movw	r18, r4
     a26:	c3 01       	movw	r24, r6
     a28:	b2 01       	movw	r22, r4
     a2a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     a2e:	2b 01       	movw	r4, r22
     a30:	3c 01       	movw	r6, r24
     a32:	29 81       	ldd	r18, Y+1	; 0x01
     a34:	3a 81       	ldd	r19, Y+2	; 0x02
     a36:	4b 81       	ldd	r20, Y+3	; 0x03
     a38:	5c 81       	ldd	r21, Y+4	; 0x04
     a3a:	ca 01       	movw	r24, r20
     a3c:	b9 01       	movw	r22, r18
     a3e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	c3 01       	movw	r24, r6
     a48:	b2 01       	movw	r22, r4
     a4a:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
     a4e:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <sqrt>
     a52:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <f_az_now>
     a56:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <f_az_now+0x1>
     a5a:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <f_az_now+0x2>
     a5e:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <f_az_now+0x3>
     a62:	0e 94 9e 14 	call	0x293c	; 0x293c <atan2>
     a66:	24 e1       	ldi	r18, 0x14	; 20
     a68:	3e e2       	ldi	r19, 0x2E	; 46
     a6a:	45 e6       	ldi	r20, 0x65	; 101
     a6c:	52 e4       	ldi	r21, 0x42	; 66
     a6e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     a72:	2b 01       	movw	r4, r22
     a74:	3c 01       	movw	r6, r24
     a76:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <pitch>
     a7a:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <pitch+0x1>
     a7e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <pitch+0x2>
     a82:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <pitch+0x3>
	roll= roll0 - (atan2(magyy,magxx)* 57.295);
     a86:	a5 01       	movw	r20, r10
     a88:	94 01       	movw	r18, r8
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	0e 94 9e 14 	call	0x293c	; 0x293c <atan2>
     a92:	24 e1       	ldi	r18, 0x14	; 20
     a94:	3e e2       	ldi	r19, 0x2E	; 46
     a96:	45 e6       	ldi	r20, 0x65	; 101
     a98:	52 e4       	ldi	r21, 0x42	; 66
     a9a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <roll0>
     aa6:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <roll0+0x1>
     aaa:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <roll0+0x2>
     aae:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <roll0+0x3>
     ab2:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     ab6:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <roll>
     aba:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <roll+0x1>
     abe:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <roll+0x2>
     ac2:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <roll+0x3>
	
	Quaternion_set(cos(pitch/2.0/57.295), sin(pitch/2.0/57.295)*cos(atan2(-f_ax_now,+f_ay_now)), sin(pitch/2.0/57.295)*sin(atan2(-f_ax_now,+f_ay_now)), 0, &q1);
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	5f e3       	ldi	r21, 0x3F	; 63
     ace:	c3 01       	movw	r24, r6
     ad0:	b2 01       	movw	r22, r4
     ad2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     ad6:	24 e1       	ldi	r18, 0x14	; 20
     ad8:	3e e2       	ldi	r19, 0x2E	; 46
     ada:	45 e6       	ldi	r20, 0x65	; 101
     adc:	52 e4       	ldi	r21, 0x42	; 66
     ade:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divsf3>
     ae2:	2b 01       	movw	r4, r22
     ae4:	3c 01       	movw	r6, r24
     ae6:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <sin>
     aea:	6b 01       	movw	r12, r22
     aec:	7c 01       	movw	r14, r24
     aee:	6d 81       	ldd	r22, Y+5	; 0x05
     af0:	7e 81       	ldd	r23, Y+6	; 0x06
     af2:	8f 81       	ldd	r24, Y+7	; 0x07
     af4:	98 85       	ldd	r25, Y+8	; 0x08
     af6:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <sin>
     afa:	4b 01       	movw	r8, r22
     afc:	5c 01       	movw	r10, r24
     afe:	6d 81       	ldd	r22, Y+5	; 0x05
     b00:	7e 81       	ldd	r23, Y+6	; 0x06
     b02:	8f 81       	ldd	r24, Y+7	; 0x07
     b04:	98 85       	ldd	r25, Y+8	; 0x08
     b06:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <cos>
     b0a:	69 83       	std	Y+1, r22	; 0x01
     b0c:	7a 83       	std	Y+2, r23	; 0x02
     b0e:	8b 83       	std	Y+3, r24	; 0x03
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	c3 01       	movw	r24, r6
     b14:	b2 01       	movw	r22, r4
     b16:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <cos>
     b1a:	2b 01       	movw	r4, r22
     b1c:	3c 01       	movw	r6, r24
     b1e:	a5 01       	movw	r20, r10
     b20:	94 01       	movw	r18, r8
     b22:	c7 01       	movw	r24, r14
     b24:	b6 01       	movw	r22, r12
     b26:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     b2a:	6d 83       	std	Y+5, r22	; 0x05
     b2c:	7e 83       	std	Y+6, r23	; 0x06
     b2e:	8f 83       	std	Y+7, r24	; 0x07
     b30:	98 87       	std	Y+8, r25	; 0x08
     b32:	29 81       	ldd	r18, Y+1	; 0x01
     b34:	3a 81       	ldd	r19, Y+2	; 0x02
     b36:	4b 81       	ldd	r20, Y+3	; 0x03
     b38:	5c 81       	ldd	r21, Y+4	; 0x04
     b3a:	c7 01       	movw	r24, r14
     b3c:	b6 01       	movw	r22, r12
     b3e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     b42:	9b 01       	movw	r18, r22
     b44:	ac 01       	movw	r20, r24
     b46:	0f 2e       	mov	r0, r31
     b48:	f6 e2       	ldi	r31, 0x26	; 38
     b4a:	8f 2e       	mov	r8, r31
     b4c:	f2 e0       	ldi	r31, 0x02	; 2
     b4e:	9f 2e       	mov	r9, r31
     b50:	f0 2d       	mov	r31, r0
     b52:	a1 2c       	mov	r10, r1
     b54:	b1 2c       	mov	r11, r1
     b56:	65 01       	movw	r12, r10
     b58:	ed 80       	ldd	r14, Y+5	; 0x05
     b5a:	fe 80       	ldd	r15, Y+6	; 0x06
     b5c:	0f 81       	ldd	r16, Y+7	; 0x07
     b5e:	18 85       	ldd	r17, Y+8	; 0x08
     b60:	c3 01       	movw	r24, r6
     b62:	b2 01       	movw	r22, r4
     b64:	2f d7       	rcall	.+3678   	; 0x19c4 <Quaternion_set>
	Quaternion_rotate(&q1, orient_temp, orient_temp2);
     b66:	46 ec       	ldi	r20, 0xC6	; 198
     b68:	51 e0       	ldi	r21, 0x01	; 1
     b6a:	62 ee       	ldi	r22, 0xE2	; 226
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	c4 01       	movw	r24, r8
     b70:	0e 94 57 10 	call	0x20ae	; 0x20ae <Quaternion_rotate>
	roll1=roll0/57.295 - atan2(orient_temp2[1],orient_temp2[0]);//개선 필요. ss-cc/cs+sc
     b74:	e6 ec       	ldi	r30, 0xC6	; 198
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	20 81       	ld	r18, Z
     b7a:	31 81       	ldd	r19, Z+1	; 0x01
     b7c:	42 81       	ldd	r20, Z+2	; 0x02
     b7e:	53 81       	ldd	r21, Z+3	; 0x03
     b80:	64 81       	ldd	r22, Z+4	; 0x04
     b82:	75 81       	ldd	r23, Z+5	; 0x05
     b84:	86 81       	ldd	r24, Z+6	; 0x06
     b86:	97 81       	ldd	r25, Z+7	; 0x07
     b88:	0e 94 9e 14 	call	0x293c	; 0x293c <atan2>
     b8c:	6b 01       	movw	r12, r22
     b8e:	7c 01       	movw	r14, r24
     b90:	24 e1       	ldi	r18, 0x14	; 20
     b92:	3e e2       	ldi	r19, 0x2E	; 46
     b94:	45 e6       	ldi	r20, 0x65	; 101
     b96:	52 e4       	ldi	r21, 0x42	; 66
     b98:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <roll0>
     b9c:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <roll0+0x1>
     ba0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <roll0+0x2>
     ba4:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <roll0+0x3>
     ba8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divsf3>
     bac:	a7 01       	movw	r20, r14
     bae:	96 01       	movw	r18, r12
     bb0:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
     bb4:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <roll1>
     bb8:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <roll1+0x1>
     bbc:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <roll1+0x2>
     bc0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <roll1+0x3>
	Quaternion_set(cos(roll1/2.0), 0, 0, sin(roll1/2.0), &q2);
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	5f e3       	ldi	r21, 0x3F	; 63
     bcc:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     bd0:	2b 01       	movw	r4, r22
     bd2:	3c 01       	movw	r6, r24
     bd4:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <sin>
     bd8:	5b 01       	movw	r10, r22
     bda:	6c 01       	movw	r12, r24
     bdc:	c3 01       	movw	r24, r6
     bde:	b2 01       	movw	r22, r4
     be0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <cos>
     be4:	0f 2e       	mov	r0, r31
     be6:	fe ee       	ldi	r31, 0xEE	; 238
     be8:	8f 2e       	mov	r8, r31
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	9f 2e       	mov	r9, r31
     bee:	f0 2d       	mov	r31, r0
     bf0:	e1 2c       	mov	r14, r1
     bf2:	f1 2c       	mov	r15, r1
     bf4:	87 01       	movw	r16, r14
     bf6:	a8 01       	movw	r20, r16
     bf8:	97 01       	movw	r18, r14
     bfa:	e4 d6       	rcall	.+3528   	; 0x19c4 <Quaternion_set>
	Quaternion_multiply(&q2, &q1, &orientation2);
     bfc:	46 e1       	ldi	r20, 0x16	; 22
     bfe:	52 e0       	ldi	r21, 0x02	; 2
     c00:	66 e2       	ldi	r22, 0x26	; 38
     c02:	72 e0       	ldi	r23, 0x02	; 2
     c04:	c4 01       	movw	r24, r8
     c06:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <Quaternion_multiply>
	Quaternion_normalize(&orientation2, &orientation2);
     c0a:	66 e1       	ldi	r22, 0x16	; 22
     c0c:	72 e0       	ldi	r23, 0x02	; 2
     c0e:	cb 01       	movw	r24, r22
     c10:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <Quaternion_normalize>
	if(n_enter>=25){
     c14:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <n_enter>
     c18:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <n_enter+0x1>
     c1c:	49 97       	sbiw	r24, 0x19	; 25
     c1e:	0c f4       	brge	.+2      	; 0xc22 <__LOCK_REGION_LENGTH__+0x822>
     c20:	95 c1       	rjmp	.+810    	; 0xf4c <__LOCK_REGION_LENGTH__+0xb4c>
			

		v0 = f_gz_last * 10000;
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e4       	ldi	r19, 0x40	; 64
     c26:	4c e1       	ldi	r20, 0x1C	; 28
     c28:	56 e4       	ldi	r21, 0x46	; 70
     c2a:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <f_gz_last>
     c2e:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <f_gz_last+0x1>
     c32:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <f_gz_last+0x2>
     c36:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <f_gz_last+0x3>
     c3a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     c3e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     c42:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <v0+0x1>
     c46:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <v0>
		v1 = orientation.v[1] * 10000;
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e4       	ldi	r19, 0x40	; 64
     c4e:	4c e1       	ldi	r20, 0x1C	; 28
     c50:	56 e4       	ldi	r21, 0x46	; 70
     c52:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <orientation+0x8>
     c56:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <orientation+0x9>
     c5a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <orientation+0xa>
     c5e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <orientation+0xb>
     c62:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     c66:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     c6a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <v1+0x1>
     c6e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <v1>
		v2 = orientation.v[2] * 10000;
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e4       	ldi	r19, 0x40	; 64
     c76:	4c e1       	ldi	r20, 0x1C	; 28
     c78:	56 e4       	ldi	r21, 0x46	; 70
     c7a:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <orientation+0xc>
     c7e:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <orientation+0xd>
     c82:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <orientation+0xe>
     c86:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <orientation+0xf>
     c8a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     c8e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     c92:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <v2+0x1>
     c96:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <v2>
		
		
		if(k<250)
     c9a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     c9e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     ca2:	8a 3f       	cpi	r24, 0xFA	; 250
     ca4:	91 05       	cpc	r25, r1
     ca6:	0c f0       	brlt	.+2      	; 0xcaa <__LOCK_REGION_LENGTH__+0x8aa>
     ca8:	ab c0       	rjmp	.+342    	; 0xe00 <__LOCK_REGION_LENGTH__+0xa00>
		{
		UART1_transmit('\t');
     caa:	89 e0       	ldi	r24, 0x09	; 9
     cac:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) (orientation.w * 10000));
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e4       	ldi	r19, 0x40	; 64
     cb4:	4c e1       	ldi	r20, 0x1C	; 28
     cb6:	56 e4       	ldi	r21, 0x46	; 70
     cb8:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <orientation>
     cbc:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <orientation+0x1>
     cc0:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <orientation+0x2>
     cc4:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <orientation+0x3>
     cc8:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     ccc:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     cd0:	cb 01       	movw	r24, r22
     cd2:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
		UART1_transmit('\t');
     cd6:	89 e0       	ldi	r24, 0x09	; 9
     cd8:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) v0);
     cdc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <v0>
     ce0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <v0+0x1>
     ce4:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
		UART1_transmit('\t');
     ce8:	89 e0       	ldi	r24, 0x09	; 9
     cea:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) v1);
     cee:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <v1>
     cf2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <v1+0x1>
     cf6:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
		UART1_transmit('\t');
     cfa:	89 e0       	ldi	r24, 0x09	; 9
     cfc:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) v2);
     d00:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <v2>
     d04:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <v2+0x1>
     d08:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
		UART1_transmit('\t');
     d0c:	89 e0       	ldi	r24, 0x09	; 9
     d0e:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_transmit('\t');
     d12:	89 e0       	ldi	r24, 0x09	; 9
     d14:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		eeprom_write_word( 6*k, v0>>8);
     d18:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <v0+0x1>
     d1c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     d20:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     d24:	9c 01       	movw	r18, r24
     d26:	22 0f       	add	r18, r18
     d28:	33 1f       	adc	r19, r19
     d2a:	82 0f       	add	r24, r18
     d2c:	93 1f       	adc	r25, r19
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0e 94 7f 17 	call	0x2efe	; 0x2efe <eeprom_write_word>
	    eeprom_write_word( 6*k+1, v0&0xff);
     d38:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <v0>
     d3c:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <v0+0x1>
     d40:	77 27       	eor	r23, r23
     d42:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     d46:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     d4a:	9c 01       	movw	r18, r24
     d4c:	22 0f       	add	r18, r18
     d4e:	33 1f       	adc	r19, r19
     d50:	82 0f       	add	r24, r18
     d52:	93 1f       	adc	r25, r19
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	0e 94 7f 17 	call	0x2efe	; 0x2efe <eeprom_write_word>
		eeprom_write_word( 6*k+2, v1>>8);
     d5e:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <v1+0x1>
     d62:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     d66:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     d6a:	9c 01       	movw	r18, r24
     d6c:	22 0f       	add	r18, r18
     d6e:	33 1f       	adc	r19, r19
     d70:	82 0f       	add	r24, r18
     d72:	93 1f       	adc	r25, r19
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	02 96       	adiw	r24, 0x02	; 2
     d7c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <eeprom_write_word>
		eeprom_write_word( 6*k+3, v1&0xff);
     d80:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <v1>
     d84:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <v1+0x1>
     d88:	77 27       	eor	r23, r23
     d8a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     d8e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     d92:	9c 01       	movw	r18, r24
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	03 96       	adiw	r24, 0x03	; 3
     da2:	0e 94 7f 17 	call	0x2efe	; 0x2efe <eeprom_write_word>
		eeprom_write_word( 6*k+4, v2>>8);
     da6:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <v2+0x1>
     daa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     dae:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     db2:	9c 01       	movw	r18, r24
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	04 96       	adiw	r24, 0x04	; 4
     dc4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <eeprom_write_word>
		eeprom_write_word( 6*k+5, v2&0xff);
     dc8:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <v2>
     dcc:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <v2+0x1>
     dd0:	77 27       	eor	r23, r23
     dd2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     dd6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     dda:	9c 01       	movw	r18, r24
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	82 0f       	add	r24, r18
     de2:	93 1f       	adc	r25, r19
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	05 96       	adiw	r24, 0x05	; 5
     dea:	0e 94 7f 17 	call	0x2efe	; 0x2efe <eeprom_write_word>
		k++;
     dee:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     df2:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
     dfc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e00:	af e3       	ldi	r26, 0x3F	; 63
     e02:	bc e9       	ldi	r27, 0x9C	; 156
     e04:	11 97       	sbiw	r26, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <__LOCK_REGION_LENGTH__+0xa04>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <__LOCK_REGION_LENGTH__+0xa0a>
     e0a:	00 00       	nop
		}
	    _delay_ms(10);
		Quaternion_toEulerZYX2(&orientation2,eulang);
     e0c:	60 e8       	ldi	r22, 0x80	; 128
     e0e:	72 e0       	ldi	r23, 0x02	; 2
     e10:	86 e1       	ldi	r24, 0x16	; 22
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	21 d6       	rcall	.+3138   	; 0x1a58 <Quaternion_toEulerZYX2>
		
		
		UART1_print16b((uint16_t) (f_ax_now*10000));
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e4       	ldi	r19, 0x40	; 64
     e1a:	4c e1       	ldi	r20, 0x1C	; 28
     e1c:	56 e4       	ldi	r21, 0x46	; 70
     e1e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <f_ax_now>
     e22:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <f_ax_now+0x1>
     e26:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <f_ax_now+0x2>
     e2a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <f_ax_now+0x3>
     e2e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     e32:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     e36:	cb 01       	movw	r24, r22
     e38:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
 		UART1_transmit('\t');
     e3c:	89 e0       	ldi	r24, 0x09	; 9
     e3e:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) (f_ay_now*10000));
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e4       	ldi	r19, 0x40	; 64
     e46:	4c e1       	ldi	r20, 0x1C	; 28
     e48:	56 e4       	ldi	r21, 0x46	; 70
     e4a:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <f_ay_now>
     e4e:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <f_ay_now+0x1>
     e52:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <f_ay_now+0x2>
     e56:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <f_ay_now+0x3>
     e5a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     e5e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     e62:	cb 01       	movw	r24, r22
     e64:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
 		UART1_transmit('\t');		
     e68:	89 e0       	ldi	r24, 0x09	; 9
     e6a:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) (f_az_now*10000));
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e4       	ldi	r19, 0x40	; 64
     e72:	4c e1       	ldi	r20, 0x1C	; 28
     e74:	56 e4       	ldi	r21, 0x46	; 70
     e76:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <f_az_now>
     e7a:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <f_az_now+0x1>
     e7e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <f_az_now+0x2>
     e82:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <f_az_now+0x3>
     e86:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     e8a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     e8e:	cb 01       	movw	r24, r22
     e90:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
 		UART1_transmit('\t');		
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) magxx);
     e9a:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <magxx>
     e9e:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <magxx+0x1>
     ea2:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <magxx+0x2>
     ea6:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <magxx+0x3>
     eaa:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     eae:	cb 01       	movw	r24, r22
     eb0:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
		UART1_transmit('\t');
     eb4:	89 e0       	ldi	r24, 0x09	; 9
     eb6:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) magyy);
     eba:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <magyy>
     ebe:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <magyy+0x1>
     ec2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <magyy+0x2>
     ec6:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <magyy+0x3>
     eca:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     ece:	cb 01       	movw	r24, r22
     ed0:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
		UART1_transmit('\t');
     ed4:	89 e0       	ldi	r24, 0x09	; 9
     ed6:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_print16b((uint16_t) magzz);
     eda:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <magzz>
     ede:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <magzz+0x1>
     ee2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <magzz+0x2>
     ee6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <magzz+0x3>
     eea:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     eee:	cb 01       	movw	r24, r22
     ef0:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
		UART1_transmit('\t');	
     ef4:	89 e0       	ldi	r24, 0x09	; 9
     ef6:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
		UART1_transmit('\n');			 
     efa:	8a e0       	ldi	r24, 0x0A	; 10
     efc:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
 		UART1_print16b((uint16_t) (pitch));	
		UART1_transmit('\t');
    	UART1_print16b((uint16_t) (roll));					
		UART1_transmit('\n');
*/
		OCR2 += f_gz_now * 100;
     f00:	b3 b5       	in	r27, 0x23	; 35
     f02:	b9 83       	std	Y+1, r27	; 0x01
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	48 ec       	ldi	r20, 0xC8	; 200
     f0a:	52 e4       	ldi	r21, 0x42	; 66
     f0c:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <f_gz_now>
     f10:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <f_gz_now+0x1>
     f14:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <f_gz_now+0x2>
     f18:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <f_gz_now+0x3>
     f1c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
     f20:	6b 01       	movw	r12, r22
     f22:	7c 01       	movw	r14, r24
     f24:	e9 81       	ldd	r30, Y+1	; 0x01
     f26:	6e 2f       	mov	r22, r30
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	c7 01       	movw	r24, r14
     f38:	b6 01       	movw	r22, r12
     f3a:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
     f3e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fixunssfsi>
     f42:	63 bd       	out	0x23, r22	; 35

		n_enter=0;
     f44:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <n_enter+0x1>
     f48:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <n_enter>

	}
}
     f4c:	2c 96       	adiw	r28, 0x0c	; 12
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	cf 90       	pop	r12
     f80:	bf 90       	pop	r11
     f82:	af 90       	pop	r10
     f84:	9f 90       	pop	r9
     f86:	8f 90       	pop	r8
     f88:	7f 90       	pop	r7
     f8a:	6f 90       	pop	r6
     f8c:	5f 90       	pop	r5
     f8e:	4f 90       	pop	r4
     f90:	0f 90       	pop	r0
     f92:	0b be       	out	0x3b, r0	; 59
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_10>:

ISR(TIMER2_OVF_vect) 
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	8f 93       	push	r24
	TCNT2 = 6;
     faa:	86 e0       	ldi	r24, 0x06	; 6
     fac:	84 bd       	out	0x24, r24	; 36
}
     fae:	8f 91       	pop	r24
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <main>:

int main(void)
{
     fba:	4f 92       	push	r4
     fbc:	5f 92       	push	r5
     fbe:	6f 92       	push	r6
     fc0:	7f 92       	push	r7
     fc2:	8f 92       	push	r8
     fc4:	9f 92       	push	r9
     fc6:	af 92       	push	r10
     fc8:	bf 92       	push	r11
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	2f ef       	ldi	r18, 0xFF	; 255
     fdc:	33 ed       	ldi	r19, 0xD3	; 211
     fde:	80 e3       	ldi	r24, 0x30	; 48
     fe0:	21 50       	subi	r18, 0x01	; 1
     fe2:	30 40       	sbci	r19, 0x00	; 0
     fe4:	80 40       	sbci	r24, 0x00	; 0
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <main+0x26>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <main+0x30>
     fea:	00 00       	nop

	_delay_ms(1000);
	UART1_init();
     fec:	0e 94 95 13 	call	0x272a	; 0x272a <UART1_init>
//	UART1_transmit('A');
	MPU9250I2CInit(400000);
     ff0:	60 e8       	ldi	r22, 0x80	; 128
     ff2:	7a e1       	ldi	r23, 0x1A	; 26
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	b8 d2       	rcall	.+1392   	; 0x156a <MPU9250I2CInit>
     ffa:	9f ef       	ldi	r25, 0xFF	; 255
     ffc:	23 ed       	ldi	r18, 0xD3	; 211
     ffe:	30 e3       	ldi	r19, 0x30	; 48
    1000:	91 50       	subi	r25, 0x01	; 1
    1002:	20 40       	sbci	r18, 0x00	; 0
    1004:	30 40       	sbci	r19, 0x00	; 0
    1006:	e1 f7       	brne	.-8      	; 0x1000 <__DATA_REGION_LENGTH__>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <__DATA_REGION_LENGTH__+0xa>
    100a:	00 00       	nop
			
	_delay_ms(1000);		
	
	TCCR0 = 0x00;
    100c:	13 be       	out	0x33, r1	; 51
	TCNT0 = 6;//131
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	82 bf       	out	0x32, r24	; 50
	TCNT2 = 6;					        // 타이머 초기 값 설정
    1012:	84 bd       	out	0x24, r24	; 36
	
	TCCR2 = 0x68;				        // 표준모드, 타이머 정지
    1014:	88 e6       	ldi	r24, 0x68	; 104
    1016:	85 bd       	out	0x25, r24	; 37
	OCR2 = 00;
    1018:	13 bc       	out	0x23, r1	; 35
	DDRB |= (1<<DDB7);// 인터럽트 설정
    101a:	bf 9a       	sbi	0x17, 7	; 23
	TIMSK = (1<<TOIE0); 	// 타이머0 오버플로 인터럽트 허용
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x07;
    1020:	83 b7       	in	r24, 0x33	; 51
    1022:	87 60       	ori	r24, 0x07	; 7
    1024:	83 bf       	out	0x33, r24	; 51
	TCCR2 |= 0x03;						//1ms(16000tic) , duty 64 ?32
    1026:	85 b5       	in	r24, 0x25	; 37
    1028:	83 60       	ori	r24, 0x03	; 3
    102a:	85 bd       	out	0x25, r24	; 37

    int i = 0;
	MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
    102c:	6a e0       	ldi	r22, 0x0A	; 10
    102e:	72 e0       	ldi	r23, 0x02	; 2
    1030:	82 e5       	ldi	r24, 0x52	; 82
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	83 d3       	rcall	.+1798   	; 0x173c <MPU9250I2CReadIMU_f>
	AK8963I2CReadMAGNETO(mag);
    1036:	8a e7       	ldi	r24, 0x7A	; 122
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	46 d4       	rcall	.+2188   	; 0x18c8 <AK8963I2CReadMAGNETO>
	UART1_print16b(mag[0]);
    103c:	ca e7       	ldi	r28, 0x7A	; 122
    103e:	d2 e0       	ldi	r29, 0x02	; 2
    1040:	88 81       	ld	r24, Y
    1042:	99 81       	ldd	r25, Y+1	; 0x01
    1044:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
	UART1_transmit('\t');
    1048:	89 e0       	ldi	r24, 0x09	; 9
    104a:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
	UART1_print16b(mag[1]);
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
	UART1_transmit('\t');
    1056:	89 e0       	ldi	r24, 0x09	; 9
    1058:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
	UART1_print16b(mag[2]);
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
	UART1_transmit('\n');
    1064:	8a e0       	ldi	r24, 0x0A	; 10
    1066:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
    106a:	8f e3       	ldi	r24, 0x3F	; 63
    106c:	9c e9       	ldi	r25, 0x9C	; 156
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
    1074:	00 00       	nop
    1076:	04 e6       	ldi	r16, 0x64	; 100
    1078:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(10);

	for( i = 0 ; i<100 ; i++ )
	{
		
		MPU9250I2CReadIMU_f(acc2_f,gyro2_f);
    107a:	6a e0       	ldi	r22, 0x0A	; 10
    107c:	72 e0       	ldi	r23, 0x02	; 2
    107e:	82 e5       	ldi	r24, 0x52	; 82
    1080:	92 e0       	ldi	r25, 0x02	; 2
    1082:	5c d3       	rcall	.+1720   	; 0x173c <MPU9250I2CReadIMU_f>
		gyrosumxx += gyro2_f[0];
    1084:	ca e0       	ldi	r28, 0x0A	; 10
    1086:	d2 e0       	ldi	r29, 0x02	; 2
    1088:	28 81       	ld	r18, Y
    108a:	39 81       	ldd	r19, Y+1	; 0x01
    108c:	4a 81       	ldd	r20, Y+2	; 0x02
    108e:	5b 81       	ldd	r21, Y+3	; 0x03
    1090:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <gyrosumxx>
    1094:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <gyrosumxx+0x1>
    1098:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <gyrosumxx+0x2>
    109c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <gyrosumxx+0x3>
    10a0:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    10a4:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <gyrosumxx>
    10a8:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <gyrosumxx+0x1>
    10ac:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <gyrosumxx+0x2>
    10b0:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <gyrosumxx+0x3>
		gyrosumyy += gyro2_f[1];
    10b4:	2c 81       	ldd	r18, Y+4	; 0x04
    10b6:	3d 81       	ldd	r19, Y+5	; 0x05
    10b8:	4e 81       	ldd	r20, Y+6	; 0x06
    10ba:	5f 81       	ldd	r21, Y+7	; 0x07
    10bc:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <gyrosumyy>
    10c0:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <gyrosumyy+0x1>
    10c4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <gyrosumyy+0x2>
    10c8:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <gyrosumyy+0x3>
    10cc:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    10d0:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <gyrosumyy>
    10d4:	70 93 b1 01 	sts	0x01B1, r23	; 0x8001b1 <gyrosumyy+0x1>
    10d8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <gyrosumyy+0x2>
    10dc:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <gyrosumyy+0x3>
		gyrosumzz += gyro2_f[2];
    10e0:	28 85       	ldd	r18, Y+8	; 0x08
    10e2:	39 85       	ldd	r19, Y+9	; 0x09
    10e4:	4a 85       	ldd	r20, Y+10	; 0x0a
    10e6:	5b 85       	ldd	r21, Y+11	; 0x0b
    10e8:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <gyrosumzz>
    10ec:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <gyrosumzz+0x1>
    10f0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gyrosumzz+0x2>
    10f4:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <gyrosumzz+0x3>
    10f8:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    10fc:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <gyrosumzz>
    1100:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <gyrosumzz+0x1>
    1104:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gyrosumzz+0x2>
    1108:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <gyrosumzz+0x3>
		AK8963I2CReadMAGNETO_2(mag);
    110c:	8a e7       	ldi	r24, 0x7A	; 122
    110e:	92 e0       	ldi	r25, 0x02	; 2
    1110:	23 d4       	rcall	.+2118   	; 0x1958 <AK8963I2CReadMAGNETO_2>
		magsumx	+= mag[0]-avgmx;
    1112:	ca e7       	ldi	r28, 0x7A	; 122
    1114:	d2 e0       	ldi	r29, 0x02	; 2
    1116:	68 81       	ld	r22, Y
    1118:	79 81       	ldd	r23, Y+1	; 0x01
    111a:	07 2e       	mov	r0, r23
    111c:	00 0c       	add	r0, r0
    111e:	88 0b       	sbc	r24, r24
    1120:	99 0b       	sbc	r25, r25
    1122:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    1126:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <avgmx>
    112a:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <avgmx+0x1>
    112e:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <avgmx+0x2>
    1132:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <avgmx+0x3>
    1136:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
    113a:	9b 01       	movw	r18, r22
    113c:	ac 01       	movw	r20, r24
    113e:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <magsumx>
    1142:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <magsumx+0x1>
    1146:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <magsumx+0x2>
    114a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <magsumx+0x3>
    114e:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    1152:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <magsumx>
    1156:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <magsumx+0x1>
    115a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <magsumx+0x2>
    115e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <magsumx+0x3>
		magsumy	+= mag[1]-avgmy;
    1162:	6a 81       	ldd	r22, Y+2	; 0x02
    1164:	7b 81       	ldd	r23, Y+3	; 0x03
    1166:	07 2e       	mov	r0, r23
    1168:	00 0c       	add	r0, r0
    116a:	88 0b       	sbc	r24, r24
    116c:	99 0b       	sbc	r25, r25
    116e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    1172:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <avgmy>
    1176:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <avgmy+0x1>
    117a:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <avgmy+0x2>
    117e:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <avgmy+0x3>
    1182:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <magsumy>
    118e:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <magsumy+0x1>
    1192:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <magsumy+0x2>
    1196:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <magsumy+0x3>
    119a:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    119e:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <magsumy>
    11a2:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <magsumy+0x1>
    11a6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <magsumy+0x2>
    11aa:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <magsumy+0x3>
		magsumz	+= mag[2]-avgmz;
    11ae:	6c 81       	ldd	r22, Y+4	; 0x04
    11b0:	7d 81       	ldd	r23, Y+5	; 0x05
    11b2:	07 2e       	mov	r0, r23
    11b4:	00 0c       	add	r0, r0
    11b6:	88 0b       	sbc	r24, r24
    11b8:	99 0b       	sbc	r25, r25
    11ba:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    11be:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <avgmz>
    11c2:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <avgmz+0x1>
    11c6:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <avgmz+0x2>
    11ca:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <avgmz+0x3>
    11ce:	0e 94 2a 14 	call	0x2854	; 0x2854 <__subsf3>
    11d2:	9b 01       	movw	r18, r22
    11d4:	ac 01       	movw	r20, r24
    11d6:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <magsumz>
    11da:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <magsumz+0x1>
    11de:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <magsumz+0x2>
    11e2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <magsumz+0x3>
    11e6:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    11ea:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <magsumz>
    11ee:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <magsumz+0x1>
    11f2:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <magsumz+0x2>
    11f6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <magsumz+0x3>
    11fa:	8f e3       	ldi	r24, 0x3F	; 63
    11fc:	9c e9       	ldi	r25, 0x9C	; 156
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <__stack+0xff>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <__stack+0x105>
    1204:	00 00       	nop
    1206:	01 50       	subi	r16, 0x01	; 1
    1208:	11 09       	sbc	r17, r1
	UART1_transmit('\t');
	UART1_print16b(mag[2]);
	UART1_transmit('\n');
	_delay_ms(10);

	for( i = 0 ; i<100 ; i++ )
    120a:	09 f0       	breq	.+2      	; 0x120e <__stack+0x10f>
    120c:	36 cf       	rjmp	.-404    	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
		magsumy	+= mag[1]-avgmy;
		magsumz	+= mag[2]-avgmz;
		_delay_ms(10);
		
	}
    avgxx = avgxx* 0.5 + 0.5* gyrosumxx / 1000.0;
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <gyrosumxx>
    121a:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <gyrosumxx+0x1>
    121e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <gyrosumxx+0x2>
    1222:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <gyrosumxx+0x3>
    1226:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	4a e7       	ldi	r20, 0x7A	; 122
    1230:	54 e4       	ldi	r21, 0x44	; 68
    1232:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divsf3>
    1236:	6b 01       	movw	r12, r22
    1238:	7c 01       	movw	r14, r24
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <avgxx>
    1246:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <avgxx+0x1>
    124a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <avgxx+0x2>
    124e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <avgxx+0x3>
    1252:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	c7 01       	movw	r24, r14
    125c:	b6 01       	movw	r22, r12
    125e:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    1262:	6b 01       	movw	r12, r22
    1264:	7c 01       	movw	r14, r24
    1266:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <avgxx>
    126a:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <avgxx+0x1>
    126e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <avgxx+0x2>
    1272:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <avgxx+0x3>
    avgyy = avgyy* 0.5 + 0.5* gyrosumyy / 1000.0;
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	5f e3       	ldi	r21, 0x3F	; 63
    127e:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <gyrosumyy>
    1282:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <gyrosumyy+0x1>
    1286:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <gyrosumyy+0x2>
    128a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <gyrosumyy+0x3>
    128e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a e7       	ldi	r20, 0x7A	; 122
    1298:	54 e4       	ldi	r21, 0x44	; 68
    129a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divsf3>
    129e:	4b 01       	movw	r8, r22
    12a0:	5c 01       	movw	r10, r24
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <avgyy>
    12ae:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <avgyy+0x1>
    12b2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <avgyy+0x2>
    12b6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <avgyy+0x3>
    12ba:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    12be:	9b 01       	movw	r18, r22
    12c0:	ac 01       	movw	r20, r24
    12c2:	c5 01       	movw	r24, r10
    12c4:	b4 01       	movw	r22, r8
    12c6:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    12ca:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <avgyy>
    12ce:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <avgyy+0x1>
    12d2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <avgyy+0x2>
    12d6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <avgyy+0x3>
    avgzz = avgzz* 0.7 + 0.3* gyrosumzz / 1000.0 ;
    12da:	2a e9       	ldi	r18, 0x9A	; 154
    12dc:	39 e9       	ldi	r19, 0x99	; 153
    12de:	49 e9       	ldi	r20, 0x99	; 153
    12e0:	5e e3       	ldi	r21, 0x3E	; 62
    12e2:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <gyrosumzz>
    12e6:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <gyrosumzz+0x1>
    12ea:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gyrosumzz+0x2>
    12ee:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <gyrosumzz+0x3>
    12f2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a e7       	ldi	r20, 0x7A	; 122
    12fc:	54 e4       	ldi	r21, 0x44	; 68
    12fe:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divsf3>
    1302:	4b 01       	movw	r8, r22
    1304:	5c 01       	movw	r10, r24
    1306:	23 e3       	ldi	r18, 0x33	; 51
    1308:	33 e3       	ldi	r19, 0x33	; 51
    130a:	43 e3       	ldi	r20, 0x33	; 51
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <avgzz>
    1312:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <avgzz+0x1>
    1316:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <avgzz+0x2>
    131a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <avgzz+0x3>
    131e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1322:	9b 01       	movw	r18, r22
    1324:	ac 01       	movw	r20, r24
    1326:	c5 01       	movw	r24, r10
    1328:	b4 01       	movw	r22, r8
    132a:	0e 94 2b 14 	call	0x2856	; 0x2856 <__addsf3>
    132e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <avgzz>
    1332:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <avgzz+0x1>
    1336:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <avgzz+0x2>
    133a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <avgzz+0x3>
	magmeanx = magsumx/100.0; // x and y have to be inversed 
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	48 ec       	ldi	r20, 0xC8	; 200
    1344:	52 e4       	ldi	r21, 0x42	; 66
    1346:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <magsumx>
    134a:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <magsumx+0x1>
    134e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <magsumx+0x2>
    1352:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <magsumx+0x3>
    1356:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divsf3>
    135a:	4b 01       	movw	r8, r22
    135c:	5c 01       	movw	r10, r24
    135e:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <magmeanx>
    1362:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <magmeanx+0x1>
    1366:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <magmeanx+0x2>
    136a:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <magmeanx+0x3>
	magmeany = magsumy/100.0; //
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	48 ec       	ldi	r20, 0xC8	; 200
    1374:	52 e4       	ldi	r21, 0x42	; 66
    1376:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <magsumy>
    137a:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <magsumy+0x1>
    137e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <magsumy+0x2>
    1382:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <magsumy+0x3>
    1386:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divsf3>
    138a:	2b 01       	movw	r4, r22
    138c:	3c 01       	movw	r6, r24
    138e:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <magmeany>
    1392:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <magmeany+0x1>
    1396:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <magmeany+0x2>
    139a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <magmeany+0x3>
	magmeanz = magsumz/100.0;
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	48 ec       	ldi	r20, 0xC8	; 200
    13a4:	52 e4       	ldi	r21, 0x42	; 66
    13a6:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <magsumz>
    13aa:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <magsumz+0x1>
    13ae:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <magsumz+0x2>
    13b2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <magsumz+0x3>
    13b6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divsf3>
    13ba:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <magmeanz>
    13be:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <magmeanz+0x1>
    13c2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <magmeanz+0x2>
    13c6:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <magmeanz+0x3>
	roll0 = atan2(magmeanx,magmeany)*57.295; //so inverse
    13ca:	a3 01       	movw	r20, r6
    13cc:	92 01       	movw	r18, r4
    13ce:	c5 01       	movw	r24, r10
    13d0:	b4 01       	movw	r22, r8
    13d2:	0e 94 9e 14 	call	0x293c	; 0x293c <atan2>
    13d6:	24 e1       	ldi	r18, 0x14	; 20
    13d8:	3e e2       	ldi	r19, 0x2E	; 46
    13da:	45 e6       	ldi	r20, 0x65	; 101
    13dc:	52 e4       	ldi	r21, 0x42	; 66
    13de:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    13e2:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <roll0>
    13e6:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <roll0+0x1>
    13ea:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <roll0+0x2>
    13ee:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <roll0+0x3>
	UART1_print16b((int16_t)(avgxx*100000));	
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e5       	ldi	r19, 0x50	; 80
    13f6:	43 ec       	ldi	r20, 0xC3	; 195
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	c7 01       	movw	r24, r14
    13fc:	b6 01       	movw	r22, r12
    13fe:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1402:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__fixsfsi>
    1406:	cb 01       	movw	r24, r22
    1408:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
	UART1_transmit('\t');
    140c:	89 e0       	ldi	r24, 0x09	; 9
    140e:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
	UART1_print16b((int16_t)(avgyy*100000));
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e5       	ldi	r19, 0x50	; 80
    1416:	43 ec       	ldi	r20, 0xC3	; 195
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <avgyy>
    141e:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <avgyy+0x1>
    1422:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <avgyy+0x2>
    1426:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <avgyy+0x3>
    142a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    142e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__fixsfsi>
    1432:	cb 01       	movw	r24, r22
    1434:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
	UART1_transmit('\t');
    1438:	89 e0       	ldi	r24, 0x09	; 9
    143a:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
	UART1_print16b((int16_t)(avgzz*100000));
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e5       	ldi	r19, 0x50	; 80
    1442:	43 ec       	ldi	r20, 0xC3	; 195
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <avgzz>
    144a:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <avgzz+0x1>
    144e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <avgzz+0x2>
    1452:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <avgzz+0x3>
    1456:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    145a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__fixsfsi>
    145e:	cb 01       	movw	r24, r22
    1460:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
	UART1_transmit('\t');
    1464:	89 e0       	ldi	r24, 0x09	; 9
    1466:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
	UART1_transmit('\t');	
    146a:	89 e0       	ldi	r24, 0x09	; 9
    146c:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
	UART1_print16b((int16_t)roll0);
    1470:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <roll0>
    1474:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <roll0+0x1>
    1478:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <roll0+0x2>
    147c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <roll0+0x3>
    1480:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__fixsfsi>
    1484:	cb 01       	movw	r24, r22
    1486:	0e 94 b5 13 	call	0x276a	; 0x276a <UART1_print16b>
	UART1_transmit('\t');
    148a:	89 e0       	ldi	r24, 0x09	; 9
    148c:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
	UART1_transmit('\n');
    1490:	8a e0       	ldi	r24, 0x0A	; 10
    1492:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
    1496:	9f ef       	ldi	r25, 0xFF	; 255
    1498:	23 ed       	ldi	r18, 0xD3	; 211
    149a:	30 e3       	ldi	r19, 0x30	; 48
    149c:	91 50       	subi	r25, 0x01	; 1
    149e:	20 40       	sbci	r18, 0x00	; 0
    14a0:	30 40       	sbci	r19, 0x00	; 0
    14a2:	e1 f7       	brne	.-8      	; 0x149c <__stack+0x39d>
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <__stack+0x3a7>
	
	_delay_ms(1000);
	Quaternion_setIdentity(&orientation); 
    14a6:	00 00       	nop
    14a8:	82 ed       	ldi	r24, 0xD2	; 210
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	bb d2       	rcall	.+1398   	; 0x1a24 <Quaternion_setIdentity>
	sei();							    // 전역 인터럽트 허용
    14ae:	78 94       	sei

	UART1_transmit('\n');
    14b0:	8a e0       	ldi	r24, 0x0A	; 10
    14b2:	0e 94 ad 13 	call	0x275a	; 0x275a <UART1_transmit>
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	97 e8       	ldi	r25, 0x87	; 135
    14ba:	23 e1       	ldi	r18, 0x13	; 19
    14bc:	81 50       	subi	r24, 0x01	; 1
    14be:	90 40       	sbci	r25, 0x00	; 0
    14c0:	20 40       	sbci	r18, 0x00	; 0
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <__stack+0x3bd>
    14c4:	00 c0       	rjmp	.+0      	; 0x14c6 <__stack+0x3c7>
    14c6:	00 00       	nop
	//for(int j = 0 ; j<25 ; j++){
		//OCR2 = 10*j + 10;
		//_delay_ms(1000);
		//
	//}
	OCR2 = 100;
    14c8:	84 e6       	ldi	r24, 0x64	; 100
    14ca:	83 bd       	out	0x23, r24	; 35
    14cc:	3a ea       	ldi	r19, 0xAA	; 170
    14ce:	86 ee       	ldi	r24, 0xE6	; 230
    14d0:	96 e9       	ldi	r25, 0x96	; 150
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	31 50       	subi	r19, 0x01	; 1
    14d6:	80 40       	sbci	r24, 0x00	; 0
    14d8:	90 40       	sbci	r25, 0x00	; 0
    14da:	20 40       	sbci	r18, 0x00	; 0
    14dc:	d9 f7       	brne	.-10     	; 0x14d4 <__stack+0x3d5>
    14de:	00 00       	nop
	_delay_ms(10000);
}
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	9f 90       	pop	r9
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	6f 90       	pop	r6
    1500:	5f 90       	pop	r5
    1502:	4f 90       	pop	r4
    1504:	08 95       	ret

00001506 <write_a_byte>:
	
	if(read_n_bytes(EXT_SENS_DATA_00, (uint8_t *) &me, 1) < 0)
		return -1;
	
	return me;
}
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	00 d0       	rcall	.+0      	; 0x150c <write_a_byte+0x6>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	42 e0       	ldi	r20, 0x02	; 2
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	be 01       	movw	r22, r28
    151e:	6f 5f       	subi	r22, 0xFF	; 255
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	88 e6       	ldi	r24, 0x68	; 104
    1524:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2c_write_n_bytes>
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <read_n_bytes>:
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	eb 01       	movw	r28, r22
    153c:	8a 01       	movw	r16, r20
    153e:	68 2f       	mov	r22, r24
    1540:	60 68       	ori	r22, 0x80	; 128
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	88 e6       	ldi	r24, 0x68	; 104
    1548:	0e 94 91 00 	call	0x122	; 0x122 <i2c_write_a_byte>
    154c:	99 23       	and	r25, r25
    154e:	34 f0       	brlt	.+12     	; 0x155c <read_n_bytes+0x2a>
    1550:	a8 01       	movw	r20, r16
    1552:	be 01       	movw	r22, r28
    1554:	88 e6       	ldi	r24, 0x68	; 104
    1556:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_n_bytes>
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <read_n_bytes+0x2e>
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f ef       	ldi	r25, 0xFF	; 255
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <MPU9250I2CInit>:
    156a:	0e 94 8b 00 	call	0x116	; 0x116 <i2c_init>
    156e:	60 e8       	ldi	r22, 0x80	; 128
    1570:	8b e6       	ldi	r24, 0x6B	; 107
    1572:	c9 df       	rcall	.-110    	; 0x1506 <write_a_byte>
    1574:	8f e3       	ldi	r24, 0x3F	; 63
    1576:	9c e9       	ldi	r25, 0x9C	; 156
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <MPU9250I2CInit+0xe>
    157c:	00 c0       	rjmp	.+0      	; 0x157e <MPU9250I2CInit+0x14>
    157e:	00 00       	nop
    1580:	8f e3       	ldi	r24, 0x3F	; 63
    1582:	9c e9       	ldi	r25, 0x9C	; 156
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <MPU9250I2CInit+0x1a>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <MPU9250I2CInit+0x20>
    158a:	00 00       	nop
    158c:	8f e3       	ldi	r24, 0x3F	; 63
    158e:	9c e9       	ldi	r25, 0x9C	; 156
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <MPU9250I2CInit+0x26>
    1594:	00 c0       	rjmp	.+0      	; 0x1596 <MPU9250I2CInit+0x2c>
    1596:	00 00       	nop
    1598:	8f e3       	ldi	r24, 0x3F	; 63
    159a:	9c e9       	ldi	r25, 0x9C	; 156
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <MPU9250I2CInit+0x32>
    15a0:	00 c0       	rjmp	.+0      	; 0x15a2 <MPU9250I2CInit+0x38>
    15a2:	00 00       	nop
    15a4:	8f e3       	ldi	r24, 0x3F	; 63
    15a6:	9c e9       	ldi	r25, 0x9C	; 156
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <MPU9250I2CInit+0x3e>
    15ac:	00 c0       	rjmp	.+0      	; 0x15ae <MPU9250I2CInit+0x44>
    15ae:	00 00       	nop
    15b0:	8f e3       	ldi	r24, 0x3F	; 63
    15b2:	9c e9       	ldi	r25, 0x9C	; 156
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <MPU9250I2CInit+0x4a>
    15b8:	00 c0       	rjmp	.+0      	; 0x15ba <MPU9250I2CInit+0x50>
    15ba:	00 00       	nop
    15bc:	8f e3       	ldi	r24, 0x3F	; 63
    15be:	9c e9       	ldi	r25, 0x9C	; 156
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <MPU9250I2CInit+0x56>
    15c4:	00 c0       	rjmp	.+0      	; 0x15c6 <MPU9250I2CInit+0x5c>
    15c6:	00 00       	nop
    15c8:	8f e3       	ldi	r24, 0x3F	; 63
    15ca:	9c e9       	ldi	r25, 0x9C	; 156
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <MPU9250I2CInit+0x62>
    15d0:	00 c0       	rjmp	.+0      	; 0x15d2 <MPU9250I2CInit+0x68>
    15d2:	00 00       	nop
    15d4:	8f e3       	ldi	r24, 0x3F	; 63
    15d6:	9c e9       	ldi	r25, 0x9C	; 156
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <MPU9250I2CInit+0x6e>
    15dc:	00 c0       	rjmp	.+0      	; 0x15de <MPU9250I2CInit+0x74>
    15de:	00 00       	nop
    15e0:	8f e3       	ldi	r24, 0x3F	; 63
    15e2:	9c e9       	ldi	r25, 0x9C	; 156
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <MPU9250I2CInit+0x7a>
    15e8:	00 c0       	rjmp	.+0      	; 0x15ea <MPU9250I2CInit+0x80>
    15ea:	00 00       	nop
    15ec:	67 e0       	ldi	r22, 0x07	; 7
    15ee:	88 e6       	ldi	r24, 0x68	; 104
    15f0:	8a df       	rcall	.-236    	; 0x1506 <write_a_byte>
    15f2:	8f e3       	ldi	r24, 0x3F	; 63
    15f4:	9c e9       	ldi	r25, 0x9C	; 156
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <MPU9250I2CInit+0x8c>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <MPU9250I2CInit+0x92>
    15fc:	00 00       	nop
    15fe:	8f e3       	ldi	r24, 0x3F	; 63
    1600:	9c e9       	ldi	r25, 0x9C	; 156
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <MPU9250I2CInit+0x98>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <MPU9250I2CInit+0x9e>
    1608:	00 00       	nop
    160a:	8f e3       	ldi	r24, 0x3F	; 63
    160c:	9c e9       	ldi	r25, 0x9C	; 156
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <MPU9250I2CInit+0xa4>
    1612:	00 c0       	rjmp	.+0      	; 0x1614 <MPU9250I2CInit+0xaa>
    1614:	00 00       	nop
    1616:	8f e3       	ldi	r24, 0x3F	; 63
    1618:	9c e9       	ldi	r25, 0x9C	; 156
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <MPU9250I2CInit+0xb0>
    161e:	00 c0       	rjmp	.+0      	; 0x1620 <MPU9250I2CInit+0xb6>
    1620:	00 00       	nop
    1622:	8f e3       	ldi	r24, 0x3F	; 63
    1624:	9c e9       	ldi	r25, 0x9C	; 156
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <MPU9250I2CInit+0xbc>
    162a:	00 c0       	rjmp	.+0      	; 0x162c <MPU9250I2CInit+0xc2>
    162c:	00 00       	nop
    162e:	8f e3       	ldi	r24, 0x3F	; 63
    1630:	9c e9       	ldi	r25, 0x9C	; 156
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <MPU9250I2CInit+0xc8>
    1636:	00 c0       	rjmp	.+0      	; 0x1638 <MPU9250I2CInit+0xce>
    1638:	00 00       	nop
    163a:	8f e3       	ldi	r24, 0x3F	; 63
    163c:	9c e9       	ldi	r25, 0x9C	; 156
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <MPU9250I2CInit+0xd4>
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <MPU9250I2CInit+0xda>
    1644:	00 00       	nop
    1646:	8f e3       	ldi	r24, 0x3F	; 63
    1648:	9c e9       	ldi	r25, 0x9C	; 156
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <MPU9250I2CInit+0xe0>
    164e:	00 c0       	rjmp	.+0      	; 0x1650 <MPU9250I2CInit+0xe6>
    1650:	00 00       	nop
    1652:	8f e3       	ldi	r24, 0x3F	; 63
    1654:	9c e9       	ldi	r25, 0x9C	; 156
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <MPU9250I2CInit+0xec>
    165a:	00 c0       	rjmp	.+0      	; 0x165c <MPU9250I2CInit+0xf2>
    165c:	00 00       	nop
    165e:	8f e3       	ldi	r24, 0x3F	; 63
    1660:	9c e9       	ldi	r25, 0x9C	; 156
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <MPU9250I2CInit+0xf8>
    1666:	00 c0       	rjmp	.+0      	; 0x1668 <MPU9250I2CInit+0xfe>
    1668:	00 00       	nop
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	88 e6       	ldi	r24, 0x68	; 104
    166e:	4b df       	rcall	.-362    	; 0x1506 <write_a_byte>
    1670:	8f e3       	ldi	r24, 0x3F	; 63
    1672:	9c e9       	ldi	r25, 0x9C	; 156
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <MPU9250I2CInit+0x10a>
    1678:	00 c0       	rjmp	.+0      	; 0x167a <MPU9250I2CInit+0x110>
    167a:	00 00       	nop
    167c:	60 e2       	ldi	r22, 0x20	; 32
    167e:	8a e6       	ldi	r24, 0x6A	; 106
    1680:	42 df       	rcall	.-380    	; 0x1506 <write_a_byte>
    1682:	6d e0       	ldi	r22, 0x0D	; 13
    1684:	84 e2       	ldi	r24, 0x24	; 36
    1686:	3f df       	rcall	.-386    	; 0x1506 <write_a_byte>
    1688:	8f e3       	ldi	r24, 0x3F	; 63
    168a:	9c e9       	ldi	r25, 0x9C	; 156
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <MPU9250I2CInit+0x122>
    1690:	00 c0       	rjmp	.+0      	; 0x1692 <MPU9250I2CInit+0x128>
    1692:	00 00       	nop
    1694:	6c e0       	ldi	r22, 0x0C	; 12
    1696:	85 e2       	ldi	r24, 0x25	; 37
    1698:	36 df       	rcall	.-404    	; 0x1506 <write_a_byte>
    169a:	6b e0       	ldi	r22, 0x0B	; 11
    169c:	86 e2       	ldi	r24, 0x26	; 38
    169e:	33 df       	rcall	.-410    	; 0x1506 <write_a_byte>
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	83 e6       	ldi	r24, 0x63	; 99
    16a4:	30 df       	rcall	.-416    	; 0x1506 <write_a_byte>
    16a6:	61 e8       	ldi	r22, 0x81	; 129
    16a8:	87 e2       	ldi	r24, 0x27	; 39
    16aa:	2d df       	rcall	.-422    	; 0x1506 <write_a_byte>
    16ac:	9f ef       	ldi	r25, 0xFF	; 255
    16ae:	20 e7       	ldi	r18, 0x70	; 112
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	91 50       	subi	r25, 0x01	; 1
    16b4:	20 40       	sbci	r18, 0x00	; 0
    16b6:	80 40       	sbci	r24, 0x00	; 0
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <MPU9250I2CInit+0x148>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <MPU9250I2CInit+0x152>
    16bc:	00 00       	nop
    16be:	6c e0       	ldi	r22, 0x0C	; 12
    16c0:	85 e2       	ldi	r24, 0x25	; 37
    16c2:	21 df       	rcall	.-446    	; 0x1506 <write_a_byte>
    16c4:	6a e0       	ldi	r22, 0x0A	; 10
    16c6:	86 e2       	ldi	r24, 0x26	; 38
    16c8:	1e df       	rcall	.-452    	; 0x1506 <write_a_byte>
    16ca:	60 e1       	ldi	r22, 0x10	; 16
    16cc:	83 e6       	ldi	r24, 0x63	; 99
    16ce:	1b df       	rcall	.-458    	; 0x1506 <write_a_byte>
    16d0:	61 e8       	ldi	r22, 0x81	; 129
    16d2:	87 e2       	ldi	r24, 0x27	; 39
    16d4:	18 df       	rcall	.-464    	; 0x1506 <write_a_byte>
    16d6:	9f ef       	ldi	r25, 0xFF	; 255
    16d8:	20 e7       	ldi	r18, 0x70	; 112
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	91 50       	subi	r25, 0x01	; 1
    16de:	20 40       	sbci	r18, 0x00	; 0
    16e0:	80 40       	sbci	r24, 0x00	; 0
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <MPU9250I2CInit+0x172>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <MPU9250I2CInit+0x17c>
    16e6:	00 00       	nop
    16e8:	6c e0       	ldi	r22, 0x0C	; 12
    16ea:	85 e2       	ldi	r24, 0x25	; 37
    16ec:	0c df       	rcall	.-488    	; 0x1506 <write_a_byte>
    16ee:	6a e0       	ldi	r22, 0x0A	; 10
    16f0:	86 e2       	ldi	r24, 0x26	; 38
    16f2:	09 df       	rcall	.-494    	; 0x1506 <write_a_byte>
    16f4:	66 e1       	ldi	r22, 0x16	; 22
    16f6:	83 e6       	ldi	r24, 0x63	; 99
    16f8:	06 df       	rcall	.-500    	; 0x1506 <write_a_byte>
    16fa:	61 e8       	ldi	r22, 0x81	; 129
    16fc:	87 e2       	ldi	r24, 0x27	; 39
    16fe:	03 df       	rcall	.-506    	; 0x1506 <write_a_byte>
    1700:	9f ef       	ldi	r25, 0xFF	; 255
    1702:	20 e7       	ldi	r18, 0x70	; 112
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	91 50       	subi	r25, 0x01	; 1
    1708:	20 40       	sbci	r18, 0x00	; 0
    170a:	80 40       	sbci	r24, 0x00	; 0
    170c:	e1 f7       	brne	.-8      	; 0x1706 <MPU9250I2CInit+0x19c>
    170e:	00 c0       	rjmp	.+0      	; 0x1710 <MPU9250I2CInit+0x1a6>
    1710:	00 00       	nop
    1712:	6c e8       	ldi	r22, 0x8C	; 140
    1714:	85 e2       	ldi	r24, 0x25	; 37
    1716:	f7 de       	rcall	.-530    	; 0x1506 <write_a_byte>
    1718:	63 e0       	ldi	r22, 0x03	; 3
    171a:	86 e2       	ldi	r24, 0x26	; 38
    171c:	f4 de       	rcall	.-536    	; 0x1506 <write_a_byte>
    171e:	67 e8       	ldi	r22, 0x87	; 135
    1720:	87 e2       	ldi	r24, 0x27	; 39
    1722:	f1 de       	rcall	.-542    	; 0x1506 <write_a_byte>
    1724:	9f ef       	ldi	r25, 0xFF	; 255
    1726:	20 e7       	ldi	r18, 0x70	; 112
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	91 50       	subi	r25, 0x01	; 1
    172c:	20 40       	sbci	r18, 0x00	; 0
    172e:	80 40       	sbci	r24, 0x00	; 0
    1730:	e1 f7       	brne	.-8      	; 0x172a <MPU9250I2CInit+0x1c0>
    1732:	00 c0       	rjmp	.+0      	; 0x1734 <MPU9250I2CInit+0x1ca>
    1734:	00 00       	nop
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	08 95       	ret

0000173c <MPU9250I2CReadIMU_f>:
    173c:	8f 92       	push	r8
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	6a 97       	sbiw	r28, 0x1a	; 26
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	7c 01       	movw	r14, r24
    1766:	8b 01       	movw	r16, r22
    1768:	4e e0       	ldi	r20, 0x0E	; 14
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	be 01       	movw	r22, r28
    176e:	6f 5f       	subi	r22, 0xFF	; 255
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	8b e3       	ldi	r24, 0x3B	; 59
    1774:	de de       	rcall	.-580    	; 0x1532 <read_n_bytes>
    1776:	99 23       	and	r25, r25
    1778:	0c f4       	brge	.+2      	; 0x177c <MPU9250I2CReadIMU_f+0x40>
    177a:	91 c0       	rjmp	.+290    	; 0x189e <MPU9250I2CReadIMU_f+0x162>
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	8f 87       	std	Y+15, r24	; 0x0f
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	88 8b       	std	Y+16, r24	; 0x10
    1784:	8a 85       	ldd	r24, Y+10	; 0x0a
    1786:	8d 8b       	std	Y+21, r24	; 0x15
    1788:	89 85       	ldd	r24, Y+9	; 0x09
    178a:	8e 8b       	std	Y+22, r24	; 0x16
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	89 8b       	std	Y+17, r24	; 0x11
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	8a 8b       	std	Y+18, r24	; 0x12
    1794:	8c 85       	ldd	r24, Y+12	; 0x0c
    1796:	8f 8b       	std	Y+23, r24	; 0x17
    1798:	8b 85       	ldd	r24, Y+11	; 0x0b
    179a:	88 8f       	std	Y+24, r24	; 0x18
    179c:	8e 81       	ldd	r24, Y+6	; 0x06
    179e:	8b 8b       	std	Y+19, r24	; 0x13
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	8c 8b       	std	Y+20, r24	; 0x14
    17a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a6:	89 8f       	std	Y+25, r24	; 0x19
    17a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17aa:	8a 8f       	std	Y+26, r24	; 0x1a
    17ac:	80 90 20 01 	lds	r8, 0x0120	; 0x800120 <acc_scale>
    17b0:	90 90 21 01 	lds	r9, 0x0121	; 0x800121 <acc_scale+0x1>
    17b4:	a0 90 22 01 	lds	r10, 0x0122	; 0x800122 <acc_scale+0x2>
    17b8:	b0 90 23 01 	lds	r11, 0x0123	; 0x800123 <acc_scale+0x3>
    17bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    17be:	78 89       	ldd	r23, Y+16	; 0x10
    17c0:	07 2e       	mov	r0, r23
    17c2:	00 0c       	add	r0, r0
    17c4:	88 0b       	sbc	r24, r24
    17c6:	99 0b       	sbc	r25, r25
    17c8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    17cc:	a5 01       	movw	r20, r10
    17ce:	94 01       	movw	r18, r8
    17d0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    17d4:	f7 01       	movw	r30, r14
    17d6:	60 83       	st	Z, r22
    17d8:	71 83       	std	Z+1, r23	; 0x01
    17da:	82 83       	std	Z+2, r24	; 0x02
    17dc:	93 83       	std	Z+3, r25	; 0x03
    17de:	69 89       	ldd	r22, Y+17	; 0x11
    17e0:	7a 89       	ldd	r23, Y+18	; 0x12
    17e2:	07 2e       	mov	r0, r23
    17e4:	00 0c       	add	r0, r0
    17e6:	88 0b       	sbc	r24, r24
    17e8:	99 0b       	sbc	r25, r25
    17ea:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    17ee:	a5 01       	movw	r20, r10
    17f0:	94 01       	movw	r18, r8
    17f2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    17f6:	f7 01       	movw	r30, r14
    17f8:	64 83       	std	Z+4, r22	; 0x04
    17fa:	75 83       	std	Z+5, r23	; 0x05
    17fc:	86 83       	std	Z+6, r24	; 0x06
    17fe:	97 83       	std	Z+7, r25	; 0x07
    1800:	6b 89       	ldd	r22, Y+19	; 0x13
    1802:	7c 89       	ldd	r23, Y+20	; 0x14
    1804:	07 2e       	mov	r0, r23
    1806:	00 0c       	add	r0, r0
    1808:	88 0b       	sbc	r24, r24
    180a:	99 0b       	sbc	r25, r25
    180c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    1810:	a5 01       	movw	r20, r10
    1812:	94 01       	movw	r18, r8
    1814:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1818:	f7 01       	movw	r30, r14
    181a:	60 87       	std	Z+8, r22	; 0x08
    181c:	71 87       	std	Z+9, r23	; 0x09
    181e:	82 87       	std	Z+10, r24	; 0x0a
    1820:	93 87       	std	Z+11, r25	; 0x0b
    1822:	c0 90 1c 01 	lds	r12, 0x011C	; 0x80011c <gyro_scale>
    1826:	d0 90 1d 01 	lds	r13, 0x011D	; 0x80011d <gyro_scale+0x1>
    182a:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <gyro_scale+0x2>
    182e:	f0 90 1f 01 	lds	r15, 0x011F	; 0x80011f <gyro_scale+0x3>
    1832:	6d 89       	ldd	r22, Y+21	; 0x15
    1834:	7e 89       	ldd	r23, Y+22	; 0x16
    1836:	07 2e       	mov	r0, r23
    1838:	00 0c       	add	r0, r0
    183a:	88 0b       	sbc	r24, r24
    183c:	99 0b       	sbc	r25, r25
    183e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    1842:	a7 01       	movw	r20, r14
    1844:	96 01       	movw	r18, r12
    1846:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    184a:	f8 01       	movw	r30, r16
    184c:	60 83       	st	Z, r22
    184e:	71 83       	std	Z+1, r23	; 0x01
    1850:	82 83       	std	Z+2, r24	; 0x02
    1852:	93 83       	std	Z+3, r25	; 0x03
    1854:	6f 89       	ldd	r22, Y+23	; 0x17
    1856:	78 8d       	ldd	r23, Y+24	; 0x18
    1858:	07 2e       	mov	r0, r23
    185a:	00 0c       	add	r0, r0
    185c:	88 0b       	sbc	r24, r24
    185e:	99 0b       	sbc	r25, r25
    1860:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    1864:	a7 01       	movw	r20, r14
    1866:	96 01       	movw	r18, r12
    1868:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    186c:	f8 01       	movw	r30, r16
    186e:	64 83       	std	Z+4, r22	; 0x04
    1870:	75 83       	std	Z+5, r23	; 0x05
    1872:	86 83       	std	Z+6, r24	; 0x06
    1874:	97 83       	std	Z+7, r25	; 0x07
    1876:	69 8d       	ldd	r22, Y+25	; 0x19
    1878:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187a:	07 2e       	mov	r0, r23
    187c:	00 0c       	add	r0, r0
    187e:	88 0b       	sbc	r24, r24
    1880:	99 0b       	sbc	r25, r25
    1882:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatsisf>
    1886:	a7 01       	movw	r20, r14
    1888:	96 01       	movw	r18, r12
    188a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    188e:	f8 01       	movw	r30, r16
    1890:	60 87       	std	Z+8, r22	; 0x08
    1892:	71 87       	std	Z+9, r23	; 0x09
    1894:	82 87       	std	Z+10, r24	; 0x0a
    1896:	93 87       	std	Z+11, r25	; 0x0b
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <MPU9250I2CReadIMU_f+0x166>
    189e:	8f ef       	ldi	r24, 0xFF	; 255
    18a0:	9f ef       	ldi	r25, 0xFF	; 255
    18a2:	6a 96       	adiw	r28, 0x1a	; 26
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	af 90       	pop	r10
    18c2:	9f 90       	pop	r9
    18c4:	8f 90       	pop	r8
    18c6:	08 95       	ret

000018c8 <AK8963I2CReadMAGNETO>:


int AK8963I2CReadMAGNETO(int16_t mag[]){
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <AK8963I2CReadMAGNETO+0xa>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <AK8963I2CReadMAGNETO+0xc>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <AK8963I2CReadMAGNETO+0xe>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	08 2f       	mov	r16, r24
    18dc:	19 2f       	mov	r17, r25
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;
	write_a_byte(I2C_SLV0_ADDR, 0x8c); //set the i2c slave address of ak8963(0x0c) read mode
    18de:	6c e8       	ldi	r22, 0x8C	; 140
    18e0:	85 e2       	ldi	r24, 0x25	; 37
    18e2:	11 de       	rcall	.-990    	; 0x1506 <write_a_byte>
	write_a_byte(I2C_SLV0_REG, 0x03); //i2c slave 0 register address from where to begin data transfer
    18e4:	63 e0       	ldi	r22, 0x03	; 3
    18e6:	86 e2       	ldi	r24, 0x26	; 38
    18e8:	0e de       	rcall	.-996    	; 0x1506 <write_a_byte>
	write_a_byte(I2C_SLV0_CTRL, 0x87); //enable i2c and read 6 byte
    18ea:	67 e8       	ldi	r22, 0x87	; 135
    18ec:	87 e2       	ldi	r24, 0x27	; 39
    18ee:	0b de       	rcall	.-1002   	; 0x1506 <write_a_byte>
    18f0:	2f ef       	ldi	r18, 0xFF	; 255
    18f2:	80 e7       	ldi	r24, 0x70	; 112
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	21 50       	subi	r18, 0x01	; 1
    18f8:	80 40       	sbci	r24, 0x00	; 0
    18fa:	90 40       	sbci	r25, 0x00	; 0
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <AK8963I2CReadMAGNETO+0x2e>
    18fe:	00 c0       	rjmp	.+0      	; 0x1900 <AK8963I2CReadMAGNETO+0x38>
    1900:	00 00       	nop
	_delay_ms(50);	

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
    1902:	46 e0       	ldi	r20, 0x06	; 6
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	be 01       	movw	r22, r28
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	89 e4       	ldi	r24, 0x49	; 73
    190e:	11 de       	rcall	.-990    	; 0x1532 <read_n_bytes>
    1910:	99 23       	and	r25, r25
    1912:	ac f0       	brlt	.+42     	; 0x193e <AK8963I2CReadMAGNETO+0x76>
    1914:	fe 01       	movw	r30, r28
    1916:	31 96       	adiw	r30, 0x01	; 1
    1918:	a0 2f       	mov	r26, r16
    191a:	b1 2f       	mov	r27, r17
    191c:	9e 01       	movw	r18, r28
    191e:	29 5f       	subi	r18, 0xF9	; 249
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
	{
		ptr_mag[i]   = buf[i];
    1922:	80 81       	ld	r24, Z
    1924:	8c 93       	st	X, r24
		ptr_mag[i+1] = buf[i+1];
    1926:	81 81       	ldd	r24, Z+1	; 0x01
    1928:	11 96       	adiw	r26, 0x01	; 1
    192a:	8c 93       	st	X, r24
    192c:	11 97       	sbiw	r26, 0x01	; 1
    192e:	32 96       	adiw	r30, 0x02	; 2
    1930:	12 96       	adiw	r26, 0x02	; 2
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
		return -1;
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
    1932:	e2 17       	cp	r30, r18
    1934:	f3 07       	cpc	r31, r19
    1936:	a9 f7       	brne	.-22     	; 0x1922 <AK8963I2CReadMAGNETO+0x5a>
	{
		ptr_mag[i]   = buf[i];
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <AK8963I2CReadMAGNETO+0x7a>
	write_a_byte(I2C_SLV0_REG, 0x03); //i2c slave 0 register address from where to begin data transfer
	write_a_byte(I2C_SLV0_CTRL, 0x87); //enable i2c and read 6 byte
	_delay_ms(50);	

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
		return -1;
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	9f ef       	ldi	r25, 0xFF	; 255
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;

}
    1942:	26 96       	adiw	r28, 0x06	; 6
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <AK8963I2CReadMAGNETO_2>:
int AK8963I2CReadMAGNETO_2(int16_t mag[]){
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	00 d0       	rcall	.+0      	; 0x1962 <AK8963I2CReadMAGNETO_2+0xa>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <AK8963I2CReadMAGNETO_2+0xc>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <AK8963I2CReadMAGNETO_2+0xe>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	08 2f       	mov	r16, r24
    196c:	19 2f       	mov	r17, r25
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
    196e:	46 e0       	ldi	r20, 0x06	; 6
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	be 01       	movw	r22, r28
    1974:	6f 5f       	subi	r22, 0xFF	; 255
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	89 e4       	ldi	r24, 0x49	; 73
    197a:	db dd       	rcall	.-1098   	; 0x1532 <read_n_bytes>
    197c:	99 23       	and	r25, r25
    197e:	ac f0       	brlt	.+42     	; 0x19aa <AK8963I2CReadMAGNETO_2+0x52>
    1980:	fe 01       	movw	r30, r28
    1982:	31 96       	adiw	r30, 0x01	; 1
    1984:	a0 2f       	mov	r26, r16
    1986:	b1 2f       	mov	r27, r17
    1988:	9e 01       	movw	r18, r28
    198a:	29 5f       	subi	r18, 0xF9	; 249
    198c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
	{
		ptr_mag[i]   = buf[i];
    198e:	80 81       	ld	r24, Z
    1990:	8c 93       	st	X, r24
		ptr_mag[i+1] = buf[i+1];
    1992:	81 81       	ldd	r24, Z+1	; 0x01
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	8c 93       	st	X, r24
    1998:	11 97       	sbiw	r26, 0x01	; 1
    199a:	32 96       	adiw	r30, 0x02	; 2
    199c:	12 96       	adiw	r26, 0x02	; 2
	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
	return -1;
	
	ptr_mag  = (unsigned char *) mag;
	
	for(i=0; i<6; i+=2)
    199e:	e2 17       	cp	r30, r18
    19a0:	f3 07       	cpc	r31, r19
    19a2:	a9 f7       	brne	.-22     	; 0x198e <AK8963I2CReadMAGNETO_2+0x36>
	{
		ptr_mag[i]   = buf[i];
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <AK8963I2CReadMAGNETO_2+0x56>
	unsigned char buf[6];
	unsigned char *ptr_mag;
	int i;

	if(read_n_bytes(EXT_SENS_DATA_00, buf, 6) < 0)
	return -1;
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	9f ef       	ldi	r25, 0xFF	; 255
		ptr_mag[i+1] = buf[i+1];
	}

	return 0;

}
    19ae:	26 96       	adiw	r28, 0x06	; 6
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <Quaternion_set>:
    result.v[0] = (1 - t) * q1->v[0] + t * q2->v[0];
    result.v[1] = (1 - t) * q1->v[1] + t * q2->v[1];
    result.v[2] = (1 - t) * q1->v[2] + t * q2->v[2];

    *output = result;
}
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	f4 01       	movw	r30, r8
    19e2:	30 97       	sbiw	r30, 0x00	; 0
    19e4:	11 f4       	brne	.+4      	; 0x19ea <Quaternion_set+0x26>
    19e6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <abort>
    19ea:	60 83       	st	Z, r22
    19ec:	71 83       	std	Z+1, r23	; 0x01
    19ee:	82 83       	std	Z+2, r24	; 0x02
    19f0:	93 83       	std	Z+3, r25	; 0x03
    19f2:	24 83       	std	Z+4, r18	; 0x04
    19f4:	35 83       	std	Z+5, r19	; 0x05
    19f6:	46 83       	std	Z+6, r20	; 0x06
    19f8:	57 83       	std	Z+7, r21	; 0x07
    19fa:	e0 86       	std	Z+8, r14	; 0x08
    19fc:	f1 86       	std	Z+9, r15	; 0x09
    19fe:	02 87       	std	Z+10, r16	; 0x0a
    1a00:	13 87       	std	Z+11, r17	; 0x0b
    1a02:	a4 86       	std	Z+12, r10	; 0x0c
    1a04:	b5 86       	std	Z+13, r11	; 0x0d
    1a06:	c6 86       	std	Z+14, r12	; 0x0e
    1a08:	d7 86       	std	Z+15, r13	; 0x0f
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	9f 90       	pop	r9
    1a20:	8f 90       	pop	r8
    1a22:	08 95       	ret

00001a24 <Quaternion_setIdentity>:
    1a24:	fc 01       	movw	r30, r24
    1a26:	89 2b       	or	r24, r25
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <Quaternion_setIdentity+0xa>
    1a2a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <abort>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 e8       	ldi	r26, 0x80	; 128
    1a34:	bf e3       	ldi	r27, 0x3F	; 63
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	a2 83       	std	Z+2, r26	; 0x02
    1a3c:	b3 83       	std	Z+3, r27	; 0x03
    1a3e:	14 82       	std	Z+4, r1	; 0x04
    1a40:	15 82       	std	Z+5, r1	; 0x05
    1a42:	16 82       	std	Z+6, r1	; 0x06
    1a44:	17 82       	std	Z+7, r1	; 0x07
    1a46:	10 86       	std	Z+8, r1	; 0x08
    1a48:	11 86       	std	Z+9, r1	; 0x09
    1a4a:	12 86       	std	Z+10, r1	; 0x0a
    1a4c:	13 86       	std	Z+11, r1	; 0x0b
    1a4e:	14 86       	std	Z+12, r1	; 0x0c
    1a50:	15 86       	std	Z+13, r1	; 0x0d
    1a52:	16 86       	std	Z+14, r1	; 0x0e
    1a54:	17 86       	std	Z+15, r1	; 0x0f
    1a56:	08 95       	ret

00001a58 <Quaternion_toEulerZYX2>:
    1a58:	4f 92       	push	r4
    1a5a:	5f 92       	push	r5
    1a5c:	6f 92       	push	r6
    1a5e:	7f 92       	push	r7
    1a60:	8f 92       	push	r8
    1a62:	9f 92       	push	r9
    1a64:	af 92       	push	r10
    1a66:	bf 92       	push	r11
    1a68:	cf 92       	push	r12
    1a6a:	df 92       	push	r13
    1a6c:	ef 92       	push	r14
    1a6e:	ff 92       	push	r15
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <Quaternion_toEulerZYX2+0x22>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <Quaternion_toEulerZYX2+0x24>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <Quaternion_toEulerZYX2+0x26>
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	8b 01       	movw	r16, r22
    1a88:	67 2b       	or	r22, r23
    1a8a:	11 f4       	brne	.+4      	; 0x1a90 <Quaternion_toEulerZYX2+0x38>
    1a8c:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <abort>
    1a90:	ed 81       	ldd	r30, Y+5	; 0x05
    1a92:	fe 81       	ldd	r31, Y+6	; 0x06
    1a94:	20 81       	ld	r18, Z
    1a96:	31 81       	ldd	r19, Z+1	; 0x01
    1a98:	42 81       	ldd	r20, Z+2	; 0x02
    1a9a:	53 81       	ldd	r21, Z+3	; 0x03
    1a9c:	64 85       	ldd	r22, Z+12	; 0x0c
    1a9e:	75 85       	ldd	r23, Z+13	; 0x0d
    1aa0:	86 85       	ldd	r24, Z+14	; 0x0e
    1aa2:	97 85       	ldd	r25, Z+15	; 0x0f
    1aa4:	4b d7       	rcall	.+3734   	; 0x293c <atan2>
    1aa6:	9b 01       	movw	r18, r22
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	d5 d6       	rcall	.+3498   	; 0x2856 <__addsf3>
    1aac:	6b 01       	movw	r12, r22
    1aae:	7c 01       	movw	r14, r24
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	60 87       	std	Z+8, r22	; 0x08
    1ab4:	71 87       	std	Z+9, r23	; 0x09
    1ab6:	82 87       	std	Z+10, r24	; 0x0a
    1ab8:	93 87       	std	Z+11, r25	; 0x0b
    1aba:	ed 81       	ldd	r30, Y+5	; 0x05
    1abc:	fe 81       	ldd	r31, Y+6	; 0x06
    1abe:	24 81       	ldd	r18, Z+4	; 0x04
    1ac0:	35 81       	ldd	r19, Z+5	; 0x05
    1ac2:	46 81       	ldd	r20, Z+6	; 0x06
    1ac4:	57 81       	ldd	r21, Z+7	; 0x07
    1ac6:	60 85       	ldd	r22, Z+8	; 0x08
    1ac8:	71 85       	ldd	r23, Z+9	; 0x09
    1aca:	82 85       	ldd	r24, Z+10	; 0x0a
    1acc:	93 85       	ldd	r25, Z+11	; 0x0b
    1ace:	36 d7       	rcall	.+3692   	; 0x293c <atan2>
    1ad0:	4b 01       	movw	r8, r22
    1ad2:	5c 01       	movw	r10, r24
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	c7 01       	movw	r24, r14
    1ade:	b6 01       	movw	r22, r12
    1ae0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1ae4:	a5 01       	movw	r20, r10
    1ae6:	94 01       	movw	r18, r8
    1ae8:	b6 d6       	rcall	.+3436   	; 0x2856 <__addsf3>
    1aea:	f8 01       	movw	r30, r16
    1aec:	60 83       	st	Z, r22
    1aee:	71 83       	std	Z+1, r23	; 0x01
    1af0:	82 83       	std	Z+2, r24	; 0x02
    1af2:	93 83       	std	Z+3, r25	; 0x03
    1af4:	ed 81       	ldd	r30, Y+5	; 0x05
    1af6:	fe 81       	ldd	r31, Y+6	; 0x06
    1af8:	80 80       	ld	r8, Z
    1afa:	91 80       	ldd	r9, Z+1	; 0x01
    1afc:	a2 80       	ldd	r10, Z+2	; 0x02
    1afe:	b3 80       	ldd	r11, Z+3	; 0x03
    1b00:	c4 84       	ldd	r12, Z+12	; 0x0c
    1b02:	d5 84       	ldd	r13, Z+13	; 0x0d
    1b04:	e6 84       	ldd	r14, Z+14	; 0x0e
    1b06:	f7 84       	ldd	r15, Z+15	; 0x0f
    1b08:	a5 01       	movw	r20, r10
    1b0a:	94 01       	movw	r18, r8
    1b0c:	c5 01       	movw	r24, r10
    1b0e:	b4 01       	movw	r22, r8
    1b10:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1b14:	4b 01       	movw	r8, r22
    1b16:	5c 01       	movw	r10, r24
    1b18:	a7 01       	movw	r20, r14
    1b1a:	96 01       	movw	r18, r12
    1b1c:	c7 01       	movw	r24, r14
    1b1e:	b6 01       	movw	r22, r12
    1b20:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1b24:	9b 01       	movw	r18, r22
    1b26:	ac 01       	movw	r20, r24
    1b28:	c5 01       	movw	r24, r10
    1b2a:	b4 01       	movw	r22, r8
    1b2c:	94 d6       	rcall	.+3368   	; 0x2856 <__addsf3>
    1b2e:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <sqrt>
    1b32:	69 83       	std	Y+1, r22	; 0x01
    1b34:	7a 83       	std	Y+2, r23	; 0x02
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b3c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b3e:	80 84       	ldd	r8, Z+8	; 0x08
    1b40:	91 84       	ldd	r9, Z+9	; 0x09
    1b42:	a2 84       	ldd	r10, Z+10	; 0x0a
    1b44:	b3 84       	ldd	r11, Z+11	; 0x0b
    1b46:	c4 80       	ldd	r12, Z+4	; 0x04
    1b48:	d5 80       	ldd	r13, Z+5	; 0x05
    1b4a:	e6 80       	ldd	r14, Z+6	; 0x06
    1b4c:	f7 80       	ldd	r15, Z+7	; 0x07
    1b4e:	a5 01       	movw	r20, r10
    1b50:	94 01       	movw	r18, r8
    1b52:	c5 01       	movw	r24, r10
    1b54:	b4 01       	movw	r22, r8
    1b56:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1b5a:	4b 01       	movw	r8, r22
    1b5c:	5c 01       	movw	r10, r24
    1b5e:	a7 01       	movw	r20, r14
    1b60:	96 01       	movw	r18, r12
    1b62:	c7 01       	movw	r24, r14
    1b64:	b6 01       	movw	r22, r12
    1b66:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1b6a:	9b 01       	movw	r18, r22
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	c5 01       	movw	r24, r10
    1b70:	b4 01       	movw	r22, r8
    1b72:	71 d6       	rcall	.+3298   	; 0x2856 <__addsf3>
    1b74:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <sqrt>
    1b78:	29 81       	ldd	r18, Y+1	; 0x01
    1b7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b7c:	4b 81       	ldd	r20, Y+3	; 0x03
    1b7e:	5c 81       	ldd	r21, Y+4	; 0x04
    1b80:	dd d6       	rcall	.+3514   	; 0x293c <atan2>
    1b82:	9b 01       	movw	r18, r22
    1b84:	ac 01       	movw	r20, r24
    1b86:	67 d6       	rcall	.+3278   	; 0x2856 <__addsf3>
    1b88:	f8 01       	movw	r30, r16
    1b8a:	64 83       	std	Z+4, r22	; 0x04
    1b8c:	75 83       	std	Z+5, r23	; 0x05
    1b8e:	86 83       	std	Z+6, r24	; 0x06
    1b90:	97 83       	std	Z+7, r25	; 0x07
    1b92:	26 96       	adiw	r28, 0x06	; 6
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	bf 90       	pop	r11
    1bb0:	af 90       	pop	r10
    1bb2:	9f 90       	pop	r9
    1bb4:	8f 90       	pop	r8
    1bb6:	7f 90       	pop	r7
    1bb8:	6f 90       	pop	r6
    1bba:	5f 90       	pop	r5
    1bbc:	4f 90       	pop	r4
    1bbe:	08 95       	ret

00001bc0 <Quaternion_norm>:
    1bc0:	4f 92       	push	r4
    1bc2:	5f 92       	push	r5
    1bc4:	6f 92       	push	r6
    1bc6:	7f 92       	push	r7
    1bc8:	8f 92       	push	r8
    1bca:	9f 92       	push	r9
    1bcc:	af 92       	push	r10
    1bce:	bf 92       	push	r11
    1bd0:	cf 92       	push	r12
    1bd2:	df 92       	push	r13
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	28 97       	sbiw	r28, 0x08	; 8
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	fc 01       	movw	r30, r24
    1bee:	89 2b       	or	r24, r25
    1bf0:	11 f4       	brne	.+4      	; 0x1bf6 <Quaternion_norm+0x36>
    1bf2:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <abort>
    1bf6:	80 80       	ld	r8, Z
    1bf8:	91 80       	ldd	r9, Z+1	; 0x01
    1bfa:	a2 80       	ldd	r10, Z+2	; 0x02
    1bfc:	b3 80       	ldd	r11, Z+3	; 0x03
    1bfe:	c4 80       	ldd	r12, Z+4	; 0x04
    1c00:	d5 80       	ldd	r13, Z+5	; 0x05
    1c02:	e6 80       	ldd	r14, Z+6	; 0x06
    1c04:	f7 80       	ldd	r15, Z+7	; 0x07
    1c06:	80 85       	ldd	r24, Z+8	; 0x08
    1c08:	91 85       	ldd	r25, Z+9	; 0x09
    1c0a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c0c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	af 83       	std	Y+7, r26	; 0x07
    1c14:	b8 87       	std	Y+8, r27	; 0x08
    1c16:	44 84       	ldd	r4, Z+12	; 0x0c
    1c18:	55 84       	ldd	r5, Z+13	; 0x0d
    1c1a:	66 84       	ldd	r6, Z+14	; 0x0e
    1c1c:	77 84       	ldd	r7, Z+15	; 0x0f
    1c1e:	a5 01       	movw	r20, r10
    1c20:	94 01       	movw	r18, r8
    1c22:	c5 01       	movw	r24, r10
    1c24:	b4 01       	movw	r22, r8
    1c26:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1c2a:	69 83       	std	Y+1, r22	; 0x01
    1c2c:	7a 83       	std	Y+2, r23	; 0x02
    1c2e:	8b 83       	std	Y+3, r24	; 0x03
    1c30:	9c 83       	std	Y+4, r25	; 0x04
    1c32:	a7 01       	movw	r20, r14
    1c34:	96 01       	movw	r18, r12
    1c36:	c7 01       	movw	r24, r14
    1c38:	b6 01       	movw	r22, r12
    1c3a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1c3e:	9b 01       	movw	r18, r22
    1c40:	ac 01       	movw	r20, r24
    1c42:	69 81       	ldd	r22, Y+1	; 0x01
    1c44:	7a 81       	ldd	r23, Y+2	; 0x02
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	05 d6       	rcall	.+3082   	; 0x2856 <__addsf3>
    1c4c:	69 83       	std	Y+1, r22	; 0x01
    1c4e:	7a 83       	std	Y+2, r23	; 0x02
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	2d 81       	ldd	r18, Y+5	; 0x05
    1c56:	3e 81       	ldd	r19, Y+6	; 0x06
    1c58:	4f 81       	ldd	r20, Y+7	; 0x07
    1c5a:	58 85       	ldd	r21, Y+8	; 0x08
    1c5c:	ca 01       	movw	r24, r20
    1c5e:	b9 01       	movw	r22, r18
    1c60:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1c64:	9b 01       	movw	r18, r22
    1c66:	ac 01       	movw	r20, r24
    1c68:	69 81       	ldd	r22, Y+1	; 0x01
    1c6a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	f2 d5       	rcall	.+3044   	; 0x2856 <__addsf3>
    1c72:	69 83       	std	Y+1, r22	; 0x01
    1c74:	7a 83       	std	Y+2, r23	; 0x02
    1c76:	8b 83       	std	Y+3, r24	; 0x03
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	a5 01       	movw	r20, r10
    1c7c:	94 01       	movw	r18, r8
    1c7e:	c5 01       	movw	r24, r10
    1c80:	b4 01       	movw	r22, r8
    1c82:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1c86:	4b 01       	movw	r8, r22
    1c88:	5c 01       	movw	r10, r24
    1c8a:	a7 01       	movw	r20, r14
    1c8c:	96 01       	movw	r18, r12
    1c8e:	c7 01       	movw	r24, r14
    1c90:	b6 01       	movw	r22, r12
    1c92:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	c5 01       	movw	r24, r10
    1c9c:	b4 01       	movw	r22, r8
    1c9e:	db d5       	rcall	.+2998   	; 0x2856 <__addsf3>
    1ca0:	6b 01       	movw	r12, r22
    1ca2:	7c 01       	movw	r14, r24
    1ca4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca8:	4f 81       	ldd	r20, Y+7	; 0x07
    1caa:	58 85       	ldd	r21, Y+8	; 0x08
    1cac:	ca 01       	movw	r24, r20
    1cae:	b9 01       	movw	r22, r18
    1cb0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1cb4:	9b 01       	movw	r18, r22
    1cb6:	ac 01       	movw	r20, r24
    1cb8:	c7 01       	movw	r24, r14
    1cba:	b6 01       	movw	r22, r12
    1cbc:	cc d5       	rcall	.+2968   	; 0x2856 <__addsf3>
    1cbe:	6b 01       	movw	r12, r22
    1cc0:	7c 01       	movw	r14, r24
    1cc2:	a3 01       	movw	r20, r6
    1cc4:	92 01       	movw	r18, r4
    1cc6:	c3 01       	movw	r24, r6
    1cc8:	b2 01       	movw	r22, r4
    1cca:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__mulsf3>
    1cce:	9b 01       	movw	r18, r22
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	c7 01       	movw	r24, r14
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	bf d5       	rcall	.+2942   	; 0x2856 <__addsf3>
    1cd8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <sqrt>
    1cdc:	28 96       	adiw	r28, 0x08	; 8
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	9f 90       	pop	r9
    1cfa:	8f 90       	pop	r8
    1cfc:	7f 90       	pop	r7
    1cfe:	6f 90       	pop	r6
    1d00:	5f 90       	pop	r5
    1d02:	4f 90       	pop	r4
    1d04:	08 95       	ret

00001d06 <Quaternion_normalize>:
    1d06:	4f 92       	push	r4
    1d08:	5f 92       	push	r5
    1d0a:	6f 92       	push	r6
    1d0c:	7f 92       	push	r7
    1d0e:	8f 92       	push	r8
    1d10:	9f 92       	push	r9
    1d12:	af 92       	push	r10
    1d14:	bf 92       	push	r11
    1d16:	cf 92       	push	r12
    1d18:	df 92       	push	r13
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <Quaternion_normalize+0x22>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <Quaternion_normalize+0x24>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <Quaternion_normalize+0x26>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	8c 01       	movw	r16, r24
    1d32:	7e 83       	std	Y+6, r23	; 0x06
    1d34:	6d 83       	std	Y+5, r22	; 0x05
    1d36:	67 2b       	or	r22, r23
    1d38:	11 f4       	brne	.+4      	; 0x1d3e <Quaternion_normalize+0x38>
    1d3a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <abort>
    1d3e:	40 df       	rcall	.-384    	; 0x1bc0 <Quaternion_norm>
    1d40:	69 83       	std	Y+1, r22	; 0x01
    1d42:	7a 83       	std	Y+2, r23	; 0x02
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    1d46:	9c 83       	std	Y+4, r25	; 0x04
    1d48:	9b 01       	movw	r18, r22
    1d4a:	ac 01       	movw	r20, r24
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	64 85       	ldd	r22, Z+12	; 0x0c
    1d50:	75 85       	ldd	r23, Z+13	; 0x0d
    1d52:	86 85       	ldd	r24, Z+14	; 0x0e
    1d54:	97 85       	ldd	r25, Z+15	; 0x0f
    1d56:	48 d6       	rcall	.+3216   	; 0x29e8 <__divsf3>
    1d58:	6b 01       	movw	r12, r22
    1d5a:	7c 01       	movw	r14, r24
    1d5c:	29 81       	ldd	r18, Y+1	; 0x01
    1d5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d60:	4b 81       	ldd	r20, Y+3	; 0x03
    1d62:	5c 81       	ldd	r21, Y+4	; 0x04
    1d64:	f8 01       	movw	r30, r16
    1d66:	60 85       	ldd	r22, Z+8	; 0x08
    1d68:	71 85       	ldd	r23, Z+9	; 0x09
    1d6a:	82 85       	ldd	r24, Z+10	; 0x0a
    1d6c:	93 85       	ldd	r25, Z+11	; 0x0b
    1d6e:	3c d6       	rcall	.+3192   	; 0x29e8 <__divsf3>
    1d70:	4b 01       	movw	r8, r22
    1d72:	5c 01       	movw	r10, r24
    1d74:	29 81       	ldd	r18, Y+1	; 0x01
    1d76:	3a 81       	ldd	r19, Y+2	; 0x02
    1d78:	4b 81       	ldd	r20, Y+3	; 0x03
    1d7a:	5c 81       	ldd	r21, Y+4	; 0x04
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	64 81       	ldd	r22, Z+4	; 0x04
    1d80:	75 81       	ldd	r23, Z+5	; 0x05
    1d82:	86 81       	ldd	r24, Z+6	; 0x06
    1d84:	97 81       	ldd	r25, Z+7	; 0x07
    1d86:	30 d6       	rcall	.+3168   	; 0x29e8 <__divsf3>
    1d88:	2b 01       	movw	r4, r22
    1d8a:	3c 01       	movw	r6, r24
    1d8c:	29 81       	ldd	r18, Y+1	; 0x01
    1d8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d90:	4b 81       	ldd	r20, Y+3	; 0x03
    1d92:	5c 81       	ldd	r21, Y+4	; 0x04
    1d94:	f8 01       	movw	r30, r16
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	24 d6       	rcall	.+3144   	; 0x29e8 <__divsf3>
    1da0:	ed 81       	ldd	r30, Y+5	; 0x05
    1da2:	fe 81       	ldd	r31, Y+6	; 0x06
    1da4:	60 83       	st	Z, r22
    1da6:	71 83       	std	Z+1, r23	; 0x01
    1da8:	82 83       	std	Z+2, r24	; 0x02
    1daa:	93 83       	std	Z+3, r25	; 0x03
    1dac:	44 82       	std	Z+4, r4	; 0x04
    1dae:	55 82       	std	Z+5, r5	; 0x05
    1db0:	66 82       	std	Z+6, r6	; 0x06
    1db2:	77 82       	std	Z+7, r7	; 0x07
    1db4:	80 86       	std	Z+8, r8	; 0x08
    1db6:	91 86       	std	Z+9, r9	; 0x09
    1db8:	a2 86       	std	Z+10, r10	; 0x0a
    1dba:	b3 86       	std	Z+11, r11	; 0x0b
    1dbc:	c4 86       	std	Z+12, r12	; 0x0c
    1dbe:	d5 86       	std	Z+13, r13	; 0x0d
    1dc0:	e6 86       	std	Z+14, r14	; 0x0e
    1dc2:	f7 86       	std	Z+15, r15	; 0x0f
    1dc4:	26 96       	adiw	r28, 0x06	; 6
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	bf 90       	pop	r11
    1de2:	af 90       	pop	r10
    1de4:	9f 90       	pop	r9
    1de6:	8f 90       	pop	r8
    1de8:	7f 90       	pop	r7
    1dea:	6f 90       	pop	r6
    1dec:	5f 90       	pop	r5
    1dee:	4f 90       	pop	r4
    1df0:	08 95       	ret

00001df2 <Quaternion_multiply>:
    1df2:	4f 92       	push	r4
    1df4:	5f 92       	push	r5
    1df6:	6f 92       	push	r6
    1df8:	7f 92       	push	r7
    1dfa:	8f 92       	push	r8
    1dfc:	9f 92       	push	r9
    1dfe:	af 92       	push	r10
    1e00:	bf 92       	push	r11
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	6a 97       	sbiw	r28, 0x1a	; 26
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	dc 01       	movw	r26, r24
    1e20:	fb 01       	movw	r30, r22
    1e22:	5a 8f       	std	Y+26, r21	; 0x1a
    1e24:	49 8f       	std	Y+25, r20	; 0x19
    1e26:	45 2b       	or	r20, r21
    1e28:	11 f4       	brne	.+4      	; 0x1e2e <Quaternion_multiply+0x3c>
    1e2a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <abort>
    1e2e:	cd 90       	ld	r12, X+
    1e30:	dd 90       	ld	r13, X+
    1e32:	ed 90       	ld	r14, X+
    1e34:	fc 90       	ld	r15, X
    1e36:	13 97       	sbiw	r26, 0x03	; 3
    1e38:	20 81       	ld	r18, Z
    1e3a:	31 81       	ldd	r19, Z+1	; 0x01
    1e3c:	42 81       	ldd	r20, Z+2	; 0x02
    1e3e:	53 81       	ldd	r21, Z+3	; 0x03
    1e40:	29 83       	std	Y+1, r18	; 0x01
    1e42:	3a 83       	std	Y+2, r19	; 0x02
    1e44:	4b 83       	std	Y+3, r20	; 0x03
    1e46:	5c 83       	std	Y+4, r21	; 0x04
    1e48:	14 96       	adiw	r26, 0x04	; 4
    1e4a:	2d 91       	ld	r18, X+
    1e4c:	3d 91       	ld	r19, X+
    1e4e:	4d 91       	ld	r20, X+
    1e50:	5c 91       	ld	r21, X
    1e52:	17 97       	sbiw	r26, 0x07	; 7
    1e54:	2d 83       	std	Y+5, r18	; 0x05
    1e56:	3e 83       	std	Y+6, r19	; 0x06
    1e58:	4f 83       	std	Y+7, r20	; 0x07
    1e5a:	58 87       	std	Y+8, r21	; 0x08
    1e5c:	24 81       	ldd	r18, Z+4	; 0x04
    1e5e:	35 81       	ldd	r19, Z+5	; 0x05
    1e60:	46 81       	ldd	r20, Z+6	; 0x06
    1e62:	57 81       	ldd	r21, Z+7	; 0x07
    1e64:	29 87       	std	Y+9, r18	; 0x09
    1e66:	3a 87       	std	Y+10, r19	; 0x0a
    1e68:	4b 87       	std	Y+11, r20	; 0x0b
    1e6a:	5c 87       	std	Y+12, r21	; 0x0c
    1e6c:	18 96       	adiw	r26, 0x08	; 8
    1e6e:	2d 91       	ld	r18, X+
    1e70:	3d 91       	ld	r19, X+
    1e72:	4d 91       	ld	r20, X+
    1e74:	5c 91       	ld	r21, X
    1e76:	1b 97       	sbiw	r26, 0x0b	; 11
    1e78:	2d 87       	std	Y+13, r18	; 0x0d
    1e7a:	3e 87       	std	Y+14, r19	; 0x0e
    1e7c:	4f 87       	std	Y+15, r20	; 0x0f
    1e7e:	58 8b       	std	Y+16, r21	; 0x10
    1e80:	20 85       	ldd	r18, Z+8	; 0x08
    1e82:	31 85       	ldd	r19, Z+9	; 0x09
    1e84:	42 85       	ldd	r20, Z+10	; 0x0a
    1e86:	53 85       	ldd	r21, Z+11	; 0x0b
    1e88:	29 8b       	std	Y+17, r18	; 0x11
    1e8a:	3a 8b       	std	Y+18, r19	; 0x12
    1e8c:	4b 8b       	std	Y+19, r20	; 0x13
    1e8e:	5c 8b       	std	Y+20, r21	; 0x14
    1e90:	1c 96       	adiw	r26, 0x0c	; 12
    1e92:	2d 91       	ld	r18, X+
    1e94:	3d 91       	ld	r19, X+
    1e96:	4d 91       	ld	r20, X+
    1e98:	5c 91       	ld	r21, X
    1e9a:	1f 97       	sbiw	r26, 0x0f	; 15
    1e9c:	2d 8b       	std	Y+21, r18	; 0x15
    1e9e:	3e 8b       	std	Y+22, r19	; 0x16
    1ea0:	4f 8b       	std	Y+23, r20	; 0x17
    1ea2:	58 8f       	std	Y+24, r21	; 0x18
    1ea4:	84 84       	ldd	r8, Z+12	; 0x0c
    1ea6:	95 84       	ldd	r9, Z+13	; 0x0d
    1ea8:	a6 84       	ldd	r10, Z+14	; 0x0e
    1eaa:	b7 84       	ldd	r11, Z+15	; 0x0f
    1eac:	29 81       	ldd	r18, Y+1	; 0x01
    1eae:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb0:	4b 81       	ldd	r20, Y+3	; 0x03
    1eb2:	5c 81       	ldd	r21, Y+4	; 0x04
    1eb4:	c7 01       	movw	r24, r14
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	34 d7       	rcall	.+3688   	; 0x2d22 <__mulsf3>
    1eba:	2b 01       	movw	r4, r22
    1ebc:	3c 01       	movw	r6, r24
    1ebe:	29 85       	ldd	r18, Y+9	; 0x09
    1ec0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ec2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ec4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ec6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec8:	7e 81       	ldd	r23, Y+6	; 0x06
    1eca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ecc:	98 85       	ldd	r25, Y+8	; 0x08
    1ece:	29 d7       	rcall	.+3666   	; 0x2d22 <__mulsf3>
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	c3 01       	movw	r24, r6
    1ed6:	b2 01       	movw	r22, r4
    1ed8:	bd d4       	rcall	.+2426   	; 0x2854 <__subsf3>
    1eda:	2b 01       	movw	r4, r22
    1edc:	3c 01       	movw	r6, r24
    1ede:	29 89       	ldd	r18, Y+17	; 0x11
    1ee0:	3a 89       	ldd	r19, Y+18	; 0x12
    1ee2:	4b 89       	ldd	r20, Y+19	; 0x13
    1ee4:	5c 89       	ldd	r21, Y+20	; 0x14
    1ee6:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ee8:	7e 85       	ldd	r23, Y+14	; 0x0e
    1eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eec:	98 89       	ldd	r25, Y+16	; 0x10
    1eee:	19 d7       	rcall	.+3634   	; 0x2d22 <__mulsf3>
    1ef0:	9b 01       	movw	r18, r22
    1ef2:	ac 01       	movw	r20, r24
    1ef4:	c3 01       	movw	r24, r6
    1ef6:	b2 01       	movw	r22, r4
    1ef8:	ad d4       	rcall	.+2394   	; 0x2854 <__subsf3>
    1efa:	2b 01       	movw	r4, r22
    1efc:	3c 01       	movw	r6, r24
    1efe:	a5 01       	movw	r20, r10
    1f00:	94 01       	movw	r18, r8
    1f02:	6d 89       	ldd	r22, Y+21	; 0x15
    1f04:	7e 89       	ldd	r23, Y+22	; 0x16
    1f06:	8f 89       	ldd	r24, Y+23	; 0x17
    1f08:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0a:	0b d7       	rcall	.+3606   	; 0x2d22 <__mulsf3>
    1f0c:	9b 01       	movw	r18, r22
    1f0e:	ac 01       	movw	r20, r24
    1f10:	c3 01       	movw	r24, r6
    1f12:	b2 01       	movw	r22, r4
    1f14:	9f d4       	rcall	.+2366   	; 0x2854 <__subsf3>
    1f16:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f18:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f1a:	60 83       	st	Z, r22
    1f1c:	71 83       	std	Z+1, r23	; 0x01
    1f1e:	82 83       	std	Z+2, r24	; 0x02
    1f20:	93 83       	std	Z+3, r25	; 0x03
    1f22:	2d 81       	ldd	r18, Y+5	; 0x05
    1f24:	3e 81       	ldd	r19, Y+6	; 0x06
    1f26:	4f 81       	ldd	r20, Y+7	; 0x07
    1f28:	58 85       	ldd	r21, Y+8	; 0x08
    1f2a:	69 81       	ldd	r22, Y+1	; 0x01
    1f2c:	7a 81       	ldd	r23, Y+2	; 0x02
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	f7 d6       	rcall	.+3566   	; 0x2d22 <__mulsf3>
    1f34:	2b 01       	movw	r4, r22
    1f36:	3c 01       	movw	r6, r24
    1f38:	29 85       	ldd	r18, Y+9	; 0x09
    1f3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f3c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f3e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f40:	c7 01       	movw	r24, r14
    1f42:	b6 01       	movw	r22, r12
    1f44:	ee d6       	rcall	.+3548   	; 0x2d22 <__mulsf3>
    1f46:	9b 01       	movw	r18, r22
    1f48:	ac 01       	movw	r20, r24
    1f4a:	c3 01       	movw	r24, r6
    1f4c:	b2 01       	movw	r22, r4
    1f4e:	83 d4       	rcall	.+2310   	; 0x2856 <__addsf3>
    1f50:	2b 01       	movw	r4, r22
    1f52:	3c 01       	movw	r6, r24
    1f54:	a5 01       	movw	r20, r10
    1f56:	94 01       	movw	r18, r8
    1f58:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f5a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f5e:	98 89       	ldd	r25, Y+16	; 0x10
    1f60:	e0 d6       	rcall	.+3520   	; 0x2d22 <__mulsf3>
    1f62:	9b 01       	movw	r18, r22
    1f64:	ac 01       	movw	r20, r24
    1f66:	c3 01       	movw	r24, r6
    1f68:	b2 01       	movw	r22, r4
    1f6a:	75 d4       	rcall	.+2282   	; 0x2856 <__addsf3>
    1f6c:	2b 01       	movw	r4, r22
    1f6e:	3c 01       	movw	r6, r24
    1f70:	2d 89       	ldd	r18, Y+21	; 0x15
    1f72:	3e 89       	ldd	r19, Y+22	; 0x16
    1f74:	4f 89       	ldd	r20, Y+23	; 0x17
    1f76:	58 8d       	ldd	r21, Y+24	; 0x18
    1f78:	69 89       	ldd	r22, Y+17	; 0x11
    1f7a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	d0 d6       	rcall	.+3488   	; 0x2d22 <__mulsf3>
    1f82:	9b 01       	movw	r18, r22
    1f84:	ac 01       	movw	r20, r24
    1f86:	c3 01       	movw	r24, r6
    1f88:	b2 01       	movw	r22, r4
    1f8a:	64 d4       	rcall	.+2248   	; 0x2854 <__subsf3>
    1f8c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f8e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f90:	64 83       	std	Z+4, r22	; 0x04
    1f92:	75 83       	std	Z+5, r23	; 0x05
    1f94:	86 83       	std	Z+6, r24	; 0x06
    1f96:	97 83       	std	Z+7, r25	; 0x07
    1f98:	29 89       	ldd	r18, Y+17	; 0x11
    1f9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1f9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1f9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1fa0:	c7 01       	movw	r24, r14
    1fa2:	b6 01       	movw	r22, r12
    1fa4:	be d6       	rcall	.+3452   	; 0x2d22 <__mulsf3>
    1fa6:	2b 01       	movw	r4, r22
    1fa8:	3c 01       	movw	r6, r24
    1faa:	a5 01       	movw	r20, r10
    1fac:	94 01       	movw	r18, r8
    1fae:	6d 81       	ldd	r22, Y+5	; 0x05
    1fb0:	7e 81       	ldd	r23, Y+6	; 0x06
    1fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb4:	98 85       	ldd	r25, Y+8	; 0x08
    1fb6:	b5 d6       	rcall	.+3434   	; 0x2d22 <__mulsf3>
    1fb8:	9b 01       	movw	r18, r22
    1fba:	ac 01       	movw	r20, r24
    1fbc:	c3 01       	movw	r24, r6
    1fbe:	b2 01       	movw	r22, r4
    1fc0:	49 d4       	rcall	.+2194   	; 0x2854 <__subsf3>
    1fc2:	2b 01       	movw	r4, r22
    1fc4:	3c 01       	movw	r6, r24
    1fc6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fc8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fca:	4f 85       	ldd	r20, Y+15	; 0x0f
    1fcc:	58 89       	ldd	r21, Y+16	; 0x10
    1fce:	69 81       	ldd	r22, Y+1	; 0x01
    1fd0:	7a 81       	ldd	r23, Y+2	; 0x02
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd6:	a5 d6       	rcall	.+3402   	; 0x2d22 <__mulsf3>
    1fd8:	9b 01       	movw	r18, r22
    1fda:	ac 01       	movw	r20, r24
    1fdc:	c3 01       	movw	r24, r6
    1fde:	b2 01       	movw	r22, r4
    1fe0:	3a d4       	rcall	.+2164   	; 0x2856 <__addsf3>
    1fe2:	2b 01       	movw	r4, r22
    1fe4:	3c 01       	movw	r6, r24
    1fe6:	2d 89       	ldd	r18, Y+21	; 0x15
    1fe8:	3e 89       	ldd	r19, Y+22	; 0x16
    1fea:	4f 89       	ldd	r20, Y+23	; 0x17
    1fec:	58 8d       	ldd	r21, Y+24	; 0x18
    1fee:	69 85       	ldd	r22, Y+9	; 0x09
    1ff0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ff2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ff4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ff6:	95 d6       	rcall	.+3370   	; 0x2d22 <__mulsf3>
    1ff8:	9b 01       	movw	r18, r22
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	c3 01       	movw	r24, r6
    1ffe:	b2 01       	movw	r22, r4
    2000:	2a d4       	rcall	.+2132   	; 0x2856 <__addsf3>
    2002:	e9 8d       	ldd	r30, Y+25	; 0x19
    2004:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2006:	60 87       	std	Z+8, r22	; 0x08
    2008:	71 87       	std	Z+9, r23	; 0x09
    200a:	82 87       	std	Z+10, r24	; 0x0a
    200c:	93 87       	std	Z+11, r25	; 0x0b
    200e:	a5 01       	movw	r20, r10
    2010:	94 01       	movw	r18, r8
    2012:	c7 01       	movw	r24, r14
    2014:	b6 01       	movw	r22, r12
    2016:	85 d6       	rcall	.+3338   	; 0x2d22 <__mulsf3>
    2018:	6b 01       	movw	r12, r22
    201a:	7c 01       	movw	r14, r24
    201c:	29 89       	ldd	r18, Y+17	; 0x11
    201e:	3a 89       	ldd	r19, Y+18	; 0x12
    2020:	4b 89       	ldd	r20, Y+19	; 0x13
    2022:	5c 89       	ldd	r21, Y+20	; 0x14
    2024:	6d 81       	ldd	r22, Y+5	; 0x05
    2026:	7e 81       	ldd	r23, Y+6	; 0x06
    2028:	8f 81       	ldd	r24, Y+7	; 0x07
    202a:	98 85       	ldd	r25, Y+8	; 0x08
    202c:	7a d6       	rcall	.+3316   	; 0x2d22 <__mulsf3>
    202e:	9b 01       	movw	r18, r22
    2030:	ac 01       	movw	r20, r24
    2032:	c7 01       	movw	r24, r14
    2034:	b6 01       	movw	r22, r12
    2036:	0f d4       	rcall	.+2078   	; 0x2856 <__addsf3>
    2038:	6b 01       	movw	r12, r22
    203a:	7c 01       	movw	r14, r24
    203c:	2d 85       	ldd	r18, Y+13	; 0x0d
    203e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2040:	4f 85       	ldd	r20, Y+15	; 0x0f
    2042:	58 89       	ldd	r21, Y+16	; 0x10
    2044:	69 85       	ldd	r22, Y+9	; 0x09
    2046:	7a 85       	ldd	r23, Y+10	; 0x0a
    2048:	8b 85       	ldd	r24, Y+11	; 0x0b
    204a:	9c 85       	ldd	r25, Y+12	; 0x0c
    204c:	6a d6       	rcall	.+3284   	; 0x2d22 <__mulsf3>
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	c7 01       	movw	r24, r14
    2054:	b6 01       	movw	r22, r12
    2056:	fe d3       	rcall	.+2044   	; 0x2854 <__subsf3>
    2058:	6b 01       	movw	r12, r22
    205a:	7c 01       	movw	r14, r24
    205c:	2d 89       	ldd	r18, Y+21	; 0x15
    205e:	3e 89       	ldd	r19, Y+22	; 0x16
    2060:	4f 89       	ldd	r20, Y+23	; 0x17
    2062:	58 8d       	ldd	r21, Y+24	; 0x18
    2064:	69 81       	ldd	r22, Y+1	; 0x01
    2066:	7a 81       	ldd	r23, Y+2	; 0x02
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	5a d6       	rcall	.+3252   	; 0x2d22 <__mulsf3>
    206e:	9b 01       	movw	r18, r22
    2070:	ac 01       	movw	r20, r24
    2072:	c7 01       	movw	r24, r14
    2074:	b6 01       	movw	r22, r12
    2076:	ef d3       	rcall	.+2014   	; 0x2856 <__addsf3>
    2078:	e9 8d       	ldd	r30, Y+25	; 0x19
    207a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    207c:	64 87       	std	Z+12, r22	; 0x0c
    207e:	75 87       	std	Z+13, r23	; 0x0d
    2080:	86 87       	std	Z+14, r24	; 0x0e
    2082:	97 87       	std	Z+15, r25	; 0x0f
    2084:	6a 96       	adiw	r28, 0x1a	; 26
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	cf 90       	pop	r12
    209c:	bf 90       	pop	r11
    209e:	af 90       	pop	r10
    20a0:	9f 90       	pop	r9
    20a2:	8f 90       	pop	r8
    20a4:	7f 90       	pop	r7
    20a6:	6f 90       	pop	r6
    20a8:	5f 90       	pop	r5
    20aa:	4f 90       	pop	r4
    20ac:	08 95       	ret

000020ae <Quaternion_rotate>:
    20ae:	2f 92       	push	r2
    20b0:	3f 92       	push	r3
    20b2:	4f 92       	push	r4
    20b4:	5f 92       	push	r5
    20b6:	6f 92       	push	r6
    20b8:	7f 92       	push	r7
    20ba:	8f 92       	push	r8
    20bc:	9f 92       	push	r9
    20be:	af 92       	push	r10
    20c0:	bf 92       	push	r11
    20c2:	cf 92       	push	r12
    20c4:	df 92       	push	r13
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	e0 97       	sbiw	r28, 0x30	; 48
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	8b 01       	movw	r16, r22
    20e8:	1a 01       	movw	r2, r20
    20ea:	45 2b       	or	r20, r21
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <Quaternion_rotate+0x42>
    20ee:	03 d7       	rcall	.+3590   	; 0x2ef6 <abort>
    20f0:	a9 81       	ldd	r26, Y+1	; 0x01
    20f2:	ba 81       	ldd	r27, Y+2	; 0x02
    20f4:	cd 90       	ld	r12, X+
    20f6:	dd 90       	ld	r13, X+
    20f8:	ed 90       	ld	r14, X+
    20fa:	fc 90       	ld	r15, X
    20fc:	a7 01       	movw	r20, r14
    20fe:	96 01       	movw	r18, r12
    2100:	c7 01       	movw	r24, r14
    2102:	b6 01       	movw	r22, r12
    2104:	0e d6       	rcall	.+3100   	; 0x2d22 <__mulsf3>
    2106:	69 8b       	std	Y+17, r22	; 0x11
    2108:	7a 8b       	std	Y+18, r23	; 0x12
    210a:	8b 8b       	std	Y+19, r24	; 0x13
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	a9 81       	ldd	r26, Y+1	; 0x01
    2110:	ba 81       	ldd	r27, Y+2	; 0x02
    2112:	14 96       	adiw	r26, 0x04	; 4
    2114:	8d 91       	ld	r24, X+
    2116:	9d 91       	ld	r25, X+
    2118:	0d 90       	ld	r0, X+
    211a:	bc 91       	ld	r27, X
    211c:	a0 2d       	mov	r26, r0
    211e:	8d 87       	std	Y+13, r24	; 0x0d
    2120:	9e 87       	std	Y+14, r25	; 0x0e
    2122:	af 87       	std	Y+15, r26	; 0x0f
    2124:	b8 8b       	std	Y+16, r27	; 0x10
    2126:	9c 01       	movw	r18, r24
    2128:	ad 01       	movw	r20, r26
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	f9 d5       	rcall	.+3058   	; 0x2d22 <__mulsf3>
    2130:	6d 8b       	std	Y+21, r22	; 0x15
    2132:	7e 8b       	std	Y+22, r23	; 0x16
    2134:	8f 8b       	std	Y+23, r24	; 0x17
    2136:	98 8f       	std	Y+24, r25	; 0x18
    2138:	e9 81       	ldd	r30, Y+1	; 0x01
    213a:	fa 81       	ldd	r31, Y+2	; 0x02
    213c:	80 84       	ldd	r8, Z+8	; 0x08
    213e:	91 84       	ldd	r9, Z+9	; 0x09
    2140:	a2 84       	ldd	r10, Z+10	; 0x0a
    2142:	b3 84       	ldd	r11, Z+11	; 0x0b
    2144:	a5 01       	movw	r20, r10
    2146:	94 01       	movw	r18, r8
    2148:	c5 01       	movw	r24, r10
    214a:	b4 01       	movw	r22, r8
    214c:	ea d5       	rcall	.+3028   	; 0x2d22 <__mulsf3>
    214e:	69 8f       	std	Y+25, r22	; 0x19
    2150:	7a 8f       	std	Y+26, r23	; 0x1a
    2152:	8b 8f       	std	Y+27, r24	; 0x1b
    2154:	9c 8f       	std	Y+28, r25	; 0x1c
    2156:	a9 81       	ldd	r26, Y+1	; 0x01
    2158:	ba 81       	ldd	r27, Y+2	; 0x02
    215a:	1c 96       	adiw	r26, 0x0c	; 12
    215c:	4d 90       	ld	r4, X+
    215e:	5d 90       	ld	r5, X+
    2160:	6d 90       	ld	r6, X+
    2162:	7c 90       	ld	r7, X
    2164:	1f 97       	sbiw	r26, 0x0f	; 15
    2166:	a3 01       	movw	r20, r6
    2168:	92 01       	movw	r18, r4
    216a:	c3 01       	movw	r24, r6
    216c:	b2 01       	movw	r22, r4
    216e:	d9 d5       	rcall	.+2994   	; 0x2d22 <__mulsf3>
    2170:	6d 8f       	std	Y+29, r22	; 0x1d
    2172:	7e 8f       	std	Y+30, r23	; 0x1e
    2174:	8f 8f       	std	Y+31, r24	; 0x1f
    2176:	98 a3       	std	Y+32, r25	; 0x20
    2178:	d8 01       	movw	r26, r16
    217a:	8d 91       	ld	r24, X+
    217c:	9d 91       	ld	r25, X+
    217e:	0d 90       	ld	r0, X+
    2180:	bc 91       	ld	r27, X
    2182:	a0 2d       	mov	r26, r0
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	ab 83       	std	Y+3, r26	; 0x03
    218a:	bc 83       	std	Y+4, r27	; 0x04
    218c:	a5 01       	movw	r20, r10
    218e:	94 01       	movw	r18, r8
    2190:	c7 01       	movw	r24, r14
    2192:	b6 01       	movw	r22, r12
    2194:	c6 d5       	rcall	.+2956   	; 0x2d22 <__mulsf3>
    2196:	9b 01       	movw	r18, r22
    2198:	ac 01       	movw	r20, r24
    219a:	5d d3       	rcall	.+1722   	; 0x2856 <__addsf3>
    219c:	69 a3       	std	Y+33, r22	; 0x21
    219e:	7a a3       	std	Y+34, r23	; 0x22
    21a0:	8b a3       	std	Y+35, r24	; 0x23
    21a2:	9c a3       	std	Y+36, r25	; 0x24
    21a4:	d8 01       	movw	r26, r16
    21a6:	18 96       	adiw	r26, 0x08	; 8
    21a8:	8d 91       	ld	r24, X+
    21aa:	9d 91       	ld	r25, X+
    21ac:	0d 90       	ld	r0, X+
    21ae:	bc 91       	ld	r27, X
    21b0:	a0 2d       	mov	r26, r0
    21b2:	8d 83       	std	Y+5, r24	; 0x05
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	af 83       	std	Y+7, r26	; 0x07
    21b8:	b8 87       	std	Y+8, r27	; 0x08
    21ba:	a3 01       	movw	r20, r6
    21bc:	92 01       	movw	r18, r4
    21be:	c7 01       	movw	r24, r14
    21c0:	b6 01       	movw	r22, r12
    21c2:	af d5       	rcall	.+2910   	; 0x2d22 <__mulsf3>
    21c4:	9b 01       	movw	r18, r22
    21c6:	ac 01       	movw	r20, r24
    21c8:	46 d3       	rcall	.+1676   	; 0x2856 <__addsf3>
    21ca:	6d a3       	std	Y+37, r22	; 0x25
    21cc:	7e a3       	std	Y+38, r23	; 0x26
    21ce:	8f a3       	std	Y+39, r24	; 0x27
    21d0:	98 a7       	std	Y+40, r25	; 0x28
    21d2:	d8 01       	movw	r26, r16
    21d4:	14 96       	adiw	r26, 0x04	; 4
    21d6:	8d 91       	ld	r24, X+
    21d8:	9d 91       	ld	r25, X+
    21da:	0d 90       	ld	r0, X+
    21dc:	bc 91       	ld	r27, X
    21de:	a0 2d       	mov	r26, r0
    21e0:	89 87       	std	Y+9, r24	; 0x09
    21e2:	9a 87       	std	Y+10, r25	; 0x0a
    21e4:	ab 87       	std	Y+11, r26	; 0x0b
    21e6:	bc 87       	std	Y+12, r27	; 0x0c
    21e8:	a5 01       	movw	r20, r10
    21ea:	94 01       	movw	r18, r8
    21ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    21ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	98 89       	ldd	r25, Y+16	; 0x10
    21f4:	96 d5       	rcall	.+2860   	; 0x2d22 <__mulsf3>
    21f6:	9b 01       	movw	r18, r22
    21f8:	ac 01       	movw	r20, r24
    21fa:	2d d3       	rcall	.+1626   	; 0x2856 <__addsf3>
    21fc:	69 a7       	std	Y+41, r22	; 0x29
    21fe:	7a a7       	std	Y+42, r23	; 0x2a
    2200:	8b a7       	std	Y+43, r24	; 0x2b
    2202:	9c a7       	std	Y+44, r25	; 0x2c
    2204:	a3 01       	movw	r20, r6
    2206:	92 01       	movw	r18, r4
    2208:	6d 85       	ldd	r22, Y+13	; 0x0d
    220a:	7e 85       	ldd	r23, Y+14	; 0x0e
    220c:	8f 85       	ldd	r24, Y+15	; 0x0f
    220e:	98 89       	ldd	r25, Y+16	; 0x10
    2210:	88 d5       	rcall	.+2832   	; 0x2d22 <__mulsf3>
    2212:	9b 01       	movw	r18, r22
    2214:	ac 01       	movw	r20, r24
    2216:	1f d3       	rcall	.+1598   	; 0x2856 <__addsf3>
    2218:	6d a7       	std	Y+45, r22	; 0x2d
    221a:	7e a7       	std	Y+46, r23	; 0x2e
    221c:	8f a7       	std	Y+47, r24	; 0x2f
    221e:	98 ab       	std	Y+48, r25	; 0x30
    2220:	a3 01       	movw	r20, r6
    2222:	92 01       	movw	r18, r4
    2224:	c5 01       	movw	r24, r10
    2226:	b4 01       	movw	r22, r8
    2228:	7c d5       	rcall	.+2808   	; 0x2d22 <__mulsf3>
    222a:	9b 01       	movw	r18, r22
    222c:	ac 01       	movw	r20, r24
    222e:	13 d3       	rcall	.+1574   	; 0x2856 <__addsf3>
    2230:	4b 01       	movw	r8, r22
    2232:	5c 01       	movw	r10, r24
    2234:	2d 85       	ldd	r18, Y+13	; 0x0d
    2236:	3e 85       	ldd	r19, Y+14	; 0x0e
    2238:	4f 85       	ldd	r20, Y+15	; 0x0f
    223a:	58 89       	ldd	r21, Y+16	; 0x10
    223c:	c7 01       	movw	r24, r14
    223e:	b6 01       	movw	r22, r12
    2240:	70 d5       	rcall	.+2784   	; 0x2d22 <__mulsf3>
    2242:	9b 01       	movw	r18, r22
    2244:	ac 01       	movw	r20, r24
    2246:	07 d3       	rcall	.+1550   	; 0x2856 <__addsf3>
    2248:	2b 01       	movw	r4, r22
    224a:	3c 01       	movw	r6, r24
    224c:	29 81       	ldd	r18, Y+1	; 0x01
    224e:	3a 81       	ldd	r19, Y+2	; 0x02
    2250:	4b 81       	ldd	r20, Y+3	; 0x03
    2252:	5c 81       	ldd	r21, Y+4	; 0x04
    2254:	69 89       	ldd	r22, Y+17	; 0x11
    2256:	7a 89       	ldd	r23, Y+18	; 0x12
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	62 d5       	rcall	.+2756   	; 0x2d22 <__mulsf3>
    225e:	6b 01       	movw	r12, r22
    2260:	7c 01       	movw	r14, r24
    2262:	2d 81       	ldd	r18, Y+5	; 0x05
    2264:	3e 81       	ldd	r19, Y+6	; 0x06
    2266:	4f 81       	ldd	r20, Y+7	; 0x07
    2268:	58 85       	ldd	r21, Y+8	; 0x08
    226a:	69 a1       	ldd	r22, Y+33	; 0x21
    226c:	7a a1       	ldd	r23, Y+34	; 0x22
    226e:	8b a1       	ldd	r24, Y+35	; 0x23
    2270:	9c a1       	ldd	r25, Y+36	; 0x24
    2272:	57 d5       	rcall	.+2734   	; 0x2d22 <__mulsf3>
    2274:	9b 01       	movw	r18, r22
    2276:	ac 01       	movw	r20, r24
    2278:	c7 01       	movw	r24, r14
    227a:	b6 01       	movw	r22, r12
    227c:	ec d2       	rcall	.+1496   	; 0x2856 <__addsf3>
    227e:	6b 01       	movw	r12, r22
    2280:	7c 01       	movw	r14, r24
    2282:	29 85       	ldd	r18, Y+9	; 0x09
    2284:	3a 85       	ldd	r19, Y+10	; 0x0a
    2286:	4b 85       	ldd	r20, Y+11	; 0x0b
    2288:	5c 85       	ldd	r21, Y+12	; 0x0c
    228a:	6d a1       	ldd	r22, Y+37	; 0x25
    228c:	7e a1       	ldd	r23, Y+38	; 0x26
    228e:	8f a1       	ldd	r24, Y+39	; 0x27
    2290:	98 a5       	ldd	r25, Y+40	; 0x28
    2292:	47 d5       	rcall	.+2702   	; 0x2d22 <__mulsf3>
    2294:	9b 01       	movw	r18, r22
    2296:	ac 01       	movw	r20, r24
    2298:	c7 01       	movw	r24, r14
    229a:	b6 01       	movw	r22, r12
    229c:	db d2       	rcall	.+1462   	; 0x2854 <__subsf3>
    229e:	6b 01       	movw	r12, r22
    22a0:	7c 01       	movw	r14, r24
    22a2:	29 81       	ldd	r18, Y+1	; 0x01
    22a4:	3a 81       	ldd	r19, Y+2	; 0x02
    22a6:	4b 81       	ldd	r20, Y+3	; 0x03
    22a8:	5c 81       	ldd	r21, Y+4	; 0x04
    22aa:	6d 89       	ldd	r22, Y+21	; 0x15
    22ac:	7e 89       	ldd	r23, Y+22	; 0x16
    22ae:	8f 89       	ldd	r24, Y+23	; 0x17
    22b0:	98 8d       	ldd	r25, Y+24	; 0x18
    22b2:	37 d5       	rcall	.+2670   	; 0x2d22 <__mulsf3>
    22b4:	9b 01       	movw	r18, r22
    22b6:	ac 01       	movw	r20, r24
    22b8:	c7 01       	movw	r24, r14
    22ba:	b6 01       	movw	r22, r12
    22bc:	cc d2       	rcall	.+1432   	; 0x2856 <__addsf3>
    22be:	6b 01       	movw	r12, r22
    22c0:	7c 01       	movw	r14, r24
    22c2:	29 a5       	ldd	r18, Y+41	; 0x29
    22c4:	3a a5       	ldd	r19, Y+42	; 0x2a
    22c6:	4b a5       	ldd	r20, Y+43	; 0x2b
    22c8:	5c a5       	ldd	r21, Y+44	; 0x2c
    22ca:	69 85       	ldd	r22, Y+9	; 0x09
    22cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    22ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    22d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    22d2:	27 d5       	rcall	.+2638   	; 0x2d22 <__mulsf3>
    22d4:	9b 01       	movw	r18, r22
    22d6:	ac 01       	movw	r20, r24
    22d8:	c7 01       	movw	r24, r14
    22da:	b6 01       	movw	r22, r12
    22dc:	bc d2       	rcall	.+1400   	; 0x2856 <__addsf3>
    22de:	6b 01       	movw	r12, r22
    22e0:	7c 01       	movw	r14, r24
    22e2:	2d a5       	ldd	r18, Y+45	; 0x2d
    22e4:	3e a5       	ldd	r19, Y+46	; 0x2e
    22e6:	4f a5       	ldd	r20, Y+47	; 0x2f
    22e8:	58 a9       	ldd	r21, Y+48	; 0x30
    22ea:	6d 81       	ldd	r22, Y+5	; 0x05
    22ec:	7e 81       	ldd	r23, Y+6	; 0x06
    22ee:	8f 81       	ldd	r24, Y+7	; 0x07
    22f0:	98 85       	ldd	r25, Y+8	; 0x08
    22f2:	17 d5       	rcall	.+2606   	; 0x2d22 <__mulsf3>
    22f4:	9b 01       	movw	r18, r22
    22f6:	ac 01       	movw	r20, r24
    22f8:	c7 01       	movw	r24, r14
    22fa:	b6 01       	movw	r22, r12
    22fc:	ac d2       	rcall	.+1368   	; 0x2856 <__addsf3>
    22fe:	6b 01       	movw	r12, r22
    2300:	7c 01       	movw	r14, r24
    2302:	29 81       	ldd	r18, Y+1	; 0x01
    2304:	3a 81       	ldd	r19, Y+2	; 0x02
    2306:	4b 81       	ldd	r20, Y+3	; 0x03
    2308:	5c 81       	ldd	r21, Y+4	; 0x04
    230a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    230c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    230e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2310:	98 a1       	ldd	r25, Y+32	; 0x20
    2312:	07 d5       	rcall	.+2574   	; 0x2d22 <__mulsf3>
    2314:	9b 01       	movw	r18, r22
    2316:	ac 01       	movw	r20, r24
    2318:	c7 01       	movw	r24, r14
    231a:	b6 01       	movw	r22, r12
    231c:	9b d2       	rcall	.+1334   	; 0x2854 <__subsf3>
    231e:	6b 01       	movw	r12, r22
    2320:	7c 01       	movw	r14, r24
    2322:	29 81       	ldd	r18, Y+1	; 0x01
    2324:	3a 81       	ldd	r19, Y+2	; 0x02
    2326:	4b 81       	ldd	r20, Y+3	; 0x03
    2328:	5c 81       	ldd	r21, Y+4	; 0x04
    232a:	69 8d       	ldd	r22, Y+25	; 0x19
    232c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2330:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2332:	f7 d4       	rcall	.+2542   	; 0x2d22 <__mulsf3>
    2334:	9b 01       	movw	r18, r22
    2336:	ac 01       	movw	r20, r24
    2338:	c7 01       	movw	r24, r14
    233a:	b6 01       	movw	r22, r12
    233c:	8b d2       	rcall	.+1302   	; 0x2854 <__subsf3>
    233e:	f1 01       	movw	r30, r2
    2340:	60 83       	st	Z, r22
    2342:	71 83       	std	Z+1, r23	; 0x01
    2344:	82 83       	std	Z+2, r24	; 0x02
    2346:	93 83       	std	Z+3, r25	; 0x03
    2348:	29 a5       	ldd	r18, Y+41	; 0x29
    234a:	3a a5       	ldd	r19, Y+42	; 0x2a
    234c:	4b a5       	ldd	r20, Y+43	; 0x2b
    234e:	5c a5       	ldd	r21, Y+44	; 0x2c
    2350:	69 81       	ldd	r22, Y+1	; 0x01
    2352:	7a 81       	ldd	r23, Y+2	; 0x02
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	e4 d4       	rcall	.+2504   	; 0x2d22 <__mulsf3>
    235a:	6b 01       	movw	r12, r22
    235c:	7c 01       	movw	r14, r24
    235e:	29 85       	ldd	r18, Y+9	; 0x09
    2360:	3a 85       	ldd	r19, Y+10	; 0x0a
    2362:	4b 85       	ldd	r20, Y+11	; 0x0b
    2364:	5c 85       	ldd	r21, Y+12	; 0x0c
    2366:	69 8d       	ldd	r22, Y+25	; 0x19
    2368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236e:	d9 d4       	rcall	.+2482   	; 0x2d22 <__mulsf3>
    2370:	9b 01       	movw	r18, r22
    2372:	ac 01       	movw	r20, r24
    2374:	c7 01       	movw	r24, r14
    2376:	b6 01       	movw	r22, r12
    2378:	6e d2       	rcall	.+1244   	; 0x2856 <__addsf3>
    237a:	6b 01       	movw	r12, r22
    237c:	7c 01       	movw	r14, r24
    237e:	a5 01       	movw	r20, r10
    2380:	94 01       	movw	r18, r8
    2382:	6d 81       	ldd	r22, Y+5	; 0x05
    2384:	7e 81       	ldd	r23, Y+6	; 0x06
    2386:	8f 81       	ldd	r24, Y+7	; 0x07
    2388:	98 85       	ldd	r25, Y+8	; 0x08
    238a:	cb d4       	rcall	.+2454   	; 0x2d22 <__mulsf3>
    238c:	9b 01       	movw	r18, r22
    238e:	ac 01       	movw	r20, r24
    2390:	c7 01       	movw	r24, r14
    2392:	b6 01       	movw	r22, r12
    2394:	60 d2       	rcall	.+1216   	; 0x2856 <__addsf3>
    2396:	6b 01       	movw	r12, r22
    2398:	7c 01       	movw	r14, r24
    239a:	2d a1       	ldd	r18, Y+37	; 0x25
    239c:	3e a1       	ldd	r19, Y+38	; 0x26
    239e:	4f a1       	ldd	r20, Y+39	; 0x27
    23a0:	58 a5       	ldd	r21, Y+40	; 0x28
    23a2:	69 81       	ldd	r22, Y+1	; 0x01
    23a4:	7a 81       	ldd	r23, Y+2	; 0x02
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	bb d4       	rcall	.+2422   	; 0x2d22 <__mulsf3>
    23ac:	9b 01       	movw	r18, r22
    23ae:	ac 01       	movw	r20, r24
    23b0:	c7 01       	movw	r24, r14
    23b2:	b6 01       	movw	r22, r12
    23b4:	50 d2       	rcall	.+1184   	; 0x2856 <__addsf3>
    23b6:	6b 01       	movw	r12, r22
    23b8:	7c 01       	movw	r14, r24
    23ba:	29 85       	ldd	r18, Y+9	; 0x09
    23bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    23be:	4b 85       	ldd	r20, Y+11	; 0x0b
    23c0:	5c 85       	ldd	r21, Y+12	; 0x0c
    23c2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23c4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    23c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23c8:	98 a1       	ldd	r25, Y+32	; 0x20
    23ca:	ab d4       	rcall	.+2390   	; 0x2d22 <__mulsf3>
    23cc:	9b 01       	movw	r18, r22
    23ce:	ac 01       	movw	r20, r24
    23d0:	c7 01       	movw	r24, r14
    23d2:	b6 01       	movw	r22, r12
    23d4:	3f d2       	rcall	.+1150   	; 0x2854 <__subsf3>
    23d6:	6b 01       	movw	r12, r22
    23d8:	7c 01       	movw	r14, r24
    23da:	29 85       	ldd	r18, Y+9	; 0x09
    23dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    23de:	4b 85       	ldd	r20, Y+11	; 0x0b
    23e0:	5c 85       	ldd	r21, Y+12	; 0x0c
    23e2:	69 89       	ldd	r22, Y+17	; 0x11
    23e4:	7a 89       	ldd	r23, Y+18	; 0x12
    23e6:	8b 89       	ldd	r24, Y+19	; 0x13
    23e8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ea:	9b d4       	rcall	.+2358   	; 0x2d22 <__mulsf3>
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
    23f0:	c7 01       	movw	r24, r14
    23f2:	b6 01       	movw	r22, r12
    23f4:	30 d2       	rcall	.+1120   	; 0x2856 <__addsf3>
    23f6:	6b 01       	movw	r12, r22
    23f8:	7c 01       	movw	r14, r24
    23fa:	a3 01       	movw	r20, r6
    23fc:	92 01       	movw	r18, r4
    23fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2400:	7e 81       	ldd	r23, Y+6	; 0x06
    2402:	8f 81       	ldd	r24, Y+7	; 0x07
    2404:	98 85       	ldd	r25, Y+8	; 0x08
    2406:	8d d4       	rcall	.+2330   	; 0x2d22 <__mulsf3>
    2408:	9b 01       	movw	r18, r22
    240a:	ac 01       	movw	r20, r24
    240c:	c7 01       	movw	r24, r14
    240e:	b6 01       	movw	r22, r12
    2410:	21 d2       	rcall	.+1090   	; 0x2854 <__subsf3>
    2412:	6b 01       	movw	r12, r22
    2414:	7c 01       	movw	r14, r24
    2416:	29 85       	ldd	r18, Y+9	; 0x09
    2418:	3a 85       	ldd	r19, Y+10	; 0x0a
    241a:	4b 85       	ldd	r20, Y+11	; 0x0b
    241c:	5c 85       	ldd	r21, Y+12	; 0x0c
    241e:	6d 89       	ldd	r22, Y+21	; 0x15
    2420:	7e 89       	ldd	r23, Y+22	; 0x16
    2422:	8f 89       	ldd	r24, Y+23	; 0x17
    2424:	98 8d       	ldd	r25, Y+24	; 0x18
    2426:	7d d4       	rcall	.+2298   	; 0x2d22 <__mulsf3>
    2428:	9b 01       	movw	r18, r22
    242a:	ac 01       	movw	r20, r24
    242c:	c7 01       	movw	r24, r14
    242e:	b6 01       	movw	r22, r12
    2430:	11 d2       	rcall	.+1058   	; 0x2854 <__subsf3>
    2432:	d1 01       	movw	r26, r2
    2434:	14 96       	adiw	r26, 0x04	; 4
    2436:	6d 93       	st	X+, r22
    2438:	7d 93       	st	X+, r23
    243a:	8d 93       	st	X+, r24
    243c:	9c 93       	st	X, r25
    243e:	17 97       	sbiw	r26, 0x07	; 7
    2440:	2d a5       	ldd	r18, Y+45	; 0x2d
    2442:	3e a5       	ldd	r19, Y+46	; 0x2e
    2444:	4f a5       	ldd	r20, Y+47	; 0x2f
    2446:	58 a9       	ldd	r21, Y+48	; 0x30
    2448:	69 81       	ldd	r22, Y+1	; 0x01
    244a:	7a 81       	ldd	r23, Y+2	; 0x02
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	68 d4       	rcall	.+2256   	; 0x2d22 <__mulsf3>
    2452:	6b 01       	movw	r12, r22
    2454:	7c 01       	movw	r14, r24
    2456:	a5 01       	movw	r20, r10
    2458:	94 01       	movw	r18, r8
    245a:	69 85       	ldd	r22, Y+9	; 0x09
    245c:	7a 85       	ldd	r23, Y+10	; 0x0a
    245e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2460:	9c 85       	ldd	r25, Y+12	; 0x0c
    2462:	5f d4       	rcall	.+2238   	; 0x2d22 <__mulsf3>
    2464:	9b 01       	movw	r18, r22
    2466:	ac 01       	movw	r20, r24
    2468:	c7 01       	movw	r24, r14
    246a:	b6 01       	movw	r22, r12
    246c:	f4 d1       	rcall	.+1000   	; 0x2856 <__addsf3>
    246e:	6b 01       	movw	r12, r22
    2470:	7c 01       	movw	r14, r24
    2472:	2d 81       	ldd	r18, Y+5	; 0x05
    2474:	3e 81       	ldd	r19, Y+6	; 0x06
    2476:	4f 81       	ldd	r20, Y+7	; 0x07
    2478:	58 85       	ldd	r21, Y+8	; 0x08
    247a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    247c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    247e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2480:	98 a1       	ldd	r25, Y+32	; 0x20
    2482:	4f d4       	rcall	.+2206   	; 0x2d22 <__mulsf3>
    2484:	9b 01       	movw	r18, r22
    2486:	ac 01       	movw	r20, r24
    2488:	c7 01       	movw	r24, r14
    248a:	b6 01       	movw	r22, r12
    248c:	e4 d1       	rcall	.+968    	; 0x2856 <__addsf3>
    248e:	6b 01       	movw	r12, r22
    2490:	7c 01       	movw	r14, r24
    2492:	29 a1       	ldd	r18, Y+33	; 0x21
    2494:	3a a1       	ldd	r19, Y+34	; 0x22
    2496:	4b a1       	ldd	r20, Y+35	; 0x23
    2498:	5c a1       	ldd	r21, Y+36	; 0x24
    249a:	69 81       	ldd	r22, Y+1	; 0x01
    249c:	7a 81       	ldd	r23, Y+2	; 0x02
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	3f d4       	rcall	.+2174   	; 0x2d22 <__mulsf3>
    24a4:	9b 01       	movw	r18, r22
    24a6:	ac 01       	movw	r20, r24
    24a8:	c7 01       	movw	r24, r14
    24aa:	b6 01       	movw	r22, r12
    24ac:	d3 d1       	rcall	.+934    	; 0x2854 <__subsf3>
    24ae:	6b 01       	movw	r12, r22
    24b0:	7c 01       	movw	r14, r24
    24b2:	2d 81       	ldd	r18, Y+5	; 0x05
    24b4:	3e 81       	ldd	r19, Y+6	; 0x06
    24b6:	4f 81       	ldd	r20, Y+7	; 0x07
    24b8:	58 85       	ldd	r21, Y+8	; 0x08
    24ba:	69 8d       	ldd	r22, Y+25	; 0x19
    24bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c2:	2f d4       	rcall	.+2142   	; 0x2d22 <__mulsf3>
    24c4:	9b 01       	movw	r18, r22
    24c6:	ac 01       	movw	r20, r24
    24c8:	c7 01       	movw	r24, r14
    24ca:	b6 01       	movw	r22, r12
    24cc:	c3 d1       	rcall	.+902    	; 0x2854 <__subsf3>
    24ce:	6b 01       	movw	r12, r22
    24d0:	7c 01       	movw	r14, r24
    24d2:	a3 01       	movw	r20, r6
    24d4:	92 01       	movw	r18, r4
    24d6:	69 85       	ldd	r22, Y+9	; 0x09
    24d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    24da:	8b 85       	ldd	r24, Y+11	; 0x0b
    24dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    24de:	21 d4       	rcall	.+2114   	; 0x2d22 <__mulsf3>
    24e0:	9b 01       	movw	r18, r22
    24e2:	ac 01       	movw	r20, r24
    24e4:	c7 01       	movw	r24, r14
    24e6:	b6 01       	movw	r22, r12
    24e8:	b6 d1       	rcall	.+876    	; 0x2856 <__addsf3>
    24ea:	6b 01       	movw	r12, r22
    24ec:	7c 01       	movw	r14, r24
    24ee:	2d 81       	ldd	r18, Y+5	; 0x05
    24f0:	3e 81       	ldd	r19, Y+6	; 0x06
    24f2:	4f 81       	ldd	r20, Y+7	; 0x07
    24f4:	58 85       	ldd	r21, Y+8	; 0x08
    24f6:	6d 89       	ldd	r22, Y+21	; 0x15
    24f8:	7e 89       	ldd	r23, Y+22	; 0x16
    24fa:	8f 89       	ldd	r24, Y+23	; 0x17
    24fc:	98 8d       	ldd	r25, Y+24	; 0x18
    24fe:	11 d4       	rcall	.+2082   	; 0x2d22 <__mulsf3>
    2500:	9b 01       	movw	r18, r22
    2502:	ac 01       	movw	r20, r24
    2504:	c7 01       	movw	r24, r14
    2506:	b6 01       	movw	r22, r12
    2508:	a5 d1       	rcall	.+842    	; 0x2854 <__subsf3>
    250a:	6b 01       	movw	r12, r22
    250c:	7c 01       	movw	r14, r24
    250e:	2d 81       	ldd	r18, Y+5	; 0x05
    2510:	3e 81       	ldd	r19, Y+6	; 0x06
    2512:	4f 81       	ldd	r20, Y+7	; 0x07
    2514:	58 85       	ldd	r21, Y+8	; 0x08
    2516:	69 89       	ldd	r22, Y+17	; 0x11
    2518:	7a 89       	ldd	r23, Y+18	; 0x12
    251a:	8b 89       	ldd	r24, Y+19	; 0x13
    251c:	9c 89       	ldd	r25, Y+20	; 0x14
    251e:	01 d4       	rcall	.+2050   	; 0x2d22 <__mulsf3>
    2520:	9b 01       	movw	r18, r22
    2522:	ac 01       	movw	r20, r24
    2524:	c7 01       	movw	r24, r14
    2526:	b6 01       	movw	r22, r12
    2528:	96 d1       	rcall	.+812    	; 0x2856 <__addsf3>
    252a:	f1 01       	movw	r30, r2
    252c:	60 87       	std	Z+8, r22	; 0x08
    252e:	71 87       	std	Z+9, r23	; 0x09
    2530:	82 87       	std	Z+10, r24	; 0x0a
    2532:	93 87       	std	Z+11, r25	; 0x0b
    2534:	e0 96       	adiw	r28, 0x30	; 48
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	ff 90       	pop	r15
    254a:	ef 90       	pop	r14
    254c:	df 90       	pop	r13
    254e:	cf 90       	pop	r12
    2550:	bf 90       	pop	r11
    2552:	af 90       	pop	r10
    2554:	9f 90       	pop	r9
    2556:	8f 90       	pop	r8
    2558:	7f 90       	pop	r7
    255a:	6f 90       	pop	r6
    255c:	5f 90       	pop	r5
    255e:	4f 90       	pop	r4
    2560:	3f 90       	pop	r3
    2562:	2f 90       	pop	r2
    2564:	08 95       	ret

00002566 <Quaternion_addition>:

void Quaternion_addition(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
    2566:	2f 92       	push	r2
    2568:	3f 92       	push	r3
    256a:	4f 92       	push	r4
    256c:	5f 92       	push	r5
    256e:	6f 92       	push	r6
    2570:	7f 92       	push	r7
    2572:	8f 92       	push	r8
    2574:	9f 92       	push	r9
    2576:	af 92       	push	r10
    2578:	bf 92       	push	r11
    257a:	cf 92       	push	r12
    257c:	df 92       	push	r13
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	1c 01       	movw	r2, r24
    258c:	8b 01       	movw	r16, r22
    258e:	ea 01       	movw	r28, r20
    assert(output != NULL);
    2590:	20 97       	sbiw	r28, 0x00	; 0
    2592:	09 f4       	brne	.+2      	; 0x2596 <Quaternion_addition+0x30>
    2594:	b0 d4       	rcall	.+2400   	; 0x2ef6 <abort>
    Quaternion result;

    result.w =    q1->w + q2->w;
    result.v[0] = q1->v[0] + q2->v[0];
    2596:	fb 01       	movw	r30, r22
    2598:	24 81       	ldd	r18, Z+4	; 0x04
    259a:	35 81       	ldd	r19, Z+5	; 0x05
    259c:	46 81       	ldd	r20, Z+6	; 0x06
    259e:	57 81       	ldd	r21, Z+7	; 0x07
    25a0:	fc 01       	movw	r30, r24
    25a2:	64 81       	ldd	r22, Z+4	; 0x04
    25a4:	75 81       	ldd	r23, Z+5	; 0x05
    25a6:	86 81       	ldd	r24, Z+6	; 0x06
    25a8:	97 81       	ldd	r25, Z+7	; 0x07
    25aa:	55 d1       	rcall	.+682    	; 0x2856 <__addsf3>
    25ac:	2b 01       	movw	r4, r22
    25ae:	3c 01       	movw	r6, r24
    result.v[1] = q1->v[1] + q2->v[1];
    25b0:	f8 01       	movw	r30, r16
    25b2:	20 85       	ldd	r18, Z+8	; 0x08
    25b4:	31 85       	ldd	r19, Z+9	; 0x09
    25b6:	42 85       	ldd	r20, Z+10	; 0x0a
    25b8:	53 85       	ldd	r21, Z+11	; 0x0b
    25ba:	f1 01       	movw	r30, r2
    25bc:	60 85       	ldd	r22, Z+8	; 0x08
    25be:	71 85       	ldd	r23, Z+9	; 0x09
    25c0:	82 85       	ldd	r24, Z+10	; 0x0a
    25c2:	93 85       	ldd	r25, Z+11	; 0x0b
    25c4:	48 d1       	rcall	.+656    	; 0x2856 <__addsf3>
    25c6:	4b 01       	movw	r8, r22
    25c8:	5c 01       	movw	r10, r24
    result.v[2] = q1->v[2] + q2->v[2];
    25ca:	f8 01       	movw	r30, r16
    25cc:	24 85       	ldd	r18, Z+12	; 0x0c
    25ce:	35 85       	ldd	r19, Z+13	; 0x0d
    25d0:	46 85       	ldd	r20, Z+14	; 0x0e
    25d2:	57 85       	ldd	r21, Z+15	; 0x0f
    25d4:	f1 01       	movw	r30, r2
    25d6:	64 85       	ldd	r22, Z+12	; 0x0c
    25d8:	75 85       	ldd	r23, Z+13	; 0x0d
    25da:	86 85       	ldd	r24, Z+14	; 0x0e
    25dc:	97 85       	ldd	r25, Z+15	; 0x0f
    25de:	3b d1       	rcall	.+630    	; 0x2856 <__addsf3>
    25e0:	6b 01       	movw	r12, r22
    25e2:	7c 01       	movw	r14, r24

    *output = result;
    25e4:	f8 01       	movw	r30, r16
    25e6:	20 81       	ld	r18, Z
    25e8:	31 81       	ldd	r19, Z+1	; 0x01
    25ea:	42 81       	ldd	r20, Z+2	; 0x02
    25ec:	53 81       	ldd	r21, Z+3	; 0x03
    25ee:	f1 01       	movw	r30, r2
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	2e d1       	rcall	.+604    	; 0x2856 <__addsf3>
    25fa:	68 83       	st	Y, r22
    25fc:	79 83       	std	Y+1, r23	; 0x01
    25fe:	8a 83       	std	Y+2, r24	; 0x02
    2600:	9b 83       	std	Y+3, r25	; 0x03
    2602:	4c 82       	std	Y+4, r4	; 0x04
    2604:	5d 82       	std	Y+5, r5	; 0x05
    2606:	6e 82       	std	Y+6, r6	; 0x06
    2608:	7f 82       	std	Y+7, r7	; 0x07
    260a:	88 86       	std	Y+8, r8	; 0x08
    260c:	99 86       	std	Y+9, r9	; 0x09
    260e:	aa 86       	std	Y+10, r10	; 0x0a
    2610:	bb 86       	std	Y+11, r11	; 0x0b
    2612:	cc 86       	std	Y+12, r12	; 0x0c
    2614:	dd 86       	std	Y+13, r13	; 0x0d
    2616:	ee 86       	std	Y+14, r14	; 0x0e
    2618:	ff 86       	std	Y+15, r15	; 0x0f
}
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	ef 90       	pop	r14
    2626:	df 90       	pop	r13
    2628:	cf 90       	pop	r12
    262a:	bf 90       	pop	r11
    262c:	af 90       	pop	r10
    262e:	9f 90       	pop	r9
    2630:	8f 90       	pop	r8
    2632:	7f 90       	pop	r7
    2634:	6f 90       	pop	r6
    2636:	5f 90       	pop	r5
    2638:	4f 90       	pop	r4
    263a:	3f 90       	pop	r3
    263c:	2f 90       	pop	r2
    263e:	08 95       	ret

00002640 <Quaternion_ratio>:

void Quaternion_ratio(Quaternion* q, double ratio, Quaternion* output)
{
    2640:	4f 92       	push	r4
    2642:	5f 92       	push	r5
    2644:	6f 92       	push	r6
    2646:	7f 92       	push	r7
    2648:	8f 92       	push	r8
    264a:	9f 92       	push	r9
    264c:	af 92       	push	r10
    264e:	bf 92       	push	r11
    2650:	cf 92       	push	r12
    2652:	df 92       	push	r13
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	00 d0       	rcall	.+0      	; 0x2662 <Quaternion_ratio+0x22>
    2662:	00 d0       	rcall	.+0      	; 0x2664 <Quaternion_ratio+0x24>
    2664:	00 d0       	rcall	.+0      	; 0x2666 <Quaternion_ratio+0x26>
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	49 83       	std	Y+1, r20	; 0x01
    2670:	5a 83       	std	Y+2, r21	; 0x02
    2672:	6b 83       	std	Y+3, r22	; 0x03
    2674:	7c 83       	std	Y+4, r23	; 0x04
    2676:	89 01       	movw	r16, r18
	Quaternion result;

	result.w =    q->w * ratio;
	result.v[0] = q->v[0] * ratio;
    2678:	fc 01       	movw	r30, r24
    267a:	24 81       	ldd	r18, Z+4	; 0x04
    267c:	35 81       	ldd	r19, Z+5	; 0x05
    267e:	46 81       	ldd	r20, Z+6	; 0x06
    2680:	57 81       	ldd	r21, Z+7	; 0x07
    2682:	69 81       	ldd	r22, Y+1	; 0x01
    2684:	7a 81       	ldd	r23, Y+2	; 0x02
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	4b d3       	rcall	.+1686   	; 0x2d22 <__mulsf3>
    268c:	2b 01       	movw	r4, r22
    268e:	3c 01       	movw	r6, r24
	result.v[1] = q->v[1] * ratio;
    2690:	ed 81       	ldd	r30, Y+5	; 0x05
    2692:	fe 81       	ldd	r31, Y+6	; 0x06
    2694:	20 85       	ldd	r18, Z+8	; 0x08
    2696:	31 85       	ldd	r19, Z+9	; 0x09
    2698:	42 85       	ldd	r20, Z+10	; 0x0a
    269a:	53 85       	ldd	r21, Z+11	; 0x0b
    269c:	69 81       	ldd	r22, Y+1	; 0x01
    269e:	7a 81       	ldd	r23, Y+2	; 0x02
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	3e d3       	rcall	.+1660   	; 0x2d22 <__mulsf3>
    26a6:	4b 01       	movw	r8, r22
    26a8:	5c 01       	movw	r10, r24
	result.v[2] = q->v[2] * ratio;
    26aa:	ed 81       	ldd	r30, Y+5	; 0x05
    26ac:	fe 81       	ldd	r31, Y+6	; 0x06
    26ae:	24 85       	ldd	r18, Z+12	; 0x0c
    26b0:	35 85       	ldd	r19, Z+13	; 0x0d
    26b2:	46 85       	ldd	r20, Z+14	; 0x0e
    26b4:	57 85       	ldd	r21, Z+15	; 0x0f
    26b6:	69 81       	ldd	r22, Y+1	; 0x01
    26b8:	7a 81       	ldd	r23, Y+2	; 0x02
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	31 d3       	rcall	.+1634   	; 0x2d22 <__mulsf3>
    26c0:	6b 01       	movw	r12, r22
    26c2:	7c 01       	movw	r14, r24

	*output = result;
    26c4:	29 81       	ldd	r18, Y+1	; 0x01
    26c6:	3a 81       	ldd	r19, Y+2	; 0x02
    26c8:	4b 81       	ldd	r20, Y+3	; 0x03
    26ca:	5c 81       	ldd	r21, Y+4	; 0x04
    26cc:	ed 81       	ldd	r30, Y+5	; 0x05
    26ce:	fe 81       	ldd	r31, Y+6	; 0x06
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	24 d3       	rcall	.+1608   	; 0x2d22 <__mulsf3>
    26da:	f8 01       	movw	r30, r16
    26dc:	60 83       	st	Z, r22
    26de:	71 83       	std	Z+1, r23	; 0x01
    26e0:	82 83       	std	Z+2, r24	; 0x02
    26e2:	93 83       	std	Z+3, r25	; 0x03
    26e4:	44 82       	std	Z+4, r4	; 0x04
    26e6:	55 82       	std	Z+5, r5	; 0x05
    26e8:	66 82       	std	Z+6, r6	; 0x06
    26ea:	77 82       	std	Z+7, r7	; 0x07
    26ec:	80 86       	std	Z+8, r8	; 0x08
    26ee:	91 86       	std	Z+9, r9	; 0x09
    26f0:	a2 86       	std	Z+10, r10	; 0x0a
    26f2:	b3 86       	std	Z+11, r11	; 0x0b
    26f4:	c4 86       	std	Z+12, r12	; 0x0c
    26f6:	d5 86       	std	Z+13, r13	; 0x0d
    26f8:	e6 86       	std	Z+14, r14	; 0x0e
    26fa:	f7 86       	std	Z+15, r15	; 0x0f
    26fc:	26 96       	adiw	r28, 0x06	; 6
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	df 90       	pop	r13
    2716:	cf 90       	pop	r12
    2718:	bf 90       	pop	r11
    271a:	af 90       	pop	r10
    271c:	9f 90       	pop	r9
    271e:	8f 90       	pop	r8
    2720:	7f 90       	pop	r7
    2722:	6f 90       	pop	r6
    2724:	5f 90       	pop	r5
    2726:	4f 90       	pop	r4
    2728:	08 95       	ret

0000272a <UART1_init>:

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1<<RXC1)) );         //데이터 수신 대기
	return UDR1;
}
    272a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    272e:	80 e1       	ldi	r24, 0x10	; 16
    2730:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2734:	eb e9       	ldi	r30, 0x9B	; 155
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	82 60       	ori	r24, 0x02	; 2
    273c:	80 83       	st	Z, r24
    273e:	ed e9       	ldi	r30, 0x9D	; 157
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	86 60       	ori	r24, 0x06	; 6
    2746:	80 83       	st	Z, r24
    2748:	ea e9       	ldi	r30, 0x9A	; 154
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	80 61       	ori	r24, 0x10	; 16
    2750:	80 83       	st	Z, r24
    2752:	80 81       	ld	r24, Z
    2754:	88 60       	ori	r24, 0x08	; 8
    2756:	80 83       	st	Z, r24
    2758:	08 95       	ret

0000275a <UART1_transmit>:
    275a:	eb e9       	ldi	r30, 0x9B	; 155
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	90 81       	ld	r25, Z
    2760:	95 ff       	sbrs	r25, 5
    2762:	fd cf       	rjmp	.-6      	; 0x275e <UART1_transmit+0x4>
    2764:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    2768:	08 95       	ret

0000276a <UART1_print16b>:

void UART1_print16b(int16_t no)
{
    276a:	ef 92       	push	r14
    276c:	ff 92       	push	r15
    276e:	0f 93       	push	r16
    2770:	1f 93       	push	r17
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	00 d0       	rcall	.+0      	; 0x2778 <UART1_print16b+0xe>
    2778:	00 d0       	rcall	.+0      	; 0x277a <UART1_print16b+0x10>
    277a:	00 d0       	rcall	.+0      	; 0x277c <UART1_print16b+0x12>
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
	char numStr[6]="0";
    2780:	20 e3       	ldi	r18, 0x30	; 48
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	3a 83       	std	Y+2, r19	; 0x02
    2786:	29 83       	std	Y+1, r18	; 0x01
    2788:	fe 01       	movw	r30, r28
    278a:	33 96       	adiw	r30, 0x03	; 3
    278c:	24 e0       	ldi	r18, 0x04	; 4
    278e:	df 01       	movw	r26, r30
    2790:	1d 92       	st	X+, r1
    2792:	2a 95       	dec	r18
    2794:	e9 f7       	brne	.-6      	; 0x2790 <UART1_print16b+0x26>
	int mino=0;
	int index=0;
	
	int i=0;
	if(no>0)
    2796:	18 16       	cp	r1, r24
    2798:	19 06       	cpc	r1, r25
    279a:	0c f0       	brlt	.+2      	; 0x279e <UART1_print16b+0x34>
    279c:	49 c0       	rjmp	.+146    	; 0x2830 <UART1_print16b+0xc6>
    279e:	32 97       	sbiw	r30, 0x02	; 2
    27a0:	00 e0       	ldi	r16, 0x00	; 0
    27a2:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0;no!=0;i++)
		{
			numStr[i]=no%10+48;
    27a4:	0f 2e       	mov	r0, r31
    27a6:	fa e0       	ldi	r31, 0x0A	; 10
    27a8:	ef 2e       	mov	r14, r31
    27aa:	f1 2c       	mov	r15, r1
    27ac:	f0 2d       	mov	r31, r0
    27ae:	01 c0       	rjmp	.+2      	; 0x27b2 <UART1_print16b+0x48>
	int index=0;
	
	int i=0;
	if(no>0)
	{
		for(i=0;no!=0;i++)
    27b0:	89 01       	movw	r16, r18
		{
			numStr[i]=no%10+48;
    27b2:	b7 01       	movw	r22, r14
    27b4:	79 d3       	rcall	.+1778   	; 0x2ea8 <__divmodhi4>
    27b6:	80 5d       	subi	r24, 0xD0	; 208
    27b8:	81 93       	st	Z+, r24
			no=no/10;
    27ba:	86 2f       	mov	r24, r22
    27bc:	97 2f       	mov	r25, r23
	int index=0;
	
	int i=0;
	if(no>0)
	{
		for(i=0;no!=0;i++)
    27be:	98 01       	movw	r18, r16
    27c0:	2f 5f       	subi	r18, 0xFF	; 255
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	a1 f7       	brne	.-24     	; 0x27b0 <UART1_print16b+0x46>
		{
			numStr[i]=no%10+48;
			no=no/10;
			
		}
		numStr[i]='\0';
    27c8:	fe 01       	movw	r30, r28
    27ca:	e2 0f       	add	r30, r18
    27cc:	f3 1f       	adc	r31, r19
    27ce:	11 82       	std	Z+1, r1	; 0x01
    27d0:	1f c0       	rjmp	.+62     	; 0x2810 <UART1_print16b+0xa6>
		index=i-1;
	}if(no<0)
	{
		mino=0-no;
    27d2:	91 95       	neg	r25
    27d4:	81 95       	neg	r24
    27d6:	91 09       	sbc	r25, r1
		for(i=0;mino!=0;i++)
    27d8:	89 f0       	breq	.+34     	; 0x27fc <UART1_print16b+0x92>
    27da:	fe 01       	movw	r30, r28
    27dc:	31 96       	adiw	r30, 0x01	; 1
    27de:	00 e0       	ldi	r16, 0x00	; 0
    27e0:	10 e0       	ldi	r17, 0x00	; 0
		{
			numStr[i]=mino%10+48;
    27e2:	2a e0       	ldi	r18, 0x0A	; 10
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	b9 01       	movw	r22, r18
    27e8:	5f d3       	rcall	.+1726   	; 0x2ea8 <__divmodhi4>
    27ea:	80 5d       	subi	r24, 0xD0	; 208
    27ec:	81 93       	st	Z+, r24
			mino=mino/10;
    27ee:	86 2f       	mov	r24, r22
    27f0:	97 2f       	mov	r25, r23
		numStr[i]='\0';
		index=i-1;
	}if(no<0)
	{
		mino=0-no;
		for(i=0;mino!=0;i++)
    27f2:	0f 5f       	subi	r16, 0xFF	; 255
    27f4:	1f 4f       	sbci	r17, 0xFF	; 255
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	b1 f7       	brne	.-20     	; 0x27e6 <UART1_print16b+0x7c>
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <UART1_print16b+0x96>
    27fc:	00 e0       	ldi	r16, 0x00	; 0
    27fe:	10 e0       	ldi	r17, 0x00	; 0
		{
			numStr[i]=mino%10+48;
			mino=mino/10;
		}
		numStr[i]='\0';
    2800:	fe 01       	movw	r30, r28
    2802:	e0 0f       	add	r30, r16
    2804:	f1 1f       	adc	r31, r17
    2806:	11 82       	std	Z+1, r1	; 0x01
		index=i-1;
    2808:	01 50       	subi	r16, 0x01	; 1
		UART1_transmit('-');
    280a:	11 09       	sbc	r17, r1
    280c:	8d e2       	ldi	r24, 0x2D	; 45
    280e:	a5 df       	rcall	.-182    	; 0x275a <UART1_transmit>
	}
	for(int j=index;j>=0;j--)
    2810:	11 23       	and	r17, r17
    2812:	9c f0       	brlt	.+38     	; 0x283a <UART1_print16b+0xd0>
    2814:	ce 01       	movw	r24, r28
    2816:	80 0f       	add	r24, r16
    2818:	91 1f       	adc	r25, r17
    281a:	fc 01       	movw	r30, r24
    281c:	32 96       	adiw	r30, 0x02	; 2
    281e:	7f 01       	movw	r14, r30
	{
		UART1_transmit(numStr[j]);
    2820:	d7 01       	movw	r26, r14
    2822:	8e 91       	ld	r24, -X
    2824:	7d 01       	movw	r14, r26
    2826:	99 df       	rcall	.-206    	; 0x275a <UART1_transmit>
		}
		numStr[i]='\0';
		index=i-1;
		UART1_transmit('-');
	}
	for(int j=index;j>=0;j--)
    2828:	01 50       	subi	r16, 0x01	; 1
    282a:	11 09       	sbc	r17, r1
    282c:	ca f7       	brpl	.-14     	; 0x2820 <UART1_print16b+0xb6>
    282e:	05 c0       	rjmp	.+10     	; 0x283a <UART1_print16b+0xd0>
			no=no/10;
			
		}
		numStr[i]='\0';
		index=i-1;
	}if(no<0)
    2830:	99 23       	and	r25, r25
    2832:	7c f2       	brlt	.-98     	; 0x27d2 <UART1_print16b+0x68>

void UART1_print16b(int16_t no)
{
	char numStr[6]="0";
	int mino=0;
	int index=0;
    2834:	00 e0       	ldi	r16, 0x00	; 0
    2836:	10 e0       	ldi	r17, 0x00	; 0
    2838:	ed cf       	rjmp	.-38     	; 0x2814 <UART1_print16b+0xaa>
	for(int j=index;j>=0;j--)
	{
		UART1_transmit(numStr[j]);
	}
	return;
}
    283a:	26 96       	adiw	r28, 0x06	; 6
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	08 95       	ret

00002854 <__subsf3>:
    2854:	50 58       	subi	r21, 0x80	; 128

00002856 <__addsf3>:
    2856:	bb 27       	eor	r27, r27
    2858:	aa 27       	eor	r26, r26
    285a:	0e d0       	rcall	.+28     	; 0x2878 <__addsf3x>
    285c:	10 c2       	rjmp	.+1056   	; 0x2c7e <__fp_round>
    285e:	d9 d1       	rcall	.+946    	; 0x2c12 <__fp_pscA>
    2860:	30 f0       	brcs	.+12     	; 0x286e <__addsf3+0x18>
    2862:	de d1       	rcall	.+956    	; 0x2c20 <__fp_pscB>
    2864:	20 f0       	brcs	.+8      	; 0x286e <__addsf3+0x18>
    2866:	31 f4       	brne	.+12     	; 0x2874 <__addsf3+0x1e>
    2868:	9f 3f       	cpi	r25, 0xFF	; 255
    286a:	11 f4       	brne	.+4      	; 0x2870 <__addsf3+0x1a>
    286c:	1e f4       	brtc	.+6      	; 0x2874 <__addsf3+0x1e>
    286e:	98 c1       	rjmp	.+816    	; 0x2ba0 <__fp_nan>
    2870:	0e f4       	brtc	.+2      	; 0x2874 <__addsf3+0x1e>
    2872:	e0 95       	com	r30
    2874:	e7 fb       	bst	r30, 7
    2876:	8e c1       	rjmp	.+796    	; 0x2b94 <__fp_inf>

00002878 <__addsf3x>:
    2878:	e9 2f       	mov	r30, r25
    287a:	23 d2       	rcall	.+1094   	; 0x2cc2 <__fp_split3>
    287c:	80 f3       	brcs	.-32     	; 0x285e <__addsf3+0x8>
    287e:	ba 17       	cp	r27, r26
    2880:	62 07       	cpc	r22, r18
    2882:	73 07       	cpc	r23, r19
    2884:	84 07       	cpc	r24, r20
    2886:	95 07       	cpc	r25, r21
    2888:	18 f0       	brcs	.+6      	; 0x2890 <__addsf3x+0x18>
    288a:	71 f4       	brne	.+28     	; 0x28a8 <__addsf3x+0x30>
    288c:	9e f5       	brtc	.+102    	; 0x28f4 <__addsf3x+0x7c>
    288e:	3b c2       	rjmp	.+1142   	; 0x2d06 <__fp_zero>
    2890:	0e f4       	brtc	.+2      	; 0x2894 <__addsf3x+0x1c>
    2892:	e0 95       	com	r30
    2894:	0b 2e       	mov	r0, r27
    2896:	ba 2f       	mov	r27, r26
    2898:	a0 2d       	mov	r26, r0
    289a:	0b 01       	movw	r0, r22
    289c:	b9 01       	movw	r22, r18
    289e:	90 01       	movw	r18, r0
    28a0:	0c 01       	movw	r0, r24
    28a2:	ca 01       	movw	r24, r20
    28a4:	a0 01       	movw	r20, r0
    28a6:	11 24       	eor	r1, r1
    28a8:	ff 27       	eor	r31, r31
    28aa:	59 1b       	sub	r21, r25
    28ac:	99 f0       	breq	.+38     	; 0x28d4 <__addsf3x+0x5c>
    28ae:	59 3f       	cpi	r21, 0xF9	; 249
    28b0:	50 f4       	brcc	.+20     	; 0x28c6 <__addsf3x+0x4e>
    28b2:	50 3e       	cpi	r21, 0xE0	; 224
    28b4:	68 f1       	brcs	.+90     	; 0x2910 <__addsf3x+0x98>
    28b6:	1a 16       	cp	r1, r26
    28b8:	f0 40       	sbci	r31, 0x00	; 0
    28ba:	a2 2f       	mov	r26, r18
    28bc:	23 2f       	mov	r18, r19
    28be:	34 2f       	mov	r19, r20
    28c0:	44 27       	eor	r20, r20
    28c2:	58 5f       	subi	r21, 0xF8	; 248
    28c4:	f3 cf       	rjmp	.-26     	; 0x28ac <__addsf3x+0x34>
    28c6:	46 95       	lsr	r20
    28c8:	37 95       	ror	r19
    28ca:	27 95       	ror	r18
    28cc:	a7 95       	ror	r26
    28ce:	f0 40       	sbci	r31, 0x00	; 0
    28d0:	53 95       	inc	r21
    28d2:	c9 f7       	brne	.-14     	; 0x28c6 <__addsf3x+0x4e>
    28d4:	7e f4       	brtc	.+30     	; 0x28f4 <__addsf3x+0x7c>
    28d6:	1f 16       	cp	r1, r31
    28d8:	ba 0b       	sbc	r27, r26
    28da:	62 0b       	sbc	r22, r18
    28dc:	73 0b       	sbc	r23, r19
    28de:	84 0b       	sbc	r24, r20
    28e0:	ba f0       	brmi	.+46     	; 0x2910 <__addsf3x+0x98>
    28e2:	91 50       	subi	r25, 0x01	; 1
    28e4:	a1 f0       	breq	.+40     	; 0x290e <__addsf3x+0x96>
    28e6:	ff 0f       	add	r31, r31
    28e8:	bb 1f       	adc	r27, r27
    28ea:	66 1f       	adc	r22, r22
    28ec:	77 1f       	adc	r23, r23
    28ee:	88 1f       	adc	r24, r24
    28f0:	c2 f7       	brpl	.-16     	; 0x28e2 <__addsf3x+0x6a>
    28f2:	0e c0       	rjmp	.+28     	; 0x2910 <__addsf3x+0x98>
    28f4:	ba 0f       	add	r27, r26
    28f6:	62 1f       	adc	r22, r18
    28f8:	73 1f       	adc	r23, r19
    28fa:	84 1f       	adc	r24, r20
    28fc:	48 f4       	brcc	.+18     	; 0x2910 <__addsf3x+0x98>
    28fe:	87 95       	ror	r24
    2900:	77 95       	ror	r23
    2902:	67 95       	ror	r22
    2904:	b7 95       	ror	r27
    2906:	f7 95       	ror	r31
    2908:	9e 3f       	cpi	r25, 0xFE	; 254
    290a:	08 f0       	brcs	.+2      	; 0x290e <__addsf3x+0x96>
    290c:	b3 cf       	rjmp	.-154    	; 0x2874 <__addsf3+0x1e>
    290e:	93 95       	inc	r25
    2910:	88 0f       	add	r24, r24
    2912:	08 f0       	brcs	.+2      	; 0x2916 <__addsf3x+0x9e>
    2914:	99 27       	eor	r25, r25
    2916:	ee 0f       	add	r30, r30
    2918:	97 95       	ror	r25
    291a:	87 95       	ror	r24
    291c:	08 95       	ret
    291e:	79 d1       	rcall	.+754    	; 0x2c12 <__fp_pscA>
    2920:	58 f0       	brcs	.+22     	; 0x2938 <__addsf3x+0xc0>
    2922:	80 e8       	ldi	r24, 0x80	; 128
    2924:	91 e0       	ldi	r25, 0x01	; 1
    2926:	09 f4       	brne	.+2      	; 0x292a <__addsf3x+0xb2>
    2928:	9e ef       	ldi	r25, 0xFE	; 254
    292a:	7a d1       	rcall	.+756    	; 0x2c20 <__fp_pscB>
    292c:	28 f0       	brcs	.+10     	; 0x2938 <__addsf3x+0xc0>
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	51 e0       	ldi	r21, 0x01	; 1
    2932:	59 f4       	brne	.+22     	; 0x294a <atan2+0xe>
    2934:	5e ef       	ldi	r21, 0xFE	; 254
    2936:	09 c0       	rjmp	.+18     	; 0x294a <atan2+0xe>
    2938:	33 c1       	rjmp	.+614    	; 0x2ba0 <__fp_nan>
    293a:	e5 c1       	rjmp	.+970    	; 0x2d06 <__fp_zero>

0000293c <atan2>:
    293c:	e9 2f       	mov	r30, r25
    293e:	e0 78       	andi	r30, 0x80	; 128
    2940:	c0 d1       	rcall	.+896    	; 0x2cc2 <__fp_split3>
    2942:	68 f3       	brcs	.-38     	; 0x291e <__addsf3x+0xa6>
    2944:	09 2e       	mov	r0, r25
    2946:	05 2a       	or	r0, r21
    2948:	c1 f3       	breq	.-16     	; 0x293a <__addsf3x+0xc2>
    294a:	26 17       	cp	r18, r22
    294c:	37 07       	cpc	r19, r23
    294e:	48 07       	cpc	r20, r24
    2950:	59 07       	cpc	r21, r25
    2952:	38 f0       	brcs	.+14     	; 0x2962 <atan2+0x26>
    2954:	0e 2e       	mov	r0, r30
    2956:	07 f8       	bld	r0, 7
    2958:	e0 25       	eor	r30, r0
    295a:	69 f0       	breq	.+26     	; 0x2976 <atan2+0x3a>
    295c:	e0 25       	eor	r30, r0
    295e:	e0 64       	ori	r30, 0x40	; 64
    2960:	0a c0       	rjmp	.+20     	; 0x2976 <atan2+0x3a>
    2962:	ef 63       	ori	r30, 0x3F	; 63
    2964:	07 f8       	bld	r0, 7
    2966:	00 94       	com	r0
    2968:	07 fa       	bst	r0, 7
    296a:	db 01       	movw	r26, r22
    296c:	b9 01       	movw	r22, r18
    296e:	9d 01       	movw	r18, r26
    2970:	dc 01       	movw	r26, r24
    2972:	ca 01       	movw	r24, r20
    2974:	ad 01       	movw	r20, r26
    2976:	ef 93       	push	r30
    2978:	46 d0       	rcall	.+140    	; 0x2a06 <__divsf3_pse>
    297a:	81 d1       	rcall	.+770    	; 0x2c7e <__fp_round>
    297c:	0a d0       	rcall	.+20     	; 0x2992 <atan>
    297e:	5f 91       	pop	r21
    2980:	55 23       	and	r21, r21
    2982:	31 f0       	breq	.+12     	; 0x2990 <atan2+0x54>
    2984:	2b ed       	ldi	r18, 0xDB	; 219
    2986:	3f e0       	ldi	r19, 0x0F	; 15
    2988:	49 e4       	ldi	r20, 0x49	; 73
    298a:	50 fd       	sbrc	r21, 0
    298c:	49 ec       	ldi	r20, 0xC9	; 201
    298e:	63 cf       	rjmp	.-314    	; 0x2856 <__addsf3>
    2990:	08 95       	ret

00002992 <atan>:
    2992:	df 93       	push	r29
    2994:	dd 27       	eor	r29, r29
    2996:	b9 2f       	mov	r27, r25
    2998:	bf 77       	andi	r27, 0x7F	; 127
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	16 16       	cp	r1, r22
    29a0:	17 06       	cpc	r1, r23
    29a2:	48 07       	cpc	r20, r24
    29a4:	5b 07       	cpc	r21, r27
    29a6:	10 f4       	brcc	.+4      	; 0x29ac <atan+0x1a>
    29a8:	d9 2f       	mov	r29, r25
    29aa:	b4 d1       	rcall	.+872    	; 0x2d14 <inverse>
    29ac:	9f 93       	push	r25
    29ae:	8f 93       	push	r24
    29b0:	7f 93       	push	r23
    29b2:	6f 93       	push	r22
    29b4:	61 d2       	rcall	.+1218   	; 0x2e78 <square>
    29b6:	ec e8       	ldi	r30, 0x8C	; 140
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	f5 d0       	rcall	.+490    	; 0x2ba6 <__fp_powser>
    29bc:	60 d1       	rcall	.+704    	; 0x2c7e <__fp_round>
    29be:	2f 91       	pop	r18
    29c0:	3f 91       	pop	r19
    29c2:	4f 91       	pop	r20
    29c4:	5f 91       	pop	r21
    29c6:	b9 d1       	rcall	.+882    	; 0x2d3a <__mulsf3x>
    29c8:	dd 23       	and	r29, r29
    29ca:	49 f0       	breq	.+18     	; 0x29de <atan+0x4c>
    29cc:	90 58       	subi	r25, 0x80	; 128
    29ce:	a2 ea       	ldi	r26, 0xA2	; 162
    29d0:	2a ed       	ldi	r18, 0xDA	; 218
    29d2:	3f e0       	ldi	r19, 0x0F	; 15
    29d4:	49 ec       	ldi	r20, 0xC9	; 201
    29d6:	5f e3       	ldi	r21, 0x3F	; 63
    29d8:	d0 78       	andi	r29, 0x80	; 128
    29da:	5d 27       	eor	r21, r29
    29dc:	4d df       	rcall	.-358    	; 0x2878 <__addsf3x>
    29de:	df 91       	pop	r29
    29e0:	4e c1       	rjmp	.+668    	; 0x2c7e <__fp_round>

000029e2 <cos>:
    29e2:	26 d1       	rcall	.+588    	; 0x2c30 <__fp_rempio2>
    29e4:	e3 95       	inc	r30
    29e6:	5c c1       	rjmp	.+696    	; 0x2ca0 <__fp_sinus>

000029e8 <__divsf3>:
    29e8:	0c d0       	rcall	.+24     	; 0x2a02 <__divsf3x>
    29ea:	49 c1       	rjmp	.+658    	; 0x2c7e <__fp_round>
    29ec:	19 d1       	rcall	.+562    	; 0x2c20 <__fp_pscB>
    29ee:	40 f0       	brcs	.+16     	; 0x2a00 <__divsf3+0x18>
    29f0:	10 d1       	rcall	.+544    	; 0x2c12 <__fp_pscA>
    29f2:	30 f0       	brcs	.+12     	; 0x2a00 <__divsf3+0x18>
    29f4:	21 f4       	brne	.+8      	; 0x29fe <__divsf3+0x16>
    29f6:	5f 3f       	cpi	r21, 0xFF	; 255
    29f8:	19 f0       	breq	.+6      	; 0x2a00 <__divsf3+0x18>
    29fa:	cc c0       	rjmp	.+408    	; 0x2b94 <__fp_inf>
    29fc:	51 11       	cpse	r21, r1
    29fe:	84 c1       	rjmp	.+776    	; 0x2d08 <__fp_szero>
    2a00:	cf c0       	rjmp	.+414    	; 0x2ba0 <__fp_nan>

00002a02 <__divsf3x>:
    2a02:	5f d1       	rcall	.+702    	; 0x2cc2 <__fp_split3>
    2a04:	98 f3       	brcs	.-26     	; 0x29ec <__divsf3+0x4>

00002a06 <__divsf3_pse>:
    2a06:	99 23       	and	r25, r25
    2a08:	c9 f3       	breq	.-14     	; 0x29fc <__divsf3+0x14>
    2a0a:	55 23       	and	r21, r21
    2a0c:	b1 f3       	breq	.-20     	; 0x29fa <__divsf3+0x12>
    2a0e:	95 1b       	sub	r25, r21
    2a10:	55 0b       	sbc	r21, r21
    2a12:	bb 27       	eor	r27, r27
    2a14:	aa 27       	eor	r26, r26
    2a16:	62 17       	cp	r22, r18
    2a18:	73 07       	cpc	r23, r19
    2a1a:	84 07       	cpc	r24, r20
    2a1c:	38 f0       	brcs	.+14     	; 0x2a2c <__divsf3_pse+0x26>
    2a1e:	9f 5f       	subi	r25, 0xFF	; 255
    2a20:	5f 4f       	sbci	r21, 0xFF	; 255
    2a22:	22 0f       	add	r18, r18
    2a24:	33 1f       	adc	r19, r19
    2a26:	44 1f       	adc	r20, r20
    2a28:	aa 1f       	adc	r26, r26
    2a2a:	a9 f3       	breq	.-22     	; 0x2a16 <__divsf3_pse+0x10>
    2a2c:	33 d0       	rcall	.+102    	; 0x2a94 <__divsf3_pse+0x8e>
    2a2e:	0e 2e       	mov	r0, r30
    2a30:	3a f0       	brmi	.+14     	; 0x2a40 <__divsf3_pse+0x3a>
    2a32:	e0 e8       	ldi	r30, 0x80	; 128
    2a34:	30 d0       	rcall	.+96     	; 0x2a96 <__divsf3_pse+0x90>
    2a36:	91 50       	subi	r25, 0x01	; 1
    2a38:	50 40       	sbci	r21, 0x00	; 0
    2a3a:	e6 95       	lsr	r30
    2a3c:	00 1c       	adc	r0, r0
    2a3e:	ca f7       	brpl	.-14     	; 0x2a32 <__divsf3_pse+0x2c>
    2a40:	29 d0       	rcall	.+82     	; 0x2a94 <__divsf3_pse+0x8e>
    2a42:	fe 2f       	mov	r31, r30
    2a44:	27 d0       	rcall	.+78     	; 0x2a94 <__divsf3_pse+0x8e>
    2a46:	66 0f       	add	r22, r22
    2a48:	77 1f       	adc	r23, r23
    2a4a:	88 1f       	adc	r24, r24
    2a4c:	bb 1f       	adc	r27, r27
    2a4e:	26 17       	cp	r18, r22
    2a50:	37 07       	cpc	r19, r23
    2a52:	48 07       	cpc	r20, r24
    2a54:	ab 07       	cpc	r26, r27
    2a56:	b0 e8       	ldi	r27, 0x80	; 128
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <__divsf3_pse+0x56>
    2a5a:	bb 0b       	sbc	r27, r27
    2a5c:	80 2d       	mov	r24, r0
    2a5e:	bf 01       	movw	r22, r30
    2a60:	ff 27       	eor	r31, r31
    2a62:	93 58       	subi	r25, 0x83	; 131
    2a64:	5f 4f       	sbci	r21, 0xFF	; 255
    2a66:	2a f0       	brmi	.+10     	; 0x2a72 <__divsf3_pse+0x6c>
    2a68:	9e 3f       	cpi	r25, 0xFE	; 254
    2a6a:	51 05       	cpc	r21, r1
    2a6c:	68 f0       	brcs	.+26     	; 0x2a88 <__divsf3_pse+0x82>
    2a6e:	92 c0       	rjmp	.+292    	; 0x2b94 <__fp_inf>
    2a70:	4b c1       	rjmp	.+662    	; 0x2d08 <__fp_szero>
    2a72:	5f 3f       	cpi	r21, 0xFF	; 255
    2a74:	ec f3       	brlt	.-6      	; 0x2a70 <__divsf3_pse+0x6a>
    2a76:	98 3e       	cpi	r25, 0xE8	; 232
    2a78:	dc f3       	brlt	.-10     	; 0x2a70 <__divsf3_pse+0x6a>
    2a7a:	86 95       	lsr	r24
    2a7c:	77 95       	ror	r23
    2a7e:	67 95       	ror	r22
    2a80:	b7 95       	ror	r27
    2a82:	f7 95       	ror	r31
    2a84:	9f 5f       	subi	r25, 0xFF	; 255
    2a86:	c9 f7       	brne	.-14     	; 0x2a7a <__divsf3_pse+0x74>
    2a88:	88 0f       	add	r24, r24
    2a8a:	91 1d       	adc	r25, r1
    2a8c:	96 95       	lsr	r25
    2a8e:	87 95       	ror	r24
    2a90:	97 f9       	bld	r25, 7
    2a92:	08 95       	ret
    2a94:	e1 e0       	ldi	r30, 0x01	; 1
    2a96:	66 0f       	add	r22, r22
    2a98:	77 1f       	adc	r23, r23
    2a9a:	88 1f       	adc	r24, r24
    2a9c:	bb 1f       	adc	r27, r27
    2a9e:	62 17       	cp	r22, r18
    2aa0:	73 07       	cpc	r23, r19
    2aa2:	84 07       	cpc	r24, r20
    2aa4:	ba 07       	cpc	r27, r26
    2aa6:	20 f0       	brcs	.+8      	; 0x2ab0 <__divsf3_pse+0xaa>
    2aa8:	62 1b       	sub	r22, r18
    2aaa:	73 0b       	sbc	r23, r19
    2aac:	84 0b       	sbc	r24, r20
    2aae:	ba 0b       	sbc	r27, r26
    2ab0:	ee 1f       	adc	r30, r30
    2ab2:	88 f7       	brcc	.-30     	; 0x2a96 <__divsf3_pse+0x90>
    2ab4:	e0 95       	com	r30
    2ab6:	08 95       	ret

00002ab8 <__fixsfsi>:
    2ab8:	04 d0       	rcall	.+8      	; 0x2ac2 <__fixunssfsi>
    2aba:	68 94       	set
    2abc:	b1 11       	cpse	r27, r1
    2abe:	24 c1       	rjmp	.+584    	; 0x2d08 <__fp_szero>
    2ac0:	08 95       	ret

00002ac2 <__fixunssfsi>:
    2ac2:	07 d1       	rcall	.+526    	; 0x2cd2 <__fp_splitA>
    2ac4:	88 f0       	brcs	.+34     	; 0x2ae8 <__fixunssfsi+0x26>
    2ac6:	9f 57       	subi	r25, 0x7F	; 127
    2ac8:	90 f0       	brcs	.+36     	; 0x2aee <__fixunssfsi+0x2c>
    2aca:	b9 2f       	mov	r27, r25
    2acc:	99 27       	eor	r25, r25
    2ace:	b7 51       	subi	r27, 0x17	; 23
    2ad0:	a0 f0       	brcs	.+40     	; 0x2afa <__fixunssfsi+0x38>
    2ad2:	d1 f0       	breq	.+52     	; 0x2b08 <__fixunssfsi+0x46>
    2ad4:	66 0f       	add	r22, r22
    2ad6:	77 1f       	adc	r23, r23
    2ad8:	88 1f       	adc	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	1a f0       	brmi	.+6      	; 0x2ae4 <__fixunssfsi+0x22>
    2ade:	ba 95       	dec	r27
    2ae0:	c9 f7       	brne	.-14     	; 0x2ad4 <__fixunssfsi+0x12>
    2ae2:	12 c0       	rjmp	.+36     	; 0x2b08 <__fixunssfsi+0x46>
    2ae4:	b1 30       	cpi	r27, 0x01	; 1
    2ae6:	81 f0       	breq	.+32     	; 0x2b08 <__fixunssfsi+0x46>
    2ae8:	0e d1       	rcall	.+540    	; 0x2d06 <__fp_zero>
    2aea:	b1 e0       	ldi	r27, 0x01	; 1
    2aec:	08 95       	ret
    2aee:	0b c1       	rjmp	.+534    	; 0x2d06 <__fp_zero>
    2af0:	67 2f       	mov	r22, r23
    2af2:	78 2f       	mov	r23, r24
    2af4:	88 27       	eor	r24, r24
    2af6:	b8 5f       	subi	r27, 0xF8	; 248
    2af8:	39 f0       	breq	.+14     	; 0x2b08 <__fixunssfsi+0x46>
    2afa:	b9 3f       	cpi	r27, 0xF9	; 249
    2afc:	cc f3       	brlt	.-14     	; 0x2af0 <__fixunssfsi+0x2e>
    2afe:	86 95       	lsr	r24
    2b00:	77 95       	ror	r23
    2b02:	67 95       	ror	r22
    2b04:	b3 95       	inc	r27
    2b06:	d9 f7       	brne	.-10     	; 0x2afe <__fixunssfsi+0x3c>
    2b08:	3e f4       	brtc	.+14     	; 0x2b18 <__fixunssfsi+0x56>
    2b0a:	90 95       	com	r25
    2b0c:	80 95       	com	r24
    2b0e:	70 95       	com	r23
    2b10:	61 95       	neg	r22
    2b12:	7f 4f       	sbci	r23, 0xFF	; 255
    2b14:	8f 4f       	sbci	r24, 0xFF	; 255
    2b16:	9f 4f       	sbci	r25, 0xFF	; 255
    2b18:	08 95       	ret

00002b1a <__floatunsisf>:
    2b1a:	e8 94       	clt
    2b1c:	09 c0       	rjmp	.+18     	; 0x2b30 <__floatsisf+0x12>

00002b1e <__floatsisf>:
    2b1e:	97 fb       	bst	r25, 7
    2b20:	3e f4       	brtc	.+14     	; 0x2b30 <__floatsisf+0x12>
    2b22:	90 95       	com	r25
    2b24:	80 95       	com	r24
    2b26:	70 95       	com	r23
    2b28:	61 95       	neg	r22
    2b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b30:	99 23       	and	r25, r25
    2b32:	a9 f0       	breq	.+42     	; 0x2b5e <__floatsisf+0x40>
    2b34:	f9 2f       	mov	r31, r25
    2b36:	96 e9       	ldi	r25, 0x96	; 150
    2b38:	bb 27       	eor	r27, r27
    2b3a:	93 95       	inc	r25
    2b3c:	f6 95       	lsr	r31
    2b3e:	87 95       	ror	r24
    2b40:	77 95       	ror	r23
    2b42:	67 95       	ror	r22
    2b44:	b7 95       	ror	r27
    2b46:	f1 11       	cpse	r31, r1
    2b48:	f8 cf       	rjmp	.-16     	; 0x2b3a <__floatsisf+0x1c>
    2b4a:	fa f4       	brpl	.+62     	; 0x2b8a <__floatsisf+0x6c>
    2b4c:	bb 0f       	add	r27, r27
    2b4e:	11 f4       	brne	.+4      	; 0x2b54 <__floatsisf+0x36>
    2b50:	60 ff       	sbrs	r22, 0
    2b52:	1b c0       	rjmp	.+54     	; 0x2b8a <__floatsisf+0x6c>
    2b54:	6f 5f       	subi	r22, 0xFF	; 255
    2b56:	7f 4f       	sbci	r23, 0xFF	; 255
    2b58:	8f 4f       	sbci	r24, 0xFF	; 255
    2b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5c:	16 c0       	rjmp	.+44     	; 0x2b8a <__floatsisf+0x6c>
    2b5e:	88 23       	and	r24, r24
    2b60:	11 f0       	breq	.+4      	; 0x2b66 <__floatsisf+0x48>
    2b62:	96 e9       	ldi	r25, 0x96	; 150
    2b64:	11 c0       	rjmp	.+34     	; 0x2b88 <__floatsisf+0x6a>
    2b66:	77 23       	and	r23, r23
    2b68:	21 f0       	breq	.+8      	; 0x2b72 <__floatsisf+0x54>
    2b6a:	9e e8       	ldi	r25, 0x8E	; 142
    2b6c:	87 2f       	mov	r24, r23
    2b6e:	76 2f       	mov	r23, r22
    2b70:	05 c0       	rjmp	.+10     	; 0x2b7c <__floatsisf+0x5e>
    2b72:	66 23       	and	r22, r22
    2b74:	71 f0       	breq	.+28     	; 0x2b92 <__floatsisf+0x74>
    2b76:	96 e8       	ldi	r25, 0x86	; 134
    2b78:	86 2f       	mov	r24, r22
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	2a f0       	brmi	.+10     	; 0x2b8a <__floatsisf+0x6c>
    2b80:	9a 95       	dec	r25
    2b82:	66 0f       	add	r22, r22
    2b84:	77 1f       	adc	r23, r23
    2b86:	88 1f       	adc	r24, r24
    2b88:	da f7       	brpl	.-10     	; 0x2b80 <__floatsisf+0x62>
    2b8a:	88 0f       	add	r24, r24
    2b8c:	96 95       	lsr	r25
    2b8e:	87 95       	ror	r24
    2b90:	97 f9       	bld	r25, 7
    2b92:	08 95       	ret

00002b94 <__fp_inf>:
    2b94:	97 f9       	bld	r25, 7
    2b96:	9f 67       	ori	r25, 0x7F	; 127
    2b98:	80 e8       	ldi	r24, 0x80	; 128
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	08 95       	ret

00002ba0 <__fp_nan>:
    2ba0:	9f ef       	ldi	r25, 0xFF	; 255
    2ba2:	80 ec       	ldi	r24, 0xC0	; 192
    2ba4:	08 95       	ret

00002ba6 <__fp_powser>:
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	1f 93       	push	r17
    2bac:	0f 93       	push	r16
    2bae:	ff 92       	push	r15
    2bb0:	ef 92       	push	r14
    2bb2:	df 92       	push	r13
    2bb4:	7b 01       	movw	r14, r22
    2bb6:	8c 01       	movw	r16, r24
    2bb8:	68 94       	set
    2bba:	05 c0       	rjmp	.+10     	; 0x2bc6 <__fp_powser+0x20>
    2bbc:	da 2e       	mov	r13, r26
    2bbe:	ef 01       	movw	r28, r30
    2bc0:	bc d0       	rcall	.+376    	; 0x2d3a <__mulsf3x>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e8 94       	clt
    2bc6:	a5 91       	lpm	r26, Z+
    2bc8:	25 91       	lpm	r18, Z+
    2bca:	35 91       	lpm	r19, Z+
    2bcc:	45 91       	lpm	r20, Z+
    2bce:	55 91       	lpm	r21, Z+
    2bd0:	ae f3       	brts	.-22     	; 0x2bbc <__fp_powser+0x16>
    2bd2:	ef 01       	movw	r28, r30
    2bd4:	51 de       	rcall	.-862    	; 0x2878 <__addsf3x>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	97 01       	movw	r18, r14
    2bda:	a8 01       	movw	r20, r16
    2bdc:	da 94       	dec	r13
    2bde:	79 f7       	brne	.-34     	; 0x2bbe <__fp_powser+0x18>
    2be0:	df 90       	pop	r13
    2be2:	ef 90       	pop	r14
    2be4:	ff 90       	pop	r15
    2be6:	0f 91       	pop	r16
    2be8:	1f 91       	pop	r17
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <__fp_powsodd>:
    2bf0:	9f 93       	push	r25
    2bf2:	8f 93       	push	r24
    2bf4:	7f 93       	push	r23
    2bf6:	6f 93       	push	r22
    2bf8:	ff 93       	push	r31
    2bfa:	ef 93       	push	r30
    2bfc:	9b 01       	movw	r18, r22
    2bfe:	ac 01       	movw	r20, r24
    2c00:	90 d0       	rcall	.+288    	; 0x2d22 <__mulsf3>
    2c02:	ef 91       	pop	r30
    2c04:	ff 91       	pop	r31
    2c06:	cf df       	rcall	.-98     	; 0x2ba6 <__fp_powser>
    2c08:	2f 91       	pop	r18
    2c0a:	3f 91       	pop	r19
    2c0c:	4f 91       	pop	r20
    2c0e:	5f 91       	pop	r21
    2c10:	88 c0       	rjmp	.+272    	; 0x2d22 <__mulsf3>

00002c12 <__fp_pscA>:
    2c12:	00 24       	eor	r0, r0
    2c14:	0a 94       	dec	r0
    2c16:	16 16       	cp	r1, r22
    2c18:	17 06       	cpc	r1, r23
    2c1a:	18 06       	cpc	r1, r24
    2c1c:	09 06       	cpc	r0, r25
    2c1e:	08 95       	ret

00002c20 <__fp_pscB>:
    2c20:	00 24       	eor	r0, r0
    2c22:	0a 94       	dec	r0
    2c24:	12 16       	cp	r1, r18
    2c26:	13 06       	cpc	r1, r19
    2c28:	14 06       	cpc	r1, r20
    2c2a:	05 06       	cpc	r0, r21
    2c2c:	08 95       	ret
    2c2e:	b8 cf       	rjmp	.-144    	; 0x2ba0 <__fp_nan>

00002c30 <__fp_rempio2>:
    2c30:	50 d0       	rcall	.+160    	; 0x2cd2 <__fp_splitA>
    2c32:	e8 f3       	brcs	.-6      	; 0x2c2e <__fp_pscB+0xe>
    2c34:	e8 94       	clt
    2c36:	e0 e0       	ldi	r30, 0x00	; 0
    2c38:	bb 27       	eor	r27, r27
    2c3a:	9f 57       	subi	r25, 0x7F	; 127
    2c3c:	f0 f0       	brcs	.+60     	; 0x2c7a <__fp_rempio2+0x4a>
    2c3e:	2a ed       	ldi	r18, 0xDA	; 218
    2c40:	3f e0       	ldi	r19, 0x0F	; 15
    2c42:	49 ec       	ldi	r20, 0xC9	; 201
    2c44:	06 c0       	rjmp	.+12     	; 0x2c52 <__fp_rempio2+0x22>
    2c46:	ee 0f       	add	r30, r30
    2c48:	bb 0f       	add	r27, r27
    2c4a:	66 1f       	adc	r22, r22
    2c4c:	77 1f       	adc	r23, r23
    2c4e:	88 1f       	adc	r24, r24
    2c50:	28 f0       	brcs	.+10     	; 0x2c5c <__fp_rempio2+0x2c>
    2c52:	b2 3a       	cpi	r27, 0xA2	; 162
    2c54:	62 07       	cpc	r22, r18
    2c56:	73 07       	cpc	r23, r19
    2c58:	84 07       	cpc	r24, r20
    2c5a:	28 f0       	brcs	.+10     	; 0x2c66 <__fp_rempio2+0x36>
    2c5c:	b2 5a       	subi	r27, 0xA2	; 162
    2c5e:	62 0b       	sbc	r22, r18
    2c60:	73 0b       	sbc	r23, r19
    2c62:	84 0b       	sbc	r24, r20
    2c64:	e3 95       	inc	r30
    2c66:	9a 95       	dec	r25
    2c68:	72 f7       	brpl	.-36     	; 0x2c46 <__fp_rempio2+0x16>
    2c6a:	80 38       	cpi	r24, 0x80	; 128
    2c6c:	30 f4       	brcc	.+12     	; 0x2c7a <__fp_rempio2+0x4a>
    2c6e:	9a 95       	dec	r25
    2c70:	bb 0f       	add	r27, r27
    2c72:	66 1f       	adc	r22, r22
    2c74:	77 1f       	adc	r23, r23
    2c76:	88 1f       	adc	r24, r24
    2c78:	d2 f7       	brpl	.-12     	; 0x2c6e <__fp_rempio2+0x3e>
    2c7a:	90 48       	sbci	r25, 0x80	; 128
    2c7c:	02 c1       	rjmp	.+516    	; 0x2e82 <__fp_mpack_finite>

00002c7e <__fp_round>:
    2c7e:	09 2e       	mov	r0, r25
    2c80:	03 94       	inc	r0
    2c82:	00 0c       	add	r0, r0
    2c84:	11 f4       	brne	.+4      	; 0x2c8a <__fp_round+0xc>
    2c86:	88 23       	and	r24, r24
    2c88:	52 f0       	brmi	.+20     	; 0x2c9e <__fp_round+0x20>
    2c8a:	bb 0f       	add	r27, r27
    2c8c:	40 f4       	brcc	.+16     	; 0x2c9e <__fp_round+0x20>
    2c8e:	bf 2b       	or	r27, r31
    2c90:	11 f4       	brne	.+4      	; 0x2c96 <__fp_round+0x18>
    2c92:	60 ff       	sbrs	r22, 0
    2c94:	04 c0       	rjmp	.+8      	; 0x2c9e <__fp_round+0x20>
    2c96:	6f 5f       	subi	r22, 0xFF	; 255
    2c98:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9e:	08 95       	ret

00002ca0 <__fp_sinus>:
    2ca0:	ef 93       	push	r30
    2ca2:	e0 ff       	sbrs	r30, 0
    2ca4:	06 c0       	rjmp	.+12     	; 0x2cb2 <__fp_sinus+0x12>
    2ca6:	a2 ea       	ldi	r26, 0xA2	; 162
    2ca8:	2a ed       	ldi	r18, 0xDA	; 218
    2caa:	3f e0       	ldi	r19, 0x0F	; 15
    2cac:	49 ec       	ldi	r20, 0xC9	; 201
    2cae:	5f eb       	ldi	r21, 0xBF	; 191
    2cb0:	e3 dd       	rcall	.-1082   	; 0x2878 <__addsf3x>
    2cb2:	e5 df       	rcall	.-54     	; 0x2c7e <__fp_round>
    2cb4:	0f 90       	pop	r0
    2cb6:	03 94       	inc	r0
    2cb8:	01 fc       	sbrc	r0, 1
    2cba:	90 58       	subi	r25, 0x80	; 128
    2cbc:	e9 eb       	ldi	r30, 0xB9	; 185
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	97 cf       	rjmp	.-210    	; 0x2bf0 <__fp_powsodd>

00002cc2 <__fp_split3>:
    2cc2:	57 fd       	sbrc	r21, 7
    2cc4:	90 58       	subi	r25, 0x80	; 128
    2cc6:	44 0f       	add	r20, r20
    2cc8:	55 1f       	adc	r21, r21
    2cca:	59 f0       	breq	.+22     	; 0x2ce2 <__fp_splitA+0x10>
    2ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    2cce:	71 f0       	breq	.+28     	; 0x2cec <__fp_splitA+0x1a>
    2cd0:	47 95       	ror	r20

00002cd2 <__fp_splitA>:
    2cd2:	88 0f       	add	r24, r24
    2cd4:	97 fb       	bst	r25, 7
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	61 f0       	breq	.+24     	; 0x2cf2 <__fp_splitA+0x20>
    2cda:	9f 3f       	cpi	r25, 0xFF	; 255
    2cdc:	79 f0       	breq	.+30     	; 0x2cfc <__fp_splitA+0x2a>
    2cde:	87 95       	ror	r24
    2ce0:	08 95       	ret
    2ce2:	12 16       	cp	r1, r18
    2ce4:	13 06       	cpc	r1, r19
    2ce6:	14 06       	cpc	r1, r20
    2ce8:	55 1f       	adc	r21, r21
    2cea:	f2 cf       	rjmp	.-28     	; 0x2cd0 <__fp_split3+0xe>
    2cec:	46 95       	lsr	r20
    2cee:	f1 df       	rcall	.-30     	; 0x2cd2 <__fp_splitA>
    2cf0:	08 c0       	rjmp	.+16     	; 0x2d02 <__fp_splitA+0x30>
    2cf2:	16 16       	cp	r1, r22
    2cf4:	17 06       	cpc	r1, r23
    2cf6:	18 06       	cpc	r1, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	f1 cf       	rjmp	.-30     	; 0x2cde <__fp_splitA+0xc>
    2cfc:	86 95       	lsr	r24
    2cfe:	71 05       	cpc	r23, r1
    2d00:	61 05       	cpc	r22, r1
    2d02:	08 94       	sec
    2d04:	08 95       	ret

00002d06 <__fp_zero>:
    2d06:	e8 94       	clt

00002d08 <__fp_szero>:
    2d08:	bb 27       	eor	r27, r27
    2d0a:	66 27       	eor	r22, r22
    2d0c:	77 27       	eor	r23, r23
    2d0e:	cb 01       	movw	r24, r22
    2d10:	97 f9       	bld	r25, 7
    2d12:	08 95       	ret

00002d14 <inverse>:
    2d14:	9b 01       	movw	r18, r22
    2d16:	ac 01       	movw	r20, r24
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	80 e8       	ldi	r24, 0x80	; 128
    2d1e:	9f e3       	ldi	r25, 0x3F	; 63
    2d20:	63 ce       	rjmp	.-826    	; 0x29e8 <__divsf3>

00002d22 <__mulsf3>:
    2d22:	0b d0       	rcall	.+22     	; 0x2d3a <__mulsf3x>
    2d24:	ac cf       	rjmp	.-168    	; 0x2c7e <__fp_round>
    2d26:	75 df       	rcall	.-278    	; 0x2c12 <__fp_pscA>
    2d28:	28 f0       	brcs	.+10     	; 0x2d34 <__mulsf3+0x12>
    2d2a:	7a df       	rcall	.-268    	; 0x2c20 <__fp_pscB>
    2d2c:	18 f0       	brcs	.+6      	; 0x2d34 <__mulsf3+0x12>
    2d2e:	95 23       	and	r25, r21
    2d30:	09 f0       	breq	.+2      	; 0x2d34 <__mulsf3+0x12>
    2d32:	30 cf       	rjmp	.-416    	; 0x2b94 <__fp_inf>
    2d34:	35 cf       	rjmp	.-406    	; 0x2ba0 <__fp_nan>
    2d36:	11 24       	eor	r1, r1
    2d38:	e7 cf       	rjmp	.-50     	; 0x2d08 <__fp_szero>

00002d3a <__mulsf3x>:
    2d3a:	c3 df       	rcall	.-122    	; 0x2cc2 <__fp_split3>
    2d3c:	a0 f3       	brcs	.-24     	; 0x2d26 <__mulsf3+0x4>

00002d3e <__mulsf3_pse>:
    2d3e:	95 9f       	mul	r25, r21
    2d40:	d1 f3       	breq	.-12     	; 0x2d36 <__mulsf3+0x14>
    2d42:	95 0f       	add	r25, r21
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	55 1f       	adc	r21, r21
    2d48:	62 9f       	mul	r22, r18
    2d4a:	f0 01       	movw	r30, r0
    2d4c:	72 9f       	mul	r23, r18
    2d4e:	bb 27       	eor	r27, r27
    2d50:	f0 0d       	add	r31, r0
    2d52:	b1 1d       	adc	r27, r1
    2d54:	63 9f       	mul	r22, r19
    2d56:	aa 27       	eor	r26, r26
    2d58:	f0 0d       	add	r31, r0
    2d5a:	b1 1d       	adc	r27, r1
    2d5c:	aa 1f       	adc	r26, r26
    2d5e:	64 9f       	mul	r22, r20
    2d60:	66 27       	eor	r22, r22
    2d62:	b0 0d       	add	r27, r0
    2d64:	a1 1d       	adc	r26, r1
    2d66:	66 1f       	adc	r22, r22
    2d68:	82 9f       	mul	r24, r18
    2d6a:	22 27       	eor	r18, r18
    2d6c:	b0 0d       	add	r27, r0
    2d6e:	a1 1d       	adc	r26, r1
    2d70:	62 1f       	adc	r22, r18
    2d72:	73 9f       	mul	r23, r19
    2d74:	b0 0d       	add	r27, r0
    2d76:	a1 1d       	adc	r26, r1
    2d78:	62 1f       	adc	r22, r18
    2d7a:	83 9f       	mul	r24, r19
    2d7c:	a0 0d       	add	r26, r0
    2d7e:	61 1d       	adc	r22, r1
    2d80:	22 1f       	adc	r18, r18
    2d82:	74 9f       	mul	r23, r20
    2d84:	33 27       	eor	r19, r19
    2d86:	a0 0d       	add	r26, r0
    2d88:	61 1d       	adc	r22, r1
    2d8a:	23 1f       	adc	r18, r19
    2d8c:	84 9f       	mul	r24, r20
    2d8e:	60 0d       	add	r22, r0
    2d90:	21 1d       	adc	r18, r1
    2d92:	82 2f       	mov	r24, r18
    2d94:	76 2f       	mov	r23, r22
    2d96:	6a 2f       	mov	r22, r26
    2d98:	11 24       	eor	r1, r1
    2d9a:	9f 57       	subi	r25, 0x7F	; 127
    2d9c:	50 40       	sbci	r21, 0x00	; 0
    2d9e:	8a f0       	brmi	.+34     	; 0x2dc2 <__mulsf3_pse+0x84>
    2da0:	e1 f0       	breq	.+56     	; 0x2dda <__mulsf3_pse+0x9c>
    2da2:	88 23       	and	r24, r24
    2da4:	4a f0       	brmi	.+18     	; 0x2db8 <__mulsf3_pse+0x7a>
    2da6:	ee 0f       	add	r30, r30
    2da8:	ff 1f       	adc	r31, r31
    2daa:	bb 1f       	adc	r27, r27
    2dac:	66 1f       	adc	r22, r22
    2dae:	77 1f       	adc	r23, r23
    2db0:	88 1f       	adc	r24, r24
    2db2:	91 50       	subi	r25, 0x01	; 1
    2db4:	50 40       	sbci	r21, 0x00	; 0
    2db6:	a9 f7       	brne	.-22     	; 0x2da2 <__mulsf3_pse+0x64>
    2db8:	9e 3f       	cpi	r25, 0xFE	; 254
    2dba:	51 05       	cpc	r21, r1
    2dbc:	70 f0       	brcs	.+28     	; 0x2dda <__mulsf3_pse+0x9c>
    2dbe:	ea ce       	rjmp	.-556    	; 0x2b94 <__fp_inf>
    2dc0:	a3 cf       	rjmp	.-186    	; 0x2d08 <__fp_szero>
    2dc2:	5f 3f       	cpi	r21, 0xFF	; 255
    2dc4:	ec f3       	brlt	.-6      	; 0x2dc0 <__mulsf3_pse+0x82>
    2dc6:	98 3e       	cpi	r25, 0xE8	; 232
    2dc8:	dc f3       	brlt	.-10     	; 0x2dc0 <__mulsf3_pse+0x82>
    2dca:	86 95       	lsr	r24
    2dcc:	77 95       	ror	r23
    2dce:	67 95       	ror	r22
    2dd0:	b7 95       	ror	r27
    2dd2:	f7 95       	ror	r31
    2dd4:	e7 95       	ror	r30
    2dd6:	9f 5f       	subi	r25, 0xFF	; 255
    2dd8:	c1 f7       	brne	.-16     	; 0x2dca <__mulsf3_pse+0x8c>
    2dda:	fe 2b       	or	r31, r30
    2ddc:	88 0f       	add	r24, r24
    2dde:	91 1d       	adc	r25, r1
    2de0:	96 95       	lsr	r25
    2de2:	87 95       	ror	r24
    2de4:	97 f9       	bld	r25, 7
    2de6:	08 95       	ret

00002de8 <sin>:
    2de8:	9f 93       	push	r25
    2dea:	22 df       	rcall	.-444    	; 0x2c30 <__fp_rempio2>
    2dec:	0f 90       	pop	r0
    2dee:	07 fc       	sbrc	r0, 7
    2df0:	ee 5f       	subi	r30, 0xFE	; 254
    2df2:	56 cf       	rjmp	.-340    	; 0x2ca0 <__fp_sinus>
    2df4:	11 f4       	brne	.+4      	; 0x2dfa <sin+0x12>
    2df6:	0e f4       	brtc	.+2      	; 0x2dfa <sin+0x12>
    2df8:	d3 ce       	rjmp	.-602    	; 0x2ba0 <__fp_nan>
    2dfa:	41 c0       	rjmp	.+130    	; 0x2e7e <__fp_mpack>

00002dfc <sqrt>:
    2dfc:	6a df       	rcall	.-300    	; 0x2cd2 <__fp_splitA>
    2dfe:	d0 f3       	brcs	.-12     	; 0x2df4 <sin+0xc>
    2e00:	99 23       	and	r25, r25
    2e02:	d9 f3       	breq	.-10     	; 0x2dfa <sin+0x12>
    2e04:	ce f3       	brts	.-14     	; 0x2df8 <sin+0x10>
    2e06:	9f 57       	subi	r25, 0x7F	; 127
    2e08:	55 0b       	sbc	r21, r21
    2e0a:	87 ff       	sbrs	r24, 7
    2e0c:	46 d0       	rcall	.+140    	; 0x2e9a <__fp_norm2>
    2e0e:	00 24       	eor	r0, r0
    2e10:	a0 e6       	ldi	r26, 0x60	; 96
    2e12:	40 ea       	ldi	r20, 0xA0	; 160
    2e14:	90 01       	movw	r18, r0
    2e16:	80 58       	subi	r24, 0x80	; 128
    2e18:	56 95       	lsr	r21
    2e1a:	97 95       	ror	r25
    2e1c:	28 f4       	brcc	.+10     	; 0x2e28 <sqrt+0x2c>
    2e1e:	80 5c       	subi	r24, 0xC0	; 192
    2e20:	66 0f       	add	r22, r22
    2e22:	77 1f       	adc	r23, r23
    2e24:	88 1f       	adc	r24, r24
    2e26:	20 f0       	brcs	.+8      	; 0x2e30 <sqrt+0x34>
    2e28:	26 17       	cp	r18, r22
    2e2a:	37 07       	cpc	r19, r23
    2e2c:	48 07       	cpc	r20, r24
    2e2e:	30 f4       	brcc	.+12     	; 0x2e3c <sqrt+0x40>
    2e30:	62 1b       	sub	r22, r18
    2e32:	73 0b       	sbc	r23, r19
    2e34:	84 0b       	sbc	r24, r20
    2e36:	20 29       	or	r18, r0
    2e38:	31 29       	or	r19, r1
    2e3a:	4a 2b       	or	r20, r26
    2e3c:	a6 95       	lsr	r26
    2e3e:	17 94       	ror	r1
    2e40:	07 94       	ror	r0
    2e42:	20 25       	eor	r18, r0
    2e44:	31 25       	eor	r19, r1
    2e46:	4a 27       	eor	r20, r26
    2e48:	58 f7       	brcc	.-42     	; 0x2e20 <sqrt+0x24>
    2e4a:	66 0f       	add	r22, r22
    2e4c:	77 1f       	adc	r23, r23
    2e4e:	88 1f       	adc	r24, r24
    2e50:	20 f0       	brcs	.+8      	; 0x2e5a <sqrt+0x5e>
    2e52:	26 17       	cp	r18, r22
    2e54:	37 07       	cpc	r19, r23
    2e56:	48 07       	cpc	r20, r24
    2e58:	30 f4       	brcc	.+12     	; 0x2e66 <sqrt+0x6a>
    2e5a:	62 0b       	sbc	r22, r18
    2e5c:	73 0b       	sbc	r23, r19
    2e5e:	84 0b       	sbc	r24, r20
    2e60:	20 0d       	add	r18, r0
    2e62:	31 1d       	adc	r19, r1
    2e64:	41 1d       	adc	r20, r1
    2e66:	a0 95       	com	r26
    2e68:	81 f7       	brne	.-32     	; 0x2e4a <sqrt+0x4e>
    2e6a:	b9 01       	movw	r22, r18
    2e6c:	84 2f       	mov	r24, r20
    2e6e:	91 58       	subi	r25, 0x81	; 129
    2e70:	88 0f       	add	r24, r24
    2e72:	96 95       	lsr	r25
    2e74:	87 95       	ror	r24
    2e76:	08 95       	ret

00002e78 <square>:
    2e78:	9b 01       	movw	r18, r22
    2e7a:	ac 01       	movw	r20, r24
    2e7c:	52 cf       	rjmp	.-348    	; 0x2d22 <__mulsf3>

00002e7e <__fp_mpack>:
    2e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e80:	31 f0       	breq	.+12     	; 0x2e8e <__fp_mpack_finite+0xc>

00002e82 <__fp_mpack_finite>:
    2e82:	91 50       	subi	r25, 0x01	; 1
    2e84:	20 f4       	brcc	.+8      	; 0x2e8e <__fp_mpack_finite+0xc>
    2e86:	87 95       	ror	r24
    2e88:	77 95       	ror	r23
    2e8a:	67 95       	ror	r22
    2e8c:	b7 95       	ror	r27
    2e8e:	88 0f       	add	r24, r24
    2e90:	91 1d       	adc	r25, r1
    2e92:	96 95       	lsr	r25
    2e94:	87 95       	ror	r24
    2e96:	97 f9       	bld	r25, 7
    2e98:	08 95       	ret

00002e9a <__fp_norm2>:
    2e9a:	91 50       	subi	r25, 0x01	; 1
    2e9c:	50 40       	sbci	r21, 0x00	; 0
    2e9e:	66 0f       	add	r22, r22
    2ea0:	77 1f       	adc	r23, r23
    2ea2:	88 1f       	adc	r24, r24
    2ea4:	d2 f7       	brpl	.-12     	; 0x2e9a <__fp_norm2>
    2ea6:	08 95       	ret

00002ea8 <__divmodhi4>:
    2ea8:	97 fb       	bst	r25, 7
    2eaa:	07 2e       	mov	r0, r23
    2eac:	16 f4       	brtc	.+4      	; 0x2eb2 <__divmodhi4+0xa>
    2eae:	00 94       	com	r0
    2eb0:	06 d0       	rcall	.+12     	; 0x2ebe <__divmodhi4_neg1>
    2eb2:	77 fd       	sbrc	r23, 7
    2eb4:	08 d0       	rcall	.+16     	; 0x2ec6 <__divmodhi4_neg2>
    2eb6:	0b d0       	rcall	.+22     	; 0x2ece <__udivmodhi4>
    2eb8:	07 fc       	sbrc	r0, 7
    2eba:	05 d0       	rcall	.+10     	; 0x2ec6 <__divmodhi4_neg2>
    2ebc:	3e f4       	brtc	.+14     	; 0x2ecc <__divmodhi4_exit>

00002ebe <__divmodhi4_neg1>:
    2ebe:	90 95       	com	r25
    2ec0:	81 95       	neg	r24
    2ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec4:	08 95       	ret

00002ec6 <__divmodhi4_neg2>:
    2ec6:	70 95       	com	r23
    2ec8:	61 95       	neg	r22
    2eca:	7f 4f       	sbci	r23, 0xFF	; 255

00002ecc <__divmodhi4_exit>:
    2ecc:	08 95       	ret

00002ece <__udivmodhi4>:
    2ece:	aa 1b       	sub	r26, r26
    2ed0:	bb 1b       	sub	r27, r27
    2ed2:	51 e1       	ldi	r21, 0x11	; 17
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <__udivmodhi4_ep>

00002ed6 <__udivmodhi4_loop>:
    2ed6:	aa 1f       	adc	r26, r26
    2ed8:	bb 1f       	adc	r27, r27
    2eda:	a6 17       	cp	r26, r22
    2edc:	b7 07       	cpc	r27, r23
    2ede:	10 f0       	brcs	.+4      	; 0x2ee4 <__udivmodhi4_ep>
    2ee0:	a6 1b       	sub	r26, r22
    2ee2:	b7 0b       	sbc	r27, r23

00002ee4 <__udivmodhi4_ep>:
    2ee4:	88 1f       	adc	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	5a 95       	dec	r21
    2eea:	a9 f7       	brne	.-22     	; 0x2ed6 <__udivmodhi4_loop>
    2eec:	80 95       	com	r24
    2eee:	90 95       	com	r25
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	08 95       	ret

00002ef6 <abort>:
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	f8 94       	cli
    2efc:	10 c0       	rjmp	.+32     	; 0x2f1e <_exit>

00002efe <eeprom_write_word>:
    2efe:	02 d0       	rcall	.+4      	; 0x2f04 <eeprom_write_byte>
    2f00:	27 2f       	mov	r18, r23
    2f02:	01 c0       	rjmp	.+2      	; 0x2f06 <eeprom_write_r18>

00002f04 <eeprom_write_byte>:
    2f04:	26 2f       	mov	r18, r22

00002f06 <eeprom_write_r18>:
    2f06:	e1 99       	sbic	0x1c, 1	; 28
    2f08:	fe cf       	rjmp	.-4      	; 0x2f06 <eeprom_write_r18>
    2f0a:	9f bb       	out	0x1f, r25	; 31
    2f0c:	8e bb       	out	0x1e, r24	; 30
    2f0e:	2d bb       	out	0x1d, r18	; 29
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	e2 9a       	sbi	0x1c, 2	; 28
    2f16:	e1 9a       	sbi	0x1c, 1	; 28
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	08 95       	ret

00002f1e <_exit>:
    2f1e:	f8 94       	cli

00002f20 <__stop_program>:
    2f20:	ff cf       	rjmp	.-2      	; 0x2f20 <__stop_program>
